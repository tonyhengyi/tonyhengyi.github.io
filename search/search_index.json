{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stopWordFilter"]},"docs":[{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/","title":"\u5b8f\u89c2\u539f\u7406","text":"<p>\u5ba2\u6237\u901a\u8fc7http\u7684GET\u8bf7\u6c42\uff0c\u4e0a\u4f20\u641c\u7d22\u5173\u952e\u5b57\uff0c\u8fdb\u884c\u641c\u7d22\u3002 \u670d\u52a1\u5668\u5728\u641c\u7d22\u6a21\u5757\uff0c\u901a\u8fc7\u68c0\u7d22\u7d22\u5f15\u5f97\u5230\u76f8\u5173\u7684html\uff0c\uff08\u53bb\u6807\u7b7e&amp;&amp;\u6570\u636e\u6e05\u7406\uff0c\u5efa\u7acb\u7d22\u5f15\uff09 \u62fc\u63a5\u591a\u4e2a\u7f51\u9875\u7684title\u548cdesc+url\uff0c\u6784\u5efa\u6210html\u8fd4\u56de\u7ed9\u7528\u6237\u3002</p>"},{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/#_2","title":"\u7528\u5230\u7684\u6280\u672f","text":"<p>c/c++,STL,\u51c6\u6807\u51c6\u5e93Boost,Jsoncpp,cppjieba,cpp-httplib</p>"},{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/#_3","title":"\u6b63\u6392\u7d22\u5f15\u548c\u5012\u6392\u7d22\u5f15","text":"<p>\u6b63\u6d3e\u7d22\u5f15\uff0c\u5c31\u662f\u5efa\u7acb\u6587\u6863ID\u548c\u6587\u6863\u5185\u5bb9\u7684\u5173\u7cfb\uff0c\u901a\u8fc7\u6587\u6863ID\u641c\u7d22\u6587\u6863\u5185\u5bb9 \u5012\u6392\u7d22\u5f15\uff0c\u5c31\u662f\u5efa\u7acb\u6587\u6863\u5185\u5bb9\uff08\u5206\u8bcd\uff09\u548c\u6587\u6863ID\u7684\u5173\u7cfb\uff0c\u901a\u8fc7\u6587\u6863\u5185\u5bb9\u641c\u7d22\u6587\u6863ID\uff08\u9700\u8981\u5148\u5206\u8bcd\uff09</p>"},{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/#parser","title":"\u6570\u636e\u533a\u6807\u7b7e\u548c\u6570\u636e\u6e05\u6d17\u7684\u6a21\u5757Parser","text":"<p><pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\n#include&lt;boost/filesystem.hpp&gt;\n#include&lt;util.hpp&gt;\n\nconst std::string src_path=\"/boost_searcher/data/input\";\nconst std::string output=\"data/raw_html/raw.txt\";\n\ntypedef struct DocInfo{\n    std::string title;   //\u6587\u6863\u7684\u6807\u9898\n    std::string content; //\u6587\u6863\u5185\u5bb9\n    std::string url;     //\u8be5\u6587\u6863\u5728\u5b98\u7f51\u4e2d\u7684url\n}DocInfo_t;\n\nbool EnumFile(const std::string &amp;src_path,std::vector&lt;std::string&gt; *files_list);\nbool ParseHtml(const std::vector&lt;std::string&gt;&amp;files_list,std::vector&lt;DocInfo&gt;* results);\nbool SaveHtml(std::vector&lt;DocInfo&gt; &amp;results,const std::string &amp;output);\nint main()\n{\n    std::vector&lt;std::string&gt; files_list;\n    //\u7b2c\u4e00\u6b65: \u9012\u5f52\u5f0f\u7684\u628a\u6bcf\u4e2ahtml\u6587\u4ef6\u540d\u5e26\u8def\u5f84\uff0c\u4fdd\u5b58\u5230files_list\u4e2d\uff0c\u65b9\u4fbf\u540e\u671f\u8fdb\u884c\u4e00\u4e2a\u4e00\u4e2a\u7684\u6587\u4ef6\u8fdb\u884c\u8bfb\u53d6\n    if(!EnumFile(src_path, &amp;files_list)){\n        std::cerr &lt;&lt; \"enum file name error!\" &lt;&lt; std::endl;\n        return 1;\n\n    }\n    //\u7b2c\u4e8c\u6b65: \u6309\u7167files_list\u8bfb\u53d6\u6bcf\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5e76\u8fdb\u884c\u89e3\u6790\n    std::vector&lt;DocInfo_t&gt; results;\n    if(!ParseHtml(files_list, &amp;results)){\n        std::cerr &lt;&lt; \"parse html error\" &lt;&lt; std::endl;\n        return 2;\n    }\n\n    //\u7b2c\u4e09\u6b65: \u628a\u89e3\u6790\u5b8c\u6bd5\u7684\u5404\u4e2a\u6587\u4ef6\u5185\u5bb9\uff0c\u5199\u5165\u5230output,\u6309\u7167\\3\u4f5c\u4e3a\u6bcf\u4e2a\u6587\u6863\u7684\u5206\u5272\u7b26\n    if(!SaveHtml(results, output)){\n        std::cerr &lt;&lt; \"sava html error\" &lt;&lt; std::endl;\n        return 3;\n    }\n\n    return 0;\n}\n\nbool EnumFile(const std::string &amp;src_path, std::vector&lt;std::string&gt; *files_list)\n{\n    namespace fs = boost::filesystem;\n    fs::path root_path(src_path);\n\n    //\u5224\u65ad\u8def\u5f84\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u518d\u5f80\u540e\u8d70\u4e86\n    if(!fs::exists(root_path)){\n        std::cerr &lt;&lt; src_path &lt;&lt; \" not exists\" &lt;&lt; std::endl;\n        return false;\n    }\n\n    //\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684\u8fed\u4ee3\u5668\uff0c\u7528\u6765\u8fdb\u884c\u5224\u65ad\u9012\u5f52\u7ed3\u675f\n    fs::recursive_directory_iterator end;\n    for(fs::recursive_directory_iterator iter(root_path); iter != end; iter++){\n        //\u5224\u65ad\u6587\u4ef6\u662f\u5426\u662f\u666e\u901a\u6587\u4ef6\uff0chtml\u90fd\u662f\u666e\u901a\u6587\u4ef6\n        if(!fs::is_regular_file(*iter)){ \n            continue;\n        }\n        if(iter-&gt;path().extension() != \".html\"){ //\u5224\u65ad\u6587\u4ef6\u8def\u5f84\u540d\u7684\u540e\u7f00\u662f\u5426\u7b26\u5408\u8981\u6c42\n            continue;\n        }\n        //std::cout &lt;&lt; \"debug: \" &lt;&lt; iter-&gt;path().string() &lt;&lt; std::endl;\n        //\u5f53\u524d\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\uff0c\u4ee5.html\u7ed3\u675f\u7684\u666e\u901a\u7f51\u9875\u6587\u4ef6\n        files_list-&gt;push_back(iter-&gt;path().string()); //\u5c06\u6240\u6709\u5e26\u8def\u5f84\u7684html\u4fdd\u5b58\u5728files_list,\u65b9\u4fbf\u540e\u7eed\u8fdb\u884c\u6587\u672c\u5206\u6790\n    }\n\n    return true;\n}\n\nstatic bool ParseTitle(const std::string &amp;file, std::string *title)\n{\n    std::size_t begin = file.find(\"&lt;title&gt;\");\n    if(begin == std::string::npos){\n        return false;\n    }\n    std::size_t end = file.find(\"&lt;/title&gt;\");\n    if(end == std::string::npos){\n        return false;\n    }\n\n    begin += std::string(\"&lt;title&gt;\").size();\n\n    if(begin &gt; end){\n        return false;\n    }\n    *title = file.substr(begin, end - begin);\n    return true;\n}\n\nstatic bool ParseContent(const std::string &amp;file, std::string *content)\n{\n    //\u53bb\u6807\u7b7e,\u57fa\u4e8e\u4e00\u4e2a\u7b80\u6613\u7684\u72b6\u6001\u673a\n    enum status{\n        LABLE,\n        CONTENT\n    };\n\n    enum status s = LABLE;\n    for( char c : file){\n        switch(s){\n            case LABLE:\n                if(c == '&gt;') s = CONTENT;\n                break;\n            case CONTENT:\n                if(c == '&lt;') s = LABLE;\n                else {\n                    //\u6211\u4eec\u4e0d\u60f3\u4fdd\u7559\u539f\u59cb\u6587\u4ef6\u4e2d\u7684\\n,\u56e0\u4e3a\u6211\u4eec\u60f3\u7528\\n\u4f5c\u4e3ahtml\u89e3\u6790\u4e4b\u540e\u6587\u672c\u7684\u5206\u9694\u7b26\n                    if(c == '\\n') c = ' ';\n                    content-&gt;push_back(c);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    return true;\n}\n\nstatic bool ParseUrl(const std::string &amp;file_path, std::string *url)\n{\n    std::string url_head = \"https://www.boost.org/doc/libs/1_78_0/doc/html\";\n    std::string url_tail = file_path.substr(src_path.size());\n\n    *url = url_head + url_tail;\n    return true;\n}\n\n//for debug\nstatic void ShowDoc( const DocInfo_t &amp;doc)\n{\n    std::cout &lt;&lt; \"title: \" &lt;&lt; doc.title &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"content: \" &lt;&lt; doc.content &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"url: \" &lt;&lt; doc.url &lt;&lt; std::endl;\n}\n\nbool ParseHtml(const std::vector&lt;std::string&gt; &amp;files_list, std::vector&lt;DocInfo_t&gt; *results)\n{\n    for(const std::string &amp;file : files_list){\n        //1. \u8bfb\u53d6\u6587\u4ef6\uff0cRead();\n        std::string result;\n        if(!ns_util::FileUtil::ReadFile(file, &amp;result)){\n            continue;\n        }\n        DocInfo_t doc;\n        //2. \u89e3\u6790\u6307\u5b9a\u7684\u6587\u4ef6\uff0c\u63d0\u53d6title\n        if(!ParseTitle(result, &amp;doc.title)){\n            continue;\n        }\n        //3. \u89e3\u6790\u6307\u5b9a\u7684\u6587\u4ef6\uff0c\u63d0\u53d6content,\u5c31\u662f\u53bb\u6807\u7b7e\n        if(!ParseContent(result, &amp;doc.content)){\n            continue;\n        }\n        //4. \u89e3\u6790\u6307\u5b9a\u7684\u6587\u4ef6\u8def\u5f84\uff0c\u6784\u5efaurl\n        if(!ParseUrl(file, &amp;doc.url)){\n            continue;\n        }\n\n\n        results-&gt;push_back(std::move(doc)); \n        //ShowDoc(doc);\n\n    }\n    return true;\n}\n\nbool SaveHtml(const std::vector&lt;DocInfo_t&gt; &amp;results, const std::string &amp;output)\n{\n#define SEP '\\3'\n    //\u6309\u7167\u4e8c\u8fdb\u5236\u65b9\u5f0f\u8fdb\u884c\u5199\u5165\n    std::ofstream out(output, std::ios::out | std::ios::binary);\n    if(!out.is_open()){\n        std::cerr &lt;&lt; \"open \" &lt;&lt; output &lt;&lt; \" failed!\" &lt;&lt; std::endl;\n        return false;\n    }\n\n    //\u5c31\u53ef\u4ee5\u8fdb\u884c\u6587\u4ef6\u5185\u5bb9\u7684\u5199\u5165\u4e86\n    for(auto &amp;item : results){\n        std::string out_string;\n        out_string = item.title;\n        out_string += SEP;\n        out_string += item.content;\n        out_string += SEP;\n        out_string += item.url;\n        out_string += '\\n';\n\n        out.write(out_string.c_str(), out_string.size());\n    }\n\n    out.close();\n\n    return true;\n}\n</code></pre> \u5c06\u5b98\u7f51\u4e0a\u4e0b\u8f7d\u7684html\u6587\u4ef6\u90fd\u5220\u53bb&lt;&gt;\u6807\u7b7e\uff0c\u7136\u540e\u4ee5'\\3'\u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u5c06title\u3001content\u3001url\u5199\u5165\u6587\u4ef6\uff0c\u65b9\u4fbf\u540e\u7eed\u7684\u6587\u672c\u5206\u6790\u3002</p>"},{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/#_4","title":"\u5efa\u7acb\u7d22\u5f15\u6587\u4ef6","text":""},{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/#_5","title":"\u6b63\u6392\u5012\u6392\u7684\u7ed3\u6784","text":"<pre><code>#pragma once\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;fstream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;mutex&gt;\n#include \"util.hpp\"\n#include \"log.hpp\"\n\nnamespace ns_index{\n\n    struct DocInfo{\n        std::string title;   //\u6587\u6863\u7684\u6807\u9898\n        std::string content; //\u6587\u6863\u5bf9\u5e94\u7684\u53bb\u6807\u7b7e\u4e4b\u540e\u7684\u5185\u5bb9\n        std::string url;     //\u5b98\u7f51\u6587\u6863url\n        uint64_t doc_id;          //\u6587\u6863\u7684ID\n    };\n\n    struct InvertedElem{\n        uint64_t doc_id;\n        std::string word;\n        int weight;\n        InvertedElem():weight(0){}\n    };\n\n    //\u5012\u6392\u62c9\u94fe\n    typedef std::vector&lt;InvertedElem&gt; InvertedList;\n\n    class Index{\n        private:\n            //\u6b63\u6392\u7d22\u5f15\u7684\u6570\u636e\u7ed3\u6784\u7528\u6570\u7ec4\uff0c\u6570\u7ec4\u7684\u4e0b\u6807\u5929\u7136\u662f\u6587\u6863\u7684ID\n            std::vector&lt;DocInfo&gt; forward_index; //\u6b63\u6392\u7d22\u5f15\n            //\u5012\u6392\u7d22\u5f15\u4e00\u5b9a\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u548c\u4e00\u7ec4(\u4e2a)InvertedElem\u5bf9\u5e94[\u5173\u952e\u5b57\u548c\u5012\u6392\u62c9\u94fe\u7684\u6620\u5c04\u5173\u7cfb]\n            std::unordered_map&lt;std::string, InvertedList&gt; inverted_index;\n        private:\n            Index(){} \n            Index(const Index&amp;) = delete;\n            Index&amp; operator=(const Index&amp;) = delete;\n\n            static Index* instance;\n            static std::mutex mtx;\n        public:\n            ~Index(){}\n        public:\n            static Index* GetInstance()\n            {\n                if(nullptr == instance){\n                    mtx.lock();\n                    if(nullptr == instance){\n                        instance = new Index();\n                    }\n                    mtx.unlock();\n                }\n                return instance;\n            }\n            //\u6839\u636edoc_id\u627e\u5230\u627e\u5230\u6587\u6863\u5185\u5bb9\n            DocInfo *GetForwardIndex(uint64_t doc_id)\n            {\n                if(doc_id &gt;= forward_index.size()){\n                    std::cerr &lt;&lt; \"doc_id out range, error!\" &lt;&lt; std::endl;\n                    return nullptr;\n                }\n                return &amp;forward_index[doc_id];\n            }\n\n            //\u6839\u636e\u5173\u952e\u5b57string\uff0c\u83b7\u5f97\u5012\u6392\u62c9\u94fe\n            InvertedList *GetInvertedList(const std::string &amp;word)\n            {\n                auto iter = inverted_index.find(word);\n                if(iter == inverted_index.end()){\n                    std::cerr &lt;&lt; word &lt;&lt; \" have no InvertedList\" &lt;&lt; std::endl;\n                    return nullptr;\n                }\n                return &amp;(iter-&gt;second);\n            }\n            //\u6839\u636e\u53bb\u6807\u7b7e\uff0c\u683c\u5f0f\u5316\u4e4b\u540e\u7684\u6587\u6863\uff0c\u6784\u5efa\u6b63\u6392\u548c\u5012\u6392\u7d22\u5f15\n            //data/raw_html/raw.txt\n            bool BuildIndex(const std::string &amp;input) //parse\u5904\u7406\u5b8c\u6bd5\u7684\u6570\u636e\u4ea4\u7ed9\u6211\n            {\n                std::ifstream in(input, std::ios::in | std::ios::binary);\n                if(!in.is_open()){\n                    std::cerr &lt;&lt; \"sorry, \" &lt;&lt; input &lt;&lt; \" open error\" &lt;&lt; std::endl;\n                    return false;\n                }\n\n                std::string line;\n                int count = 0;\n                while(std::getline(in, line)){\n                    DocInfo * doc = BuildForwardIndex(line);\n                    if(nullptr == doc){\n                        std::cerr &lt;&lt; \"build \" &lt;&lt; line &lt;&lt; \" error\" &lt;&lt; std::endl; //for deubg\n                        continue;\n                    }\n\n                    BuildInvertedIndex(*doc);\n                    count++;\n\n                    LOG(NORMAL, \"\u5f53\u524d\u7684\u5df2\u7ecf\u5efa\u7acb\u7684\u7d22\u5f15\u6587\u6863: \" + std::to_string(count));\n\n                }\n                return true;\n            }\n        private:\n            DocInfo *BuildForwardIndex(const std::string &amp;line)\n            {\n                //1. \u89e3\u6790line\uff0c\u5b57\u7b26\u4e32\u5207\u5206\n                //line -&gt; 3 string, title, content, url\n                std::vector&lt;std::string&gt; results;\n                const std::string sep = \"\\3\";   //\u884c\u5185\u5206\u9694\u7b26\n                ns_util::StringUtil::Split(line, &amp;results, sep);\n\n                if(results.size() != 3){\n                    return nullptr;\n                }\n                //2. \u5b57\u7b26\u4e32\u8fdb\u884c\u586b\u5145\u5230DocIinfo\n                DocInfo doc;\n                doc.title = results[0]; //title\n                doc.content = results[1]; //content\n                doc.url = results[2];   ///url\n                doc.doc_id = forward_index.size(); //\u5148\u8fdb\u884c\u4fdd\u5b58id\uff0c\u5728\u63d2\u5165\uff0c\u5bf9\u5e94\u7684id\u5c31\u662f\u5f53\u524ddoc\u5728vector\u4e2d\u7684\u4e0b\u6807!\n                //3. \u63d2\u5165\u5230\u6b63\u6392\u7d22\u5f15\u7684vector\n                forward_index.push_back(std::move(doc)); //doc,html\u6587\u4ef6\u5185\u5bb9\n                return &amp;forward_index.back();\n            }\n\n            bool BuildInvertedIndex(const DocInfo &amp;doc)\n            {\n                //DocInfo{title, content, url, doc_id}\n                //word -&gt; \u5012\u6392\u62c9\u94fe\n                struct word_cnt{\n                    int title_cnt;\n                    int content_cnt;\n\n                    word_cnt():title_cnt(0), content_cnt(0){}\n                };\n                std::unordered_map&lt;std::string, word_cnt&gt; word_map; //\u7528\u6765\u6682\u5b58\u8bcd\u9891\u7684\u6620\u5c04\u8868\n\n                //\u5bf9\u6807\u9898\u8fdb\u884c\u5206\u8bcd\n                std::vector&lt;std::string&gt; title_words;\n                ns_util::JiebaUtil::CutString(doc.title, &amp;title_words);\n\n                //\u5bf9\u6807\u9898\u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1\n                for(std::string s : title_words){\n                    boost::to_lower(s); //\u9700\u8981\u7edf\u4e00\u8f6c\u5316\u6210\u4e3a\u5c0f\u5199\n                    word_map[s].title_cnt++; //\u5982\u679c\u5b58\u5728\u5c31\u83b7\u53d6\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u65b0\u5efa\n                }\n\n                //\u5bf9\u6587\u6863\u5185\u5bb9\u8fdb\u884c\u5206\u8bcd\n                std::vector&lt;std::string&gt; content_words;\n                ns_util::JiebaUtil::CutString(doc.content, &amp;content_words);\n\n                //\u5bf9\u5185\u5bb9\u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1\n                for(std::string s : content_words){\n                    boost::to_lower(s);\n                    word_map[s].content_cnt++;\n                }\n\n#define X 10\n#define Y 1\n                //Hello,hello,HELLO\n                for(auto &amp;word_pair : word_map){\n                    InvertedElem item;\n                    item.doc_id = doc.doc_id;\n                    item.word = word_pair.first;\n                    item.weight = X*word_pair.second.title_cnt + Y*word_pair.second.content_cnt; //\u76f8\u5173\u6027\n                    InvertedList &amp;inverted_list = inverted_index[word_pair.first];\n                    inverted_list.push_back(std::move(item));\n                }\n\n                return true;\n            }\n    };\n    Index* Index::instance = nullptr;\n    std::mutex Index::mtx;\n}\n</code></pre> <p>\u5904\u7406\u8fc7\u7a0b\u6211\u4eec\u62ff\u5230\u7684\u6587\u6863\u5185\u5bb9\u662f struct DocInfo{     std::string title;     std::string content;     std::string url;     int doc_id; }; \u6211\u4eec\u9700\u8981\u8bc6\u522b\u4e3a title: content: url: doc_id:</p> <p>\u6839\u636e\u6587\u6863\u5185\u5bb9\uff0c\u5f62\u6210\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5012\u6392\u62c9\u94fe \u4e00\u4e2a\u6587\u6863\u4f1a\u6709\u591a\u4e2a\u201c\u8bcd\u201d,\u90fd\u4f1a\u5bf9\u5e94\u5230\u5f53\u524d\u7684doc_id</p> <p>\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e9b\u5185\u5bb9\u8fdb\u884c\u5206\u8bcd\uff0c\u4f7f\u7528jieba\u5206\u8bcd</p> <p>i like to eat apple \u5206\u4e3ai /like to /eat/ apple/eat apple\uff1b</p> <p>\u7136\u540e\u9700\u8981\u5bf9\u8bcd\u548c\u6587\u6863\u7684\u76f8\u5173\u6027\u8fdb\u884c\u5904\u7406\uff0c\uff08\u7b80\u5316\u5904\u7406\uff0c\u53ea\u662f\u7528\u8bcd\u9891\uff09 \u5bf9title_word\u548ccontent_word\u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1\uff0c\u8d4b\u4e88\u4e0d\u540c\u7684\u6743\u91cd</p> <p>struct word_cnt{     int title_cnt;     int content_cnt; };</p> <p><pre><code>            //\u5bf9\u5185\u5bb9\u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1\n                for(std::string s : content_words){\n                    boost::to_lower(s);\n                    word_map[s].content_cnt++;\n                }\n\n#define X 10\n#define Y 1\n                //Hello,hello,HELLO\n                for(auto &amp;word_pair : word_map){\n                    InvertedElem item;\n                    item.doc_id = doc.doc_id;\n                    item.word = word_pair.first;\n                    item.weight = X*word_pair.second.title_cnt + Y*word_pair.second.content_cnt; //\u76f8\u5173\u6027\n                    InvertedList &amp;inverted_list = inverted_index[word_pair.first];\n                    inverted_list.push_back(std::move(item));\n                }\n</code></pre> \u8fd9\u91cc\u7684\u6743\u503c\u8bbe\u7f6e\u7684\u662f\u6807\u9898\u4e3a10\uff0c\u5185\u5bb9\u4e3a1\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u9700\u6c42\u8fdb\u884c\u8c03\u6574\u3002</p>"},{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/#_6","title":"\u7f16\u5199\u641c\u7d22\u5f15\u64ce\u6a21\u5757","text":"<p>\u4e0b\u9762\u662f\u641c\u7d22\u5f15\u64ce\u7684\u6846\u67b6 \u6211\u4eec\u9996\u5148\u8981\u83b7\u5f97\u4e4b\u524d\u5efa\u7acb\u7684\u7d22\u5f15\u5bf9\u8c61 \u7136\u540e\u6839\u636e\u7528\u6237\u8f93\u5165\u7684query\u8fdb\u884c\u5206\u8bcd\uff0c\u6839\u636e\u5206\u8bcd\u7ed3\u679c\uff0c \u5728\u7d22\u5f15\u4e2d\u67e5\u627e\u5bf9\u5e94\u7684\u6587\u6863\uff0c \u7136\u540e\u6839\u636e\u6587\u6863\u7684\u76f8\u5173\u6027\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u6784\u5efa\u6210json\u4e32\u8fd4\u56de\u7ed9\u7528\u6237</p> <pre><code>namespace ns_searcher {\nclass Searcher {\nprivate:\n    ns_index::Index* index; // \u4f9b\u7cfb\u7edf\u8fdb\u884c\u67e5\u627e\u7684\u7d22\u5f15\npublic:\n    Searcher() {}\n    ~Searcher() {}\n\npublic:\n    void InitSearcher(const std::string&amp; input) {\n        // 1. \u83b7\u53d6\u6216\u8005\u521b\u5efaindex\u5bf9\u8c61\n        // 2. \u6839\u636eindex\u5bf9\u8c61\u5efa\u7acb\u7d22\u5f15\n    }\n    // query: \u641c\u7d22\u5173\u952e\u5b57\n    // json_string: \u8fd4\u56de\u7ed9\u7528\u6237\u6d4f\u89c8\u5668\u7684\u641c\u7d22\u7ed3\u679c\n    void Search(const std::string&amp; query, std::string* json_string) {\n        // 1.[\u5206\u8bcd]:\u5bf9\u6211\u4eec\u7684query\u8fdb\u884c\u6309\u7167searcher\u7684\u8981\u6c42\u8fdb\u884c\u5206\u8bcd\n        // 2.[\u89e6\u53d1]:\u5c31\u662f\u6839\u636e\u5206\u8bcd\u7684\u5404\u4e2a\"\u8bcd\"\uff0c\u8fdb\u884cindex\u67e5\u627e\n        // 3.[\u5408\u5e76\u6392\u5e8f]\uff1a\u6c47\u603b\u67e5\u627e\u7ed3\u679c\uff0c\u6309\u7167\u76f8\u5173\u6027(weight)\u964d\u5e8f\u6392\u5e8f\n        // 4.[\u6784\u5efa]:\u6839\u636e\u67e5\u627e\u51fa\u6765\u7684\u7ed3\u679c\uff0c\u6784\u5efajson\u4e32 -- jsoncpp\n    }\n  };\n} \n</code></pre> <p>\u56de\u987e\u5e38\u89c4\u7684\u6d4f\u89c8\u5668\u641c\u7d22\u8fd4\u56de\u7684\u4e09\u5927\u4ef6\u5e94\u8be5\u662f\uff1a\u6807\u9898\u3001\u6458\u8981\u3001url \u9700\u8981\u5bf9\u6587\u6863\u8fdb\u884c\u6458\u8981\u5904\u7406\uff0c \u9996\u5148\u83b7\u53d6\u6587\u6863\u7684\u7684\u5185\u5bb9\uff0c\u5b9a\u4e49start,end\uff0c\u5206\u522b\u6807\u5b9a\u6587\u6863\u7684\u524d\u540e\u754c\u9650 \u5728\u5185\u5bb9\u4e2d\u627e\u5230query\u4e2d\u7684\u8bcd\uff0c\u7136\u540e\u6839\u636e\u8bcd\u7684\u4f4d\u7f6e\uff0c\u8be5\u8bcd\u5411\u524d50\uff0c\u5411\u540e100\uff08\u5728\u4e0d\u8d85\u8fc7\u754c\u9650\u7684\u524d\u63d0\u4e0b\uff09\u5f62\u6210\u6458\u8981</p>"},{"location":"Boost%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%A1%B9%E7%9B%AE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/#http_server","title":"\u7f16\u5199http_server\u6a21\u5757","text":"<p>\u9700\u8981\u4f7f\u7528cpp-httplib\u5e93</p> <pre><code>#include \"httplib.h\"\n#include \"searcher.hpp\"\n\nconst std::string input = \"data/raw_html/raw.txt\";\nconst std::string root_path = \"./wwwroot\";\n\nint main()\n{\n    ns_searcher::Searcher search;\n    search.InitSearcher(input);\n\n    httplib::Server svr;\n\n    svr.set_base_dir(root_path.c_str());\n    svr.Get(\"/s\", [&amp;search](const httplib::Request &amp;req, httplib::Response &amp;rsp){\n            if(!req.has_param(\"word\")){\n                rsp.set_content(\"\u5fc5\u987b\u8981\u6709\u641c\u7d22\u5173\u952e\u5b57!\", \"text/plain; charset=utf-8\");\n                return;\n            }\n            std::string word = req.get_param_value(\"word\");\n\n            LOG(NORMAL, \"\u7528\u6237\u641c\u7d22\u7684: \" + word);\n            std::string json_string;\n            search.Search(word, &amp;json_string);\n            rsp.set_content(json_string, \"application/json; charset=utf-8\");\n\n            });\n\n\n    LOG(NORMAL, \"\u670d\u52a1\u5668\u542f\u52a8\u6210\u529f...\");\n\n    svr.listen(\"0.0.0.0\", 8081);\n    return 0;\n}\n</code></pre>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u7b2c\u4e09\u7ae0 \u5b57\u7b26\u4e32\u3001\u5411\u91cf\u548c\u6570\u7ec4","text":""},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#using","title":"using\u58f0\u660e","text":"<ul> <li>\u4f7f\u7528\u67d0\u4e2a\u547d\u540d\u7a7a\u95f4\uff1a\u4f8b\u5982 <code>using std::cin</code>\u8868\u793a\u4f7f\u7528\u547d\u540d\u7a7a\u95f4<code>std</code>\u4e2d\u7684\u540d\u5b57<code>cin</code>\u3002</li> <li>\u5934\u6587\u4ef6\u4e2d\u4e0d\u5e94\u8be5\u5305\u542b<code>using</code>\u58f0\u660e\u3002\u8fd9\u6837\u4f7f\u7528\u4e86\u8be5\u5934\u6587\u4ef6\u7684\u6e90\u7801\u4e5f\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u58f0\u660e\uff0c\u4f1a\u5e26\u6765\u98ce\u9669\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#string","title":"string","text":"<ul> <li>\u6807\u51c6\u5e93\u7c7b\u578b<code>string</code>\u8868\u793a\u53ef\u53d8\u957f\u7684\u5b57\u7b26\u5e8f\u5217\u3002</li> <li><code>#include &lt;string&gt;</code>\uff0c\u7136\u540e <code>using std::string;</code></li> <li>string\u5bf9\u8c61\uff1a\u6ce8\u610f\uff0c\u4e0d\u540c\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#string_1","title":"\u5b9a\u4e49\u548c\u521d\u59cb\u5316string\u5bf9\u8c61","text":"<p>\u521d\u59cb\u5316<code>string</code>\u5bf9\u8c61\u7684\u65b9\u5f0f\uff1a</p> \u65b9\u5f0f \u89e3\u91ca <code>string s1</code> \u9ed8\u8ba4\u521d\u59cb\u5316\uff0c<code>s1</code>\u662f\u4e2a\u7a7a\u5b57\u7b26\u4e32 <code>string s2(s1)</code> <code>s2</code>\u662f<code>s1</code>\u7684\u526f\u672c <code>string s2 = s1</code> \u7b49\u4ef7\u4e8e<code>s2(s1)</code>\uff0c<code>s2</code>\u662f<code>s1</code>\u7684\u526f\u672c <code>string s3(\"value\")</code> <code>s3</code>\u662f\u5b57\u9762\u503c\u201cvalue\u201d\u7684\u526f\u672c\uff0c\u9664\u4e86\u5b57\u9762\u503c\u6700\u540e\u7684\u90a3\u4e2a\u7a7a\u5b57\u7b26\u5916 <code>string s3 = \"value\"</code> \u7b49\u4ef7\u4e8e<code>s3(\"value\")</code>\uff0c<code>s3</code>\u662f\u5b57\u9762\u503c\"value\"\u7684\u526f\u672c <code>string s4(n, 'c')</code> \u628a<code>s4</code>\u521d\u59cb\u5316\u4e3a\u7531\u8fde\u7eed<code>n</code>\u4e2a\u5b57\u7b26<code>c</code>\u7ec4\u6210\u7684\u4e32 <ul> <li>\u62f7\u8d1d\u521d\u59cb\u5316\uff08copy initialization\uff09\uff1a\u4f7f\u7528\u7b49\u53f7<code>=</code>\u5c06\u4e00\u4e2a\u5df2\u6709\u7684\u5bf9\u8c61\u62f7\u8d1d\u5230\u6b63\u5728\u521b\u5efa\u7684\u5bf9\u8c61\u3002</li> <li>\u76f4\u63a5\u521d\u59cb\u5316\uff08direct initialization\uff09\uff1a\u901a\u8fc7\u62ec\u53f7\u7ed9\u5bf9\u8c61\u8d4b\u503c\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#string_2","title":"string\u5bf9\u8c61\u4e0a\u7684\u64cd\u4f5c","text":"<p><code>string</code>\u7684\u64cd\u4f5c\uff1a</p> \u64cd\u4f5c \u89e3\u91ca <code>os &lt;&lt; s</code> \u5c06<code>s</code>\u5199\u5230\u8f93\u51fa\u6d41<code>os</code>\u5f53\u4e2d\uff0c\u8fd4\u56de<code>os</code> <code>is &gt;&gt; s</code> \u4ece<code>is</code>\u4e2d\u8bfb\u53d6\u5b57\u7b26\u4e32\u8d4b\u7ed9<code>s</code>\uff0c\u5b57\u7b26\u4e32\u4ee5\u7a7a\u767d\u5206\u5272\uff0c\u8fd4\u56de<code>is</code> <code>getline(is, s)</code> \u4ece<code>is</code>\u4e2d\u8bfb\u53d6\u4e00\u884c\u8d4b\u7ed9<code>s</code>\uff0c\u8fd4\u56de<code>is</code> <code>s.empty()</code> <code>s</code>\u4e3a\u7a7a\u8fd4\u56de<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de<code>false</code> <code>s.size()</code> \u8fd4\u56de<code>s</code>\u4e2d\u5b57\u7b26\u7684\u4e2a\u6570 <code>s[n]</code> \u8fd4\u56de<code>s</code>\u4e2d\u7b2c<code>n</code>\u4e2a\u5b57\u7b26\u7684\u5f15\u7528\uff0c\u4f4d\u7f6e<code>n</code>\u4ece0\u8ba1\u8d77 <code>s1+s2</code> \u8fd4\u56de<code>s1</code>\u548c<code>s2</code>\u8fde\u63a5\u540e\u7684\u7ed3\u679c <code>s1=s2</code> \u7528<code>s2</code>\u7684\u526f\u672c\u4ee3\u66ff<code>s1</code>\u4e2d\u539f\u6765\u7684\u5b57\u7b26 <code>s1==s2</code> \u5982\u679c<code>s1</code>\u548c<code>s2</code>\u4e2d\u6240\u542b\u7684\u5b57\u7b26\u5b8c\u5168\u4e00\u6837\uff0c\u5219\u5b83\u4eec\u76f8\u7b49\uff1b<code>string</code>\u5bf9\u8c61\u7684\u76f8\u7b49\u6027\u5224\u65ad\u5bf9\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u654f\u611f <code>s1!=s2</code> \u540c\u4e0a <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> \u5229\u7528\u5b57\u7b26\u5728\u5b57\u5178\u4e2d\u7684\u987a\u5e8f\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e14\u5bf9\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u654f\u611f\uff08\u5bf9\u7b2c\u4e00\u4e2a\u4e0d\u76f8\u540c\u7684\u4f4d\u7f6e\u8fdb\u884c\u6bd4\u8f83\uff09 <ul> <li>string io\uff1a<ul> <li>\u6267\u884c\u8bfb\u64cd\u4f5c<code>&gt;&gt;</code>\uff1a\u5ffd\u7565\u6389\u5f00\u5934\u7684\u7a7a\u767d\uff08\u5305\u62ec\u7a7a\u683c\u3001\u6362\u884c\u7b26\u548c\u5236\u8868\u7b26\uff09\uff0c\u76f4\u5230\u9047\u5230\u4e0b\u4e00\u5904\u7a7a\u767d\u4e3a\u6b62\u3002</li> <li><code>getline</code>\uff1a\u8bfb\u53d6\u4e00\u6574\u884c\uff0c\u5305\u62ec\u7a7a\u767d\u7b26\u3002</li> </ul> </li> <li><code>s.size()</code>\u8fd4\u56de\u7684\u65f6<code>string::size_type</code>\u7c7b\u578b\uff0c\u8bb0\u4f4f\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7c7b\u578b\u7684\u503c\uff0c\u4e0d\u8981\u548c<code>int</code>\u6df7\u7528</li> <li><code>s1+s2</code>\u4f7f\u7528\u65f6\uff0c\u4fdd\u8bc1\u81f3\u5c11\u4e00\u4fa7\u662fstring\u7c7b\u578b\u3002<code>string s1 = \"hello\" + \"world\" // \u9519\u8bef\uff0c\u4e24\u4fa7\u5747\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c</code></li> <li>\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u548cstring\u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#string_3","title":"\u5904\u7406string\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26","text":"<ul> <li>ctype.h vs. cctype\uff1aC++\u4fee\u6539\u4e86c\u7684\u6807\u51c6\u5e93\uff0c\u540d\u79f0\u4e3a\u53bb\u6389<code>.h</code>\uff0c\u524d\u9762\u52a0<code>c</code>\u3002 <p>\u5982c++\u7248\u672c\u4e3a<code>cctype</code>\uff0cc\u7248\u672c\u4e3a<code>ctype.h</code></p> </li> <li>\u5c3d\u91cf\u4f7f\u7528c++\u7248\u672c\u7684\u5934\u6587\u4ef6\uff0c\u5373<code>cctype</code></li> </ul> <p><code>cctype</code>\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4e00\u7ec4\u6807\u51c6\u51fd\u6570\uff1a</p> \u51fd\u6570 \u89e3\u91ca <code>isalnum(c)</code> \u5f53<code>c</code>\u662f\u5b57\u6bcd\u6216\u6570\u5b57\u65f6\u4e3a\u771f <code>isalpha(c)</code> \u5f53<code>c</code>\u662f\u5b57\u6bcd\u65f6\u4e3a\u771f <code>iscntrl(c)</code> \u5f53<code>c</code>\u662f\u63a7\u5236\u5b57\u7b26\u65f6\u4e3a\u771f <code>isdigit(c)</code> \u5f53<code>c</code>\u662f\u6570\u5b57\u65f6\u4e3a\u771f <code>isgraph(c)</code> \u5f53<code>c</code>\u4e0d\u662f\u7a7a\u683c\u4f46\u53ef\u4ee5\u6253\u5370\u65f6\u4e3a\u771f <code>islower(c)</code> \u5f53<code>c</code>\u662f\u5c0f\u5199\u5b57\u6bcd\u65f6\u4e3a\u771f <code>isprint(c)</code> \u5f53<code>c</code>\u662f\u53ef\u6253\u5370\u5b57\u7b26\u65f6\u4e3a\u771f <code>ispunct(c)</code> \u5f53<code>c</code>\u662f\u6807\u70b9\u7b26\u53f7\u65f6\u4e3a\u771f <code>isspace(c)</code> \u5f53<code>c</code>\u662f\u7a7a\u767d\u65f6\u4e3a\u771f\uff08\u7a7a\u683c\u3001\u6a2a\u5411\u5236\u8868\u7b26\u3001\u7eb5\u5411\u5236\u8868\u7b26\u3001\u56de\u8f66\u7b26\u3001\u6362\u884c\u7b26\u3001\u8fdb\u7eb8\u7b26\uff09 <code>isupper(c)</code> \u5f53<code>c</code>\u662f\u5927\u5199\u5b57\u6bcd\u65f6\u4e3a\u771f <code>isxdigit(c)</code> \u5f53<code>c</code>\u662f\u5341\u516d\u8fdb\u5236\u6570\u5b57\u65f6\u4e3a\u771f <code>tolower(c)</code> \u5f53<code>c</code>\u662f\u5927\u5199\u5b57\u6bcd\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u5c0f\u5199\u5b57\u6bcd\uff1b\u5426\u5219\u539f\u6837\u8f93\u51fa<code>c</code> <code>toupper(c)</code> \u5f53<code>c</code>\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u5927\u5199\u5b57\u6bcd\uff1b\u5426\u5219\u539f\u6837\u8f93\u51fa<code>c</code> <ul> <li>\u904d\u5386\u5b57\u7b26\u4e32\uff1a\u4f7f\u7528\u8303\u56f4for\uff08range for\uff09\u8bed\u53e5\uff1a <code>for (auto c: str)</code>\uff0c\u6216\u8005 <code>for (auto &amp;c: str)</code>\u4f7f\u7528\u5f15\u7528\u76f4\u63a5\u6539\u53d8\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u3002 \uff08C++11\uff09</li> <li><code>str[x]</code>,[]\u8f93\u5165\u53c2\u6570\u4e3a<code>string::size_type</code>\u7c7b\u578b\uff0c\u7ed9\u51fa<code>int</code>\u6574\u578b\u4e5f\u4f1a\u81ea\u52a8\u8f6c\u5316\u4e3a\u8be5\u7c7b\u578b</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#vector","title":"vector","text":"<ul> <li>vector\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u4e5f\u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff1b</li> <li><code>#include &lt;vector&gt;</code> \u7136\u540e <code>using std::vector;</code></li> <li>\u5bb9\u5668\uff1a\u5305\u542b\u5176\u4ed6\u5bf9\u8c61\u3002</li> <li>\u7c7b\u6a21\u677f\uff1a\u672c\u8eab\u4e0d\u662f\u7c7b\uff0c\u4f46\u53ef\u4ee5\u5b9e\u4f8b\u5316instantiation\u51fa\u4e00\u4e2a\u7c7b\u3002 <code>vector</code>\u662f\u4e00\u4e2a\u6a21\u677f\uff0c <code>vector&lt;int&gt;</code>\u662f\u4e00\u4e2a\u7c7b\u578b\u3002</li> <li>\u901a\u8fc7\u5c06\u7c7b\u578b\u653e\u5728\u7c7b\u6a21\u677f\u540d\u79f0\u540e\u9762\u7684\u5c16\u62ec\u53f7\u4e2d\u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u5982<code>vector&lt;int&gt; ivec</code>\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#vector_1","title":"\u5b9a\u4e49\u548c\u521d\u59cb\u5316vector\u5bf9\u8c61","text":"<p>\u521d\u59cb\u5316<code>vector</code>\u5bf9\u8c61\u7684\u65b9\u6cd5</p> \u65b9\u6cd5 \u89e3\u91ca <code>vector&lt;T&gt; v1</code> <code>v1</code>\u662f\u4e00\u4e2a\u7a7a<code>vector</code>\uff0c\u5b83\u6f5c\u5728\u7684\u5143\u7d20\u662f<code>T</code>\u7c7b\u578b\u7684\uff0c\u6267\u884c\u9ed8\u8ba4\u521d\u59cb\u5316 <code>vector&lt;T&gt; v2(v1)</code> <code>v2</code>\u4e2d\u5305\u542b\u6709<code>v1</code>\u6240\u6709\u5143\u7d20\u7684\u526f\u672c <code>vector&lt;T&gt; v2 = v1</code> \u7b49\u4ef7\u4e8e<code>v2(v1)</code>\uff0c<code>v2</code>\u4e2d\u5305\u542b<code>v1</code>\u6240\u6709\u5143\u7d20\u7684\u526f\u672c <code>vector&lt;T&gt; v3(n, val)</code> <code>v3</code>\u5305\u542b\u4e86n\u4e2a\u91cd\u590d\u7684\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u90fd\u662f<code>val</code> <code>vector&lt;T&gt; v4(n)</code> <code>v4</code>\u5305\u542b\u4e86n\u4e2a\u91cd\u590d\u5730\u6267\u884c\u4e86\u503c\u521d\u59cb\u5316\u7684\u5bf9\u8c61 <code>vector&lt;T&gt; v5{a, b, c...}</code> <code>v5</code>\u5305\u542b\u4e86\u521d\u59cb\u503c\u4e2a\u6570\u7684\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u88ab\u8d4b\u4e88\u76f8\u5e94\u7684\u521d\u59cb\u503c <code>vector&lt;T&gt; v5={a, b, c...}</code> \u7b49\u4ef7\u4e8e<code>v5{a, b, c...}</code> <ul> <li>\u5217\u8868\u521d\u59cb\u5316\uff1a <code>vector&lt;string&gt; v{\"a\", \"an\", \"the\"};</code> \uff08C++11\uff09</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#vector_2","title":"\u5411vector\u5bf9\u8c61\u4e2d\u6dfb\u52a0\u5143\u7d20","text":"<ul> <li><code>v.push_back(e)</code> \u5728\u5c3e\u90e8\u589e\u52a0\u5143\u7d20\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#vector_3","title":"\u5176\u4ed6vector\u64cd\u4f5c","text":"<p><code>vector</code>\u652f\u6301\u7684\u64cd\u4f5c\uff1a</p> \u64cd\u4f5c \u89e3\u91ca <code>v.emtpy()</code> \u5982\u679c<code>v</code>\u4e0d\u542b\u6709\u4efb\u4f55\u5143\u7d20\uff0c\u8fd4\u56de\u771f\uff1b\u5426\u5219\u8fd4\u56de\u5047 <code>v.size()</code> \u8fd4\u56de<code>v</code>\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 <code>v.push_back(t)</code> \u5411<code>v</code>\u7684\u5c3e\u7aef\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a<code>t</code>\u7684\u5143\u7d20 <code>v[n]</code> \u8fd4\u56de<code>v</code>\u4e2d\u7b2c<code>n</code>\u4e2a\u4f4d\u7f6e\u4e0a\u5143\u7d20\u7684\u5f15\u7528 <code>v1 = v2</code> \u7528<code>v2</code>\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u66ff\u6362<code>v1</code>\u4e2d\u7684\u5143\u7d20 <code>v1 = {a,b,c...}</code> \u7528\u5217\u8868\u4e2d\u5143\u7d20\u7684\u62f7\u8d1d\u66ff\u6362<code>v1</code>\u4e2d\u7684\u5143\u7d20 <code>v1 == v2</code> <code>v1</code>\u548c<code>v2</code>\u76f8\u7b49\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u7684\u5143\u7d20\u6570\u91cf\u76f8\u540c\u4e14\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\u503c\u90fd\u76f8\u540c <code>v1 != v2</code> \u540c\u4e0a <code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>, <code>&gt;=</code> \u4ee5\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u6bd4\u8f83 <ul> <li>\u8303\u56f4<code>for</code>\u8bed\u53e5\u5185\u4e0d\u5e94\u8be5\u6539\u53d8\u5176\u904d\u5386\u5e8f\u5217\u7684\u5927\u5c0f\u3002</li> <li><code>vector</code>\u5bf9\u8c61\uff08\u4ee5\u53ca<code>string</code>\u5bf9\u8c61\uff09\u7684\u4e0b\u6807\u8fd0\u7b97\u7b26\uff0c\u53ea\u80fd\u5bf9\u786e\u77e5\u5df2\u5b58\u5728\u7684\u5143\u7d20\u6267\u884c\u4e0b\u6807\u64cd\u4f5c\uff0c\u4e0d\u80fd\u7528\u4e8e\u6dfb\u52a0\u5143\u7d20\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#iterator","title":"\u8fed\u4ee3\u5668iterator","text":"<ul> <li>\u6240\u6709\u6807\u51c6\u5e93\u5bb9\u5668\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u5668\u3002</li> <li>\u7c7b\u4f3c\u4e8e\u6307\u9488\u7c7b\u578b\uff0c\u8fed\u4ee3\u5668\u4e5f\u63d0\u4f9b\u4e86\u5bf9\u5bf9\u8c61\u7684\u95f4\u63a5\u8bbf\u95ee\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u4f7f\u7528\u8fed\u4ee3\u5668","text":"<ul> <li><code>vector&lt;int&gt;::iterator iter</code>\u3002</li> <li><code>auto b = v.begin();</code>\u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</li> <li><code>auto e = v.end();</code>\u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\uff08\u54e8\u5175\uff0c\u5c3e\u540e,one past the end\uff09\u7684\u8fed\u4ee3\u5668\uff08off the end\uff09\u3002</li> <li>\u5982\u679c\u5bb9\u5668\u4e3a\u7a7a\uff0c <code>begin()</code>\u548c <code>end()</code>\u8fd4\u56de\u7684\u662f\u540c\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u90fd\u662f\u5c3e\u540e\u8fed\u4ee3\u5668\u3002</li> <li>\u4f7f\u7528\u89e3\u5f15\u7528\u7b26<code>*</code>\u8bbf\u95ee\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u3002</li> <li>\u517b\u6210\u4f7f\u7528\u8fed\u4ee3\u5668\u548c<code>!=</code>\u7684\u4e60\u60ef\uff08\u6cdb\u578b\u7f16\u7a0b\uff09\u3002</li> <li>\u5bb9\u5668\uff1a\u53ef\u4ee5\u5305\u542b\u5176\u4ed6\u5bf9\u8c61\uff1b\u4f46\u6240\u6709\u7684\u5bf9\u8c61\u5fc5\u987b\u7c7b\u578b\u76f8\u540c\u3002</li> <li>\u8fed\u4ee3\u5668\uff08iterator\uff09\uff1a\u6bcf\u79cd\u6807\u51c6\u5bb9\u5668\u90fd\u6709\u81ea\u5df1\u7684\u8fed\u4ee3\u5668\u3002<code>C++</code>\u503e\u5411\u4e8e\u7528\u8fed\u4ee3\u5668\u800c\u4e0d\u662f\u4e0b\u6807\u904d\u5386\u5143\u7d20\u3002</li> <li>const_iterator\uff1a\u53ea\u80fd\u8bfb\u53d6\u5bb9\u5668\u5185\u5143\u7d20\u4e0d\u80fd\u6539\u53d8\u3002</li> <li>\u7bad\u5934\u8fd0\u7b97\u7b26\uff1a \u89e3\u5f15\u7528 + \u6210\u5458\u8bbf\u95ee\uff0c<code>it-&gt;mem</code>\u7b49\u4ef7\u4e8e <code>(*it).mem</code></li> <li>\u8c28\u8bb0\uff1a\u4f46\u51e1\u662f\u4f7f\u7528\u4e86\u8fed\u4ee3\u5668\u7684\u5faa\u73af\u4f53\uff0c\u90fd\u4e0d\u8981\u5411\u8fed\u4ee3\u5668\u6240\u5c5e\u7684\u5bb9\u5668\u6dfb\u52a0\u5143\u7d20\u3002</li> </ul> <p>\u6807\u51c6\u5bb9\u5668\u8fed\u4ee3\u5668\u7684\u8fd0\u7b97\u7b26:</p> \u8fd0\u7b97\u7b26 \u89e3\u91ca <code>*iter</code> \u8fd4\u56de\u8fed\u4ee3\u5668<code>iter</code>\u6240\u6307\u5411\u7684\u5143\u7d20\u7684\u5f15\u7528 <code>iter-&gt;mem</code> \u7b49\u4ef7\u4e8e<code>(*iter).mem</code> <code>++iter</code> \u4ee4<code>iter</code>\u6307\u793a\u5bb9\u5668\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 <code>--iter</code> \u4ee4<code>iter</code>\u6307\u793a\u5bb9\u5668\u4e2d\u7684\u4e0a\u4e00\u4e2a\u5143\u7d20 <code>iter1 == iter2</code> \u5224\u65ad\u4e24\u4e2a\u8fed\u4ee3\u5668\u662f\u5426\u76f8\u7b49"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_3","title":"\u8fed\u4ee3\u5668\u8fd0\u7b97","text":"<p><code>vector</code>\u548c<code>string</code>\u8fed\u4ee3\u5668\u652f\u6301\u7684\u8fd0\u7b97\uff1a</p> \u8fd0\u7b97\u7b26 \u89e3\u91ca <code>iter + n</code> \u8fed\u4ee3\u5668\u52a0\u4e0a\u4e00\u4e2a\u6574\u6570\u503c\u4ecd\u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u6307\u793a\u7684\u65b0\u4f4d\u7f6e\u548c\u539f\u6765\u76f8\u6bd4\u5411\u524d\u79fb\u52a8\u4e86\u82e5\u5e72\u4e2a\u5143\u7d20\u3002\u7ed3\u679c\u8fed\u4ee3\u5668\u6216\u8005\u6307\u793a\u5bb9\u5668\u5185\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u6216\u8005\u6307\u793a\u5bb9\u5668\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u3002 <code>iter - n</code> \u8fed\u4ee3\u5668\u51cf\u53bb\u4e00\u4e2a\u6574\u6570\u4ecd\u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u6307\u793a\u7684\u65b0\u4f4d\u7f6e\u6bd4\u539f\u6765\u5411\u540e\u79fb\u52a8\u4e86\u82e5\u5e72\u4e2a\u5143\u7d20\u3002\u7ed3\u679c\u8fed\u4ee3\u5668\u6216\u8005\u6307\u5411\u5bb9\u5668\u5185\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u6216\u8005\u6307\u793a\u5bb9\u5668\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u3002 <code>iter1 += n</code> \u8fed\u4ee3\u5668\u52a0\u6cd5\u7684\u590d\u5408\u8d4b\u503c\u8bed\u53e5\uff0c\u5c06<code>iter1</code>\u52a0n\u7684\u7ed3\u679c\u8d4b\u7ed9<code>iter1</code> <code>iter1 -= n</code> \u8fed\u4ee3\u5668\u51cf\u6cd5\u7684\u590d\u5408\u8d4b\u503c\u8bed\u53e5\uff0c\u5c06<code>iter2</code>\u51cfn\u7684\u7ed3\u679c\u8d4b\u7ed9<code>iter1</code> <code>iter1 - iter2</code> \u4e24\u4e2a\u8fed\u4ee3\u5668\u76f8\u51cf\u7684\u7ed3\u679c\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u8fd0\u7b97\u7b26\u53f3\u4fa7\u7684\u8fed\u4ee3\u5668\u5411\u524d\u79fb\u52a8\u5dee\u503c\u4e2a\u5143\u7d20\u540e\u5f97\u5230\u5de6\u4fa7\u7684\u8fed\u4ee3\u5668\u3002\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u5fc5\u987b\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u6216\u8005\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u3002 <code>&gt;</code>\u3001<code>&gt;=</code>\u3001<code>&lt;</code>\u3001<code>&lt;=</code> \u8fed\u4ee3\u5668\u7684\u5173\u7cfb\u8fd0\u7b97\u7b26\uff0c\u5982\u679c\u67d0\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5bb9\u5668\u4f4d\u7f6e\u5728\u53e6\u4e00\u4e2a\u8fed\u4ee3\u5668\u6240\u6307\u4f4d\u7f6e\u4e4b\u524d\uff0c\u5219\u8bf4\u660e\u524d\u8005\u5c0f\u4e8e\u540e\u8005\u3002\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u5fc5\u987b\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u6216\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u3002 <ul> <li>difference_type\uff1a\u4fdd\u8bc1\u8db3\u591f\u5927\u4ee5\u5b58\u50a8\u4efb\u4f55\u4e24\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u95f4\u7684\u8ddd\u79bb\uff0c\u53ef\u6b63\u53ef\u8d1f\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_4","title":"\u6570\u7ec4","text":"<ul> <li>\u76f8\u5f53\u4e8evector\u7684\u4f4e\u7ea7\u7248\uff0c\u957f\u5ea6\u56fa\u5b9a\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_5","title":"\u5b9a\u4e49\u548c\u521d\u59cb\u5316\u5185\u7f6e\u6570\u7ec4","text":"<ul> <li>\u521d\u59cb\u5316\uff1a<code>char input_buffer[buffer_size];</code>\uff0c\u957f\u5ea6\u5fc5\u987b\u662fconst\u8868\u8fbe\u5f0f\uff0c\u6216\u8005\u4e0d\u5199\uff0c\u8ba9\u7f16\u8bd1\u5668\u81ea\u5df1\u63a8\u65ad\u3002</li> <li>\u6570\u7ec4\u4e0d\u5141\u8bb8\u76f4\u63a5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u6570\u7ec4\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_6","title":"\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20","text":"<ul> <li>\u6570\u7ec4\u4e0b\u6807\u7684\u7c7b\u578b\uff1a<code>size_t</code> \u3002</li> <li>\u5b57\u7b26\u6570\u7ec4\u7684\u7279\u6b8a\u6027\uff1a\u7ed3\u5c3e\u5904\u6709\u4e00\u4e2a\u7a7a\u5b57\u7b26\uff0c\u5982 <code>char a[] = \"hello\";</code> \u3002</li> <li>\u7528\u6570\u7ec4\u521d\u59cb\u5316 <code>vector</code>\uff1a <code>int a[] = {1,2,3,4,5}; vector&lt;int&gt; v(begin(a), end(a));</code> \u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_7","title":"\u6570\u7ec4\u548c\u6307\u9488","text":"<ul> <li>\u4f7f\u7528\u6570\u7ec4\u65f6\uff0c\u7f16\u8bd1\u5668\u4e00\u822c\u4f1a\u628a\u5b83\u8f6c\u6362\u6210\u6307\u9488\u3002</li> <li>\u6807\u51c6\u5e93\u7c7b\u578b\u9650\u5b9a\u4f7f\u7528\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u800c\u5185\u7f6e\u7684\u4e0b\u6807\u53ef\u4ee5\u5904\u7406\u8d1f\u503c\u3002 </li> <li>\u6307\u9488\u8bbf\u95ee\u6570\u7ec4\uff1a\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u6570\u7ec4\u540d\u65f6\uff0c\u540d\u5b57\u4f1a\u81ea\u52a8\u8f6c\u6362\u6210\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#c","title":"C\u98ce\u683c\u5b57\u7b26\u4e32","text":"<ul> <li>\u4eceC\u7ee7\u627f\u6765\u7684\u5b57\u7b26\u4e32\u3002</li> <li>\u7528\u7a7a\u5b57\u7b26\u7ed3\u675f\uff08<code>\\0</code>\uff09\u3002</li> <li>\u5bf9\u5927\u591a\u6570\u5e94\u7528\u6765\u8bf4\uff0c\u4f7f\u7528\u6807\u51c6\u5e93 <code>string</code>\u6bd4\u4f7f\u7528C\u98ce\u683c\u5b57\u7b26\u4e32\u66f4\u5b89\u5168\u3001\u66f4\u9ad8\u6548\u3002</li> <li>\u83b7\u53d6 <code>string</code> \u4e2d\u7684 <code>cstring</code> \uff1a <code>const char *str = s.c_str();</code> \u3002</li> </ul> <p>C\u6807\u51c6\u5e93String\u51fd\u6570\uff0c\u5b9a\u4e49\u5728<code>&lt;cstring&gt;</code> \u4e2d\uff1a</p> \u51fd\u6570 \u4ecb\u7ecd <code>strlen(p)</code> \u8fd4\u56de<code>p</code>\u7684\u957f\u5ea6\uff0c\u7a7a\u5b57\u7b26\u4e0d\u8ba1\u7b97\u5728\u5185 <code>strcmp(p1, p2)</code> \u6bd4\u8f83<code>p1</code>\u548c<code>p2</code>\u7684\u76f8\u7b49\u6027\u3002\u5982\u679c<code>p1==p2</code>\uff0c\u8fd4\u56de0\uff1b\u5982\u679c<code>p1&gt;p2</code>\uff0c\u8fd4\u56de\u4e00\u4e2a\u6b63\u503c\uff1b\u5982\u679c<code>p1&lt;p2</code>\uff0c\u8fd4\u56de\u4e00\u4e2a\u8d1f\u503c\u3002 <code>strcat(p1, p2)</code> \u5c06<code>p2</code>\u9644\u52a0\u5230<code>p1</code>\u4e4b\u540e\uff0c\u8fd4\u56de<code>p1</code> <code>strcpy(p1, p2)</code> \u5c06<code>p2</code>\u62f7\u8d1d\u7ed9<code>p1</code>\uff0c\u8fd4\u56de<code>p1</code> <p>\u5c3d\u91cf\u4f7f\u7528vector\u548c\u8fed\u4ee3\u5668\uff0c\u5c11\u7528\u6570\u7ec4</p>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_8","title":"\u591a\u7ef4\u6570\u7ec4","text":"<ul> <li>\u591a\u7ef4\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff1a <code>int ia[3][4] = {{0,1,2,3}, ...}</code>\u3002</li> <li>\u4f7f\u7528\u8303\u56f4for\u8bed\u53e5\u65f6\uff0c\u9664\u4e86\u6700\u5185\u5c42\u7684\u5faa\u73af\u5916\uff0c\u5176\u4ed6\u6240\u6709\u5faa\u73af\u7684\u63a7\u5236\u53d8\u91cf\u90fd\u5e94\u8be5\u662f\u5f15\u7528\u7c7b\u578b\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#vs","title":"\u6307\u9488vs\u5f15\u7528","text":"<ul> <li>\u5f15\u7528\u603b\u662f\u6307\u5411\u67d0\u4e2a\u5bf9\u8c61\uff0c\u5b9a\u4e49\u5f15\u7528\u65f6\u6ca1\u6709\u521d\u59cb\u5316\u662f\u9519\u7684\u3002</li> <li>\u7ed9\u5f15\u7528\u8d4b\u503c\uff0c\u4fee\u6539\u7684\u662f\u8be5\u5f15\u7528\u6240\u5173\u8054\u7684\u5bf9\u8c61\u7684\u503c\uff0c\u800c\u4e0d\u662f\u8ba9\u5f15\u7528\u548c\u53e6\u4e00\u4e2a\u5bf9\u8c61\u76f8\u5173\u8054\u3002</li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_9","title":"\u6307\u5411\u6307\u9488\u7684\u6307\u9488","text":"<ul> <li>\u5b9a\u4e49\uff1a <code>int **ppi = &amp;pi;</code></li> <li>\u89e3\u5f15\u7528\uff1a<code>**ppi</code></li> </ul>"},{"location":"C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_10","title":"\u52a8\u6001\u6570\u7ec4","text":"<ul> <li>\u4f7f\u7528 <code>new</code>\u548c <code>delete</code>\u8868\u8fbe\u548cc\u4e2d<code>malloc</code>\u548c<code>free</code>\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u5373\u5728\u5806\uff08\u81ea\u7531\u5b58\u50a8\u533a\uff09\u4e2d\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u3002</li> <li>\u5b9a\u4e49\uff1a <code>int *pia = new int[10];</code> 10\u53ef\u4ee5\u88ab\u4e00\u4e2a\u53d8\u91cf\u66ff\u4ee3\u3002</li> <li>\u91ca\u653e\uff1a <code>delete [] pia;</code>\uff0c\u6ce8\u610f\u4e0d\u8981\u5fd8\u8bb0<code>[]</code>\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/","title":"\u7b2c\u4e03\u7ae0 \u7c7b \uff08Class\uff09","text":""},{"location":"C%2B%2B/%E7%B1%BB/#_1","title":"\u5b9a\u4e49\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<ul> <li>\u7c7b\u80cc\u540e\u7684\u57fa\u672c\u601d\u60f3\uff1a\u6570\u636e\u62bd\u8c61\uff08data abstraction\uff09\u548c\u5c01\u88c5\uff08encapsulation\uff09\u3002</li> <li>\u6570\u636e\u62bd\u8c61\u662f\u4e00\u79cd\u4f9d\u8d56\u4e8e\u63a5\u53e3\uff08interface\uff09\u548c\u5b9e\u73b0\uff08implementation\uff09\u5206\u79bb\u7684\u7f16\u7a0b\u6280\u672f\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#member","title":"\u7c7b\u6210\u5458 \uff08Member\uff09","text":"<ul> <li>\u5fc5\u987b\u5728\u7c7b\u7684\u5185\u90e8\u58f0\u660e\uff0c\u4e0d\u80fd\u5728\u5176\u4ed6\u5730\u65b9\u589e\u52a0\u6210\u5458\u3002</li> <li>\u6210\u5458\u53ef\u4ee5\u662f\u6570\u636e\uff0c\u51fd\u6570\uff0c\u7c7b\u578b\u522b\u540d\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_2","title":"\u7c7b\u7684\u6210\u5458\u51fd\u6570","text":"<ul> <li>\u6210\u5458\u51fd\u6570\u7684\u58f0\u660e\u5fc5\u987b\u5728\u7c7b\u7684\u5185\u90e8\u3002</li> <li>\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\u65e2\u53ef\u4ee5\u5728\u7c7b\u7684\u5185\u90e8\u4e5f\u53ef\u4ee5\u5728\u5916\u90e8\u3002</li> <li>\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26 <code>.</code> \u8c03\u7528\u6210\u5458\u51fd\u6570\u3002</li> <li>\u5fc5\u987b\u5bf9\u4efb\u4f55<code>const</code>\u6216\u5f15\u7528\u7c7b\u578b\u6210\u5458\u4ee5\u53ca\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u7c7b\u7c7b\u578b\u7684\u4efb\u4f55\u6210\u5458\u4f7f\u7528\u521d\u59cb\u5316\u5f0f\u3002</li> <li><code>ConstRef::ConstRef(int ii): i(ii), ci(i), ri(ii) { }</code></li> <li>\u9ed8\u8ba4\u5b9e\u53c2\uff1a <code>Sales_item(const std::string &amp;book): isbn(book), units_sold(0), revenue(0.0) { }</code></li> <li><code>*this</code>\uff1a</li> <li>\u6bcf\u4e2a\u6210\u5458\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u989d\u5916\u7684\uff0c\u9690\u542b\u7684\u5f62\u53c2<code>this</code>\u3002</li> <li><code>this</code>\u603b\u662f\u6307\u5411\u5f53\u524d\u5bf9\u8c61\uff0c\u56e0\u6b64<code>this</code>\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\u3002</li> <li>\u5f62\u53c2\u8868\u540e\u9762\u7684<code>const</code>\uff0c\u6539\u53d8\u4e86\u9690\u542b\u7684<code>this</code>\u5f62\u53c2\u7684\u7c7b\u578b\uff0c\u5982 <code>bool same_isbn(const Sales_item &amp;rhs) const</code>\uff0c\u8fd9\u79cd\u51fd\u6570\u79f0\u4e3a\u201c\u5e38\u91cf\u6210\u5458\u51fd\u6570\u201d\uff08<code>this</code>\u6307\u5411\u7684\u5f53\u524d\u5bf9\u8c61\u662f\u5e38\u91cf\uff09\u3002</li> <li><code>return *this;</code>\u53ef\u4ee5\u8ba9\u6210\u5458\u51fd\u6570\u8fde\u7eed\u8c03\u7528\u3002</li> <li>\u666e\u901a\u7684\u975e<code>const</code>\u6210\u5458\u51fd\u6570\uff1a<code>this</code>\u662f\u6307\u5411\u7c7b\u7c7b\u578b\u7684<code>const</code>\u6307\u9488\uff08\u53ef\u4ee5\u6539\u53d8<code>this</code>\u6240\u6307\u5411\u7684\u503c\uff0c\u4e0d\u80fd\u6539\u53d8<code>this</code>\u4fdd\u5b58\u7684\u5730\u5740\uff09\u3002</li> <li><code>const</code>\u6210\u5458\u51fd\u6570\uff1a<code>this</code>\u662f\u6307\u5411const\u7c7b\u7c7b\u578b\u7684<code>const</code>\u6307\u9488\uff08\u65e2\u4e0d\u80fd\u6539\u53d8<code>this</code>\u6240\u6307\u5411\u7684\u503c\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8<code>this</code>\u4fdd\u5b58\u7684\u5730\u5740\uff09\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_3","title":"\u975e\u6210\u5458\u51fd\u6570","text":"<ul> <li>\u548c\u7c7b\u76f8\u5173\u7684\u975e\u6210\u5458\u51fd\u6570\uff0c\u5b9a\u4e49\u548c\u58f0\u660e\u90fd\u5e94\u8be5\u5728\u7c7b\u7684\u5916\u90e8\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_4","title":"\u7c7b\u7684\u6784\u9020\u51fd\u6570","text":"<ul> <li>\u7c7b\u901a\u8fc7\u4e00\u4e2a\u6216\u8005\u51e0\u4e2a\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\u6765\u63a7\u5236\u5176\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u53eb\u505a\u6784\u9020\u51fd\u6570\u3002</li> <li>\u6784\u9020\u51fd\u6570\u662f\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\u3002</li> <li>\u6784\u9020\u51fd\u6570\u653e\u5728\u7c7b\u7684<code>public</code>\u90e8\u5206\u3002</li> <li>\u4e0e\u7c7b\u540c\u540d\u7684\u6210\u5458\u51fd\u6570\u3002</li> <li><code>Sales_item(): units_sold(0), revenue(0.0) { }</code></li> <li><code>=default</code>\u8981\u6c42\u7f16\u8bd1\u5668\u5408\u6210\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\u3002(<code>C++11</code>)</li> <li>\u521d\u59cb\u5316\u5217\u8868\uff1a\u5192\u53f7\u548c\u82b1\u62ec\u53f7\u4e4b\u95f4\u7684\u4ee3\u7801\uff1a <code>Sales_item(): units_sold(0), revenue(0.0) { }</code></li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_5","title":"\u8bbf\u95ee\u63a7\u5236\u4e0e\u5c01\u88c5","text":"<ul> <li>\u8bbf\u95ee\u8bf4\u660e\u7b26\uff08access specifiers\uff09\uff1a</li> <li><code>public</code>\uff1a\u5b9a\u4e49\u5728 <code>public</code>\u540e\u9762\u7684\u6210\u5458\u5728\u6574\u4e2a\u7a0b\u5e8f\u5185\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff1b <code>public</code>\u6210\u5458\u5b9a\u4e49\u7c7b\u7684\u63a5\u53e3\u3002</li> <li><code>private</code>\uff1a\u5b9a\u4e49\u5728 <code>private</code>\u540e\u9762\u7684\u6210\u5458\u53ef\u4ee5\u88ab\u7c7b\u7684\u6210\u5458\u51fd\u6570\u8bbf\u95ee\uff0c\u4f46\u4e0d\u80fd\u88ab\u4f7f\u7528\u8be5\u7c7b\u7684\u4ee3\u7801\u8bbf\u95ee\uff1b <code>private</code>\u9690\u85cf\u4e86\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\u3002</li> <li>\u4f7f\u7528 <code>class</code>\u6216\u8005 <code>struct</code>\uff1a\u90fd\u53ef\u4ee5\u88ab\u7528\u4e8e\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u3002\u552f\u4e00\u7684\u5374\u522b\u5728\u4e8e\u8bbf\u95ee\u6743\u9650\u3002</li> <li>\u4f7f\u7528 <code>class</code>\uff1a\u5728\u7b2c\u4e00\u4e2a\u8bbf\u95ee\u8bf4\u660e\u7b26\u4e4b\u524d\u7684\u6210\u5458\u662f <code>priavte</code>\u7684\u3002</li> <li>\u4f7f\u7528 <code>struct</code>\uff1a\u5728\u7b2c\u4e00\u4e2a\u8bbf\u95ee\u8bf4\u660e\u7b26\u4e4b\u524d\u7684\u6210\u5458\u662f <code>public</code>\u7684\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_6","title":"\u53cb\u5143","text":"<ul> <li>\u5141\u8bb8\u7279\u5b9a\u7684\u975e\u6210\u5458\u51fd\u6570\u8bbf\u95ee\u4e00\u4e2a\u7c7b\u7684\u79c1\u6709\u6210\u5458.</li> <li>\u53cb\u5143\u7684\u58f0\u660e\u4ee5\u5173\u952e\u5b57 <code>friend</code>\u5f00\u59cb\u3002 <code>friend Sales_data add(const Sales_data&amp;, const Sales_data&amp;);</code>\u8868\u793a\u975e\u6210\u5458\u51fd\u6570<code>add</code>\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u7684\u975e\u516c\u6709\u6210\u5458\u3002</li> <li>\u901a\u5e38\u5c06\u53cb\u5143\u58f0\u660e\u6210\u7ec4\u5730\u653e\u5728\u7c7b\u5b9a\u4e49\u7684\u5f00\u59cb\u6216\u8005\u7ed3\u5c3e\u3002</li> <li>\u7c7b\u4e4b\u95f4\u7684\u53cb\u5143\uff1a</li> <li>\u5982\u679c\u4e00\u4e2a\u7c7b\u6307\u5b9a\u4e86\u53cb\u5143\u7c7b\uff0c\u5219\u53cb\u5143\u7c7b\u7684\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u6b64\u7c7b\u5305\u62ec\u975e\u516c\u6709\u6210\u5458\u5728\u5185\u7684\u6240\u6709\u6210\u5458\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_7","title":"\u5c01\u88c5\u7684\u76ca\u5904","text":"<ul> <li>\u786e\u4fdd\u7528\u6237\u7684\u4ee3\u7801\u4e0d\u4f1a\u65e0\u610f\u95f4\u7834\u574f\u5c01\u88c5\u5bf9\u8c61\u7684\u72b6\u6001\u3002</li> <li>\u88ab\u5c01\u88c5\u7684\u7c7b\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u53ef\u4ee5\u968f\u65f6\u6539\u53d8\uff0c\u800c\u65e0\u9700\u8c03\u6574\u7528\u6237\u7ea7\u522b\u7684\u4ee3\u7801\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_8","title":"\u7c7b\u7684\u5176\u4ed6\u7279\u6027","text":"<ul> <li>\u6210\u5458\u51fd\u6570\u4f5c\u4e3a\u5185\u8054\u51fd\u6570 <code>inline</code>\uff1a</li> <li>\u5728\u7c7b\u7684\u5185\u90e8\uff0c\u5e38\u6709\u4e00\u4e9b\u89c4\u6a21\u8f83\u5c0f\u7684\u51fd\u6570\u9002\u5408\u4e8e\u88ab\u58f0\u660e\u6210\u5185\u8054\u51fd\u6570\u3002</li> <li>\u5b9a\u4e49\u5728\u7c7b\u5185\u90e8\u7684\u51fd\u6570\u662f\u81ea\u52a8\u5185\u8054\u7684\u3002</li> <li>\u5728\u7c7b\u5916\u90e8\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u663e\u5f0f\u5730\u52a0\u4e0a <code>inline</code>\u3002</li> <li>\u53ef\u53d8\u6570\u636e\u6210\u5458 \uff08mutable data member\uff09\uff1a</li> <li><code>mutable size_t access_ctr;</code></li> <li>\u6c38\u8fdc\u4e0d\u4f1a\u662f<code>const</code>\uff0c\u5373\u4f7f\u5b83\u662f<code>const</code>\u5bf9\u8c61\u7684\u6210\u5458\u3002</li> <li>\u7c7b\u7c7b\u578b\uff1a</li> <li>\u6bcf\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u552f\u4e00\u7684\u7c7b\u578b\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_9","title":"\u7c7b\u7684\u4f5c\u7528\u57df","text":"<ul> <li>\u6bcf\u4e2a\u7c7b\u90fd\u4f1a\u5b9a\u4e49\u5b83\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u3002\u5728\u7c7b\u7684\u4f5c\u7528\u57df\u4e4b\u5916\uff0c\u666e\u901a\u7684\u6570\u636e\u548c\u51fd\u6570\u6210\u5458\u53ea\u80fd\u7531\u5f15\u7528\u3001\u5bf9\u8c61\u3001\u6307\u9488\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u3002</li> <li>\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u901a\u5e38\u5728\u51fd\u6570\u540d\u524d\u9762\uff0c\u56e0\u6b64\u5f53\u6210\u5458\u51fd\u6570\u5b9a\u4e49\u5728\u7c7b\u7684\u5916\u90e8\u65f6\uff0c\u8fd4\u56de\u7c7b\u578b\u4e2d\u4f7f\u7528\u7684\u540d\u5b57\u90fd\u4f4d\u4e8e\u7c7b\u7684\u4f5c\u7528\u57df\u4e4b\u5916\u3002</li> <li>\u5982\u679c\u6210\u5458\u4f7f\u7528\u4e86\u5916\u5c42\u4f5c\u7528\u57df\u4e2d\u7684\u67d0\u4e2a\u540d\u5b57\uff0c\u800c\u8be5\u540d\u5b57\u4ee3\u8868\u4e00\u79cd\u7c7b\u578b\uff0c\u5219\u7c7b\u4e0d\u80fd\u5728\u4e4b\u540e\u91cd\u65b0\u5b9a\u4e49\u8be5\u540d\u5b57\u3002</li> <li>\u7c7b\u4e2d\u7684\u7c7b\u578b\u540d\u5b9a\u4e49\u90fd\u8981\u653e\u5728\u4e00\u5f00\u59cb\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_10","title":"\u6784\u9020\u51fd\u6570\u518d\u63a2","text":"<ul> <li>\u6784\u9020\u51fd\u6570\u521d\u59cb\u503c\u5217\u8868\uff1a</li> <li>\u7c7b\u4f3c<code>python</code>\u4f7f\u7528\u8d4b\u503c\u7684\u65b9\u5f0f\u6709\u65f6\u5019\u4e0d\u884c\uff0c\u6bd4\u5982<code>const</code>\u6216\u8005\u5f15\u7528\u7c7b\u578b\u7684\u6570\u636e\uff0c\u53ea\u80fd\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u8d4b\u503c\u3002\uff08\u6ce8\u610f\u521d\u59cb\u5316\u548c\u8d4b\u503c\u7684\u533a\u522b\uff09</li> <li>\u6700\u597d\u8ba9\u6784\u9020\u51fd\u6570\u521d\u59cb\u503c\u7684\u987a\u5e8f\u548c\u6210\u5458\u58f0\u660e\u7684\u987a\u5e8f\u4fdd\u6301\u4e00\u81f4\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4e3a\u6240\u6709\u53c2\u6570\u90fd\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u53c2\u6570\uff0c\u90a3\u4e48\u5b83\u5b9e\u9645\u4e0a\u4e5f\u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#delegating-constructor-c11","title":"\u59d4\u6258\u6784\u9020\u51fd\u6570 \uff08delegating constructor, <code>C++11</code>\uff09","text":"<ul> <li>\u59d4\u6258\u6784\u9020\u51fd\u6570\u5c06\u81ea\u5df1\u7684\u804c\u8d23\u59d4\u6258\u7ed9\u4e86\u5176\u4ed6\u6784\u9020\u51fd\u6570\u3002</li> <li><code>Sale_data(): Sale_data(\"\", 0, 0) {}</code></li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_11","title":"\u9690\u5f0f\u7684\u7c7b\u578b\u8f6c\u6362","text":"<ul> <li>\u5982\u679c\u6784\u9020\u51fd\u6570\u53ea\u63a5\u53d7\u4e00\u4e2a\u5b9e\u53c2\uff0c\u5219\u5b83\u5b9e\u9645\u4e0a\u5b9a\u4e49\u4e86\u8f6c\u6362\u4e3a\u6b64\u7c7b\u7c7b\u578b\u7684\u9690\u5f0f\u8f6c\u6362\u673a\u5236\u3002\u8fd9\u79cd\u6784\u9020\u51fd\u6570\u53c8\u53eb\u8f6c\u6362\u6784\u9020\u51fd\u6570\uff08converting constructor\uff09\u3002</li> <li>\u7f16\u8bd1\u5668\u53ea\u4f1a\u81ea\u52a8\u5730\u6267\u884c<code>\u4ec5\u4e00\u6b65</code>\u7c7b\u578b\u8f6c\u6362\u3002</li> <li>\u6291\u5236\u6784\u9020\u51fd\u6570\u5b9a\u4e49\u7684\u9690\u5f0f\u8f6c\u6362\uff1a</li> <li>\u5c06\u6784\u9020\u51fd\u6570\u58f0\u660e\u4e3a<code>explicit</code>\u52a0\u4ee5\u963b\u6b62\u3002</li> <li><code>explicit</code>\u6784\u9020\u51fd\u6570\u53ea\u80fd\u7528\u4e8e\u76f4\u63a5\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u7528\u4e8e\u62f7\u8d1d\u5f62\u5f0f\u7684\u521d\u59cb\u5316\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#aggregate-class","title":"\u805a\u5408\u7c7b \uff08aggregate class\uff09","text":"<ul> <li>\u6ee1\u8db3\u4ee5\u4e0b\u6240\u6709\u6761\u4ef6\uff1a</li> <li>\u6240\u6709\u6210\u5458\u90fd\u662f<code>public</code>\u7684\u3002</li> <li>\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u6784\u9020\u51fd\u6570\u3002</li> <li>\u6ca1\u6709\u7c7b\u5185\u521d\u59cb\u503c\u3002</li> <li>\u6ca1\u6709\u57fa\u7c7b\uff0c\u4e5f\u6ca1\u6709<code>virtual</code>\u51fd\u6570\u3002</li> <li>\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u6210\u5458\u521d\u59cb\u503c\u5217\u8868\uff0c\u521d\u59cb\u503c\u7684\u987a\u5e8f\u5fc5\u987b\u548c\u58f0\u660e\u7684\u987a\u5e8f\u4e00\u81f4\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_12","title":"\u5b57\u9762\u503c\u5e38\u91cf\u7c7b","text":"<ul> <li><code>constexpr</code>\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u5b57\u9762\u503c\u3002</li> <li>\u5b57\u9762\u503c\u7c7b\u578b\uff1a\u9664\u4e86\u7b97\u672f\u7c7b\u578b\u3001\u5f15\u7528\u548c\u6307\u9488\u5916\uff0c\u67d0\u4e9b\u7c7b\u4e5f\u662f\u5b57\u9762\u503c\u7c7b\u578b\u3002</li> <li>\u6570\u636e\u6210\u5458\u90fd\u662f\u5b57\u9762\u503c\u7c7b\u578b\u7684\u805a\u5408\u7c7b\u662f\u5b57\u9762\u503c\u5e38\u91cf\u7c7b\u3002</li> <li>\u5982\u679c\u4e0d\u662f\u805a\u5408\u7c7b\uff0c\u5219\u5fc5\u987b\u6ee1\u8db3\u4e0b\u9762\u6240\u6709\u6761\u4ef6\uff1a</li> <li>\u6570\u636e\u6210\u5458\u90fd\u5fc5\u987b\u662f\u5b57\u9762\u503c\u7c7b\u578b\u3002</li> <li>\u7c7b\u5fc5\u987b\u81f3\u5c11\u542b\u6709\u4e00\u4e2a<code>constexpr</code>\u6784\u9020\u51fd\u6570\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u6570\u636e\u6210\u5458\u542b\u6709\u7c7b\u5185\u90e8\u521d\u59cb\u503c\uff0c\u5219\u5185\u7f6e\u7c7b\u578b\u6210\u5458\u7684\u521d\u59cb\u503c\u5fc5\u987b\u662f\u4e00\u6761\u5e38\u91cf\u8868\u8fbe\u5f0f\uff1b\u6216\u8005\u5982\u679c\u6210\u5458\u5c5e\u4e8e\u67d0\u79cd\u7c7b\u7c7b\u578b\uff0c\u5219\u521d\u59cb\u503c\u5fc5\u987b\u4f7f\u7528\u6210\u5458\u81ea\u5df1\u7684<code>constexpr</code>\u6784\u9020\u51fd\u6570\u3002</li> <li>\u7c7b\u5fc5\u987b\u4f7f\u7528\u6790\u6784\u51fd\u6570\u7684\u9ed8\u8ba4\u5b9a\u4e49\uff0c\u8be5\u6210\u5458\u8d1f\u8d23\u9500\u6bc1\u7c7b\u7684\u5bf9\u8c61\u3002</li> </ul>"},{"location":"C%2B%2B/%E7%B1%BB/#_13","title":"\u7c7b\u7684\u9759\u6001\u6210\u5458","text":"<ul> <li>\u975e<code>static</code>\u6570\u636e\u6210\u5458\u5b58\u5728\u4e8e\u7c7b\u7c7b\u578b\u7684\u6bcf\u4e2a\u5bf9\u8c61\u4e2d\u3002</li> <li><code>static</code>\u6570\u636e\u6210\u5458\u72ec\u7acb\u4e8e\u8be5\u7c7b\u7684\u4efb\u610f\u5bf9\u8c61\u800c\u5b58\u5728\u3002</li> <li>\u6bcf\u4e2a<code>static</code>\u6570\u636e\u6210\u5458\u662f\u4e0e\u7c7b\u5173\u8054\u7684\u5bf9\u8c61\uff0c\u5e76\u4e0d\u4e0e\u8be5\u7c7b\u7684\u5bf9\u8c61\u76f8\u5173\u8054\u3002</li> <li>\u58f0\u660e\uff1a</li> <li>\u58f0\u660e\u4e4b\u524d\u52a0\u4e0a\u5173\u952e\u8bcd<code>static</code>\u3002</li> <li>\u4f7f\u7528\uff1a</li> <li>\u4f7f\u7528\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26<code>::</code>\u76f4\u63a5\u8bbf\u95ee\u9759\u6001\u6210\u5458:<code>r = Account::rate();</code></li> <li>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5bf9\u8c61\u8bbf\u95ee\uff1a<code>r = ac.rate();</code></li> <li>\u5b9a\u4e49\uff1a</li> <li>\u5728\u7c7b\u5916\u90e8\u5b9a\u4e49\u65f6\u4e0d\u7528\u52a0<code>static</code>\u3002</li> <li>\u521d\u59cb\u5316\uff1a</li> <li>\u901a\u5e38\u4e0d\u5728\u7c7b\u7684\u5185\u90e8\u521d\u59cb\u5316\uff0c\u800c\u662f\u5728\u5b9a\u4e49\u65f6\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982 <code>double Account::interestRate = initRate();</code></li> <li>\u5982\u679c\u4e00\u5b9a\u8981\u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\uff0c\u5219\u8981\u6c42\u5fc5\u987b\u662f\u5b57\u9762\u503c\u5e38\u91cf\u7c7b\u578b\u7684<code>constexpr</code>\u3002</li> </ul>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/","title":"\u7b2c\u516b\u7ae0 IO\u5e93","text":""},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#io_1","title":"\u524d\u9762\u7ae0\u8282\u5df2\u7ecf\u5728\u7528\u7684IO\u5e93\u8bbe\u65bd","text":"<ul> <li>istream\uff1a\u8f93\u5165\u6d41\u7c7b\u578b\uff0c\u63d0\u4f9b\u8f93\u5165\u64cd\u4f5c\u3002</li> <li>ostream\uff1a\u8f93\u51fa\u6d41\u7c7b\u578b\uff0c\u63d0\u4f9b\u8f93\u51fa\u64cd\u4f5c</li> <li>cin\uff1a\u4e00\u4e2a<code>istream</code>\u5bf9\u8c61\uff0c\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6570\u636e\u3002</li> <li>cout\uff1a\u4e00\u4e2a<code>ostream</code>\u5bf9\u8c61\uff0c\u5411\u6807\u51c6\u8f93\u51fa\u5199\u5165\u6570\u636e\u3002</li> <li>cerr\uff1a\u4e00\u4e2a<code>ostream</code>\u5bf9\u8c61\uff0c\u5411\u6807\u51c6\u9519\u8bef\u5199\u5165\u6d88\u606f\u3002</li> <li>&gt;&gt;\u8fd0\u7b97\u7b26\uff1a\u7528\u6765\u4ece\u4e00\u4e2a<code>istream</code>\u5bf9\u8c61\u4e2d\u8bfb\u53d6\u8f93\u5165\u6570\u636e\u3002</li> <li>&lt;&lt;\u8fd0\u7b97\u7b26\uff1a\u7528\u6765\u5411\u4e00\u4e2a<code>ostream</code>\u5bf9\u8c61\u4e2d\u5199\u5165\u8f93\u51fa\u6570\u636e\u3002</li> <li>getline\u51fd\u6570\uff1a\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u7684<code>istream</code>\u5bf9\u8c61\u4e2d\u8bfb\u53d6\u4e00\u884c\u6570\u636e\uff0c\u5b58\u5165\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684<code>string</code>\u5bf9\u8c61\u4e2d\u3002</li> </ul>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#io_2","title":"IO\u7c7b","text":""},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#io_3","title":"\u6807\u51c6\u5e93\u5b9a\u4e49\u7684IO\u7c7b\u578b","text":"<ul> <li><code>iostream</code>\u5934\u6587\u4ef6\uff1a\u4ece\u6807\u51c6\u6d41\u4e2d\u8bfb\u5199\u6570\u636e\uff0c<code>istream</code>\u3001<code>ostream</code>\u7b49\u3002</li> <li><code>fstream</code>\u5934\u6587\u4ef6\uff1a\u4ece\u6587\u4ef6\u4e2d\u8bfb\u5199\u6570\u636e\uff0c<code>ifstream</code>\u3001<code>ofstream</code>\u7b49\u3002</li> <li><code>sstream</code>\u5934\u6587\u4ef6\uff1a\u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u5199\u6570\u636e\uff0c<code>istringstream</code>\u3001<code>ostringstream</code></li> </ul>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#io_4","title":"IO\u5bf9\u8c61\u4e0d\u53ef\u590d\u5236\u6216\u8d4b\u503c","text":"<ul> <li>1.IO\u5bf9\u8c61\u4e0d\u80fd\u5b58\u5728\u5bb9\u5668\u91cc.</li> <li>2.\u5f62\u53c2\u548c\u8fd4\u56de\u7c7b\u578b\u4e5f\u4e0d\u80fd\u662f\u6d41\u7c7b\u578b\u3002</li> <li>3.\u5f62\u53c2\u548c\u8fd4\u56de\u7c7b\u578b\u4e00\u822c\u662f\u6d41\u7684\u5f15\u7528\u3002</li> <li>4.\u8bfb\u5199\u4e00\u4e2aIO\u5bf9\u8c61\u4f1a\u6539\u53d8\u5176\u72b6\u6001\uff0c\u56e0\u6b64\u4f20\u9012\u548c\u8fd4\u56de\u7684\u5f15\u7528\u4e0d\u80fd\u662f<code>const</code>\u7684\u3002</li> </ul>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#_1","title":"\u6761\u4ef6\u72b6\u6001","text":"\u72b6\u6001 \u89e3\u91ca <code>strm:iostate</code> \u662f\u4e00\u79cd\u673a\u5668\u65e0\u5173\u7684\u7c7b\u578b\uff0c\u63d0\u4f9b\u4e86\u8868\u8fbe\u6761\u4ef6\u72b6\u6001\u7684\u5b8c\u6574\u529f\u80fd <code>strm:badbit</code> \u7528\u6765\u6307\u51fa\u6d41\u5df2\u7ecf\u5d29\u6e83 <code>strm:failbit</code> \u7528\u6765\u6307\u51fa\u4e00\u4e2aIO\u64cd\u4f5c\u5931\u8d25\u4e86 <code>strm:eofbit</code> \u7528\u6765\u6307\u51fa\u6d41\u5230\u8fbe\u4e86\u6587\u4ef6\u7ed3\u675f <code>strm:goodbit</code> \u7528\u6765\u6307\u51fa\u6d41\u672a\u5904\u4e8e\u9519\u8bef\u72b6\u6001\uff0c\u6b64\u503c\u4fdd\u8bc1\u4e3a\u96f6 <code>s.eof()</code> \u82e5\u6d41<code>s</code>\u7684<code>eofbit</code>\u7f6e\u4f4d\uff0c\u5219\u8fd4\u56de<code>true</code> <code>s.fail()</code> \u82e5\u6d41<code>s</code>\u7684<code>failbit</code>\u7f6e\u4f4d\uff0c\u5219\u8fd4\u56de<code>true</code> <code>s.bad()</code> \u82e5\u6d41<code>s</code>\u7684<code>badbit</code>\u7f6e\u4f4d\uff0c\u5219\u8fd4\u56de<code>true</code> <code>s.good()</code> \u82e5\u6d41<code>s</code>\u5904\u4e8e\u6709\u6548\u72b6\u6001\uff0c\u5219\u8fd4\u56de<code>true</code> <code>s.clear()</code> \u5c06\u6d41<code>s</code>\u4e2d\u6240\u6709\u6761\u4ef6\u72b6\u6001\u4f4d\u590d\u4f4d\uff0c\u5c06\u6d41\u7684\u72b6\u6001\u8bbe\u7f6e\u6210\u6709\u6548\uff0c\u8fd4\u56de<code>void</code> <code>s.clear(flags)</code> \u5c06\u6d41<code>s</code>\u4e2d\u6307\u5b9a\u7684\u6761\u4ef6\u72b6\u6001\u4f4d\u590d\u4f4d\uff0c\u8fd4\u56de<code>void</code> <code>s.setstate(flags)</code> \u6839\u636e\u7ed9\u5b9a\u7684\u6807\u5fd7\u4f4d\uff0c\u5c06\u6d41<code>s</code>\u4e2d\u5bf9\u5e94\u7684\u6761\u4ef6\u72b6\u6001\u4f4d\u7f6e\u4f4d\uff0c\u8fd4\u56de<code>void</code> <code>s.rdstate()</code> \u8fd4\u56de\u6d41<code>s</code>\u7684\u5f53\u524d\u6761\u4ef6\u72b6\u6001\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a<code>strm::iostate</code> <p>\u4e0a\u8868\u4e2d\uff0c<code>strm</code>\u662f\u4e00\u79cdIO\u7c7b\u578b\uff0c\uff08\u5982<code>istream</code>\uff09\uff0c <code>s</code>\u662f\u4e00\u4e2a\u6d41\u5bf9\u8c61\u3002</p>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#_2","title":"\u7ba1\u7406\u8f93\u51fa\u7f13\u51b2","text":"<ul> <li>\u6bcf\u4e2a\u8f93\u51fa\u6d41\u90fd\u7ba1\u7406\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u6267\u884c\u8f93\u51fa\u7684\u4ee3\u7801\uff0c\u6587\u672c\u4e32\u53ef\u80fd\u7acb\u5373\u6253\u5370\u51fa\u6765\uff0c\u4e5f\u53ef\u80fd\u88ab\u64cd\u4f5c\u7cfb\u7edf\u4fdd\u5b58\u5728\u7f13\u51b2\u533a\u5185\uff0c\u968f\u540e\u518d\u6253\u5370\u3002</li> <li>\u5237\u65b0\u7f13\u51b2\u533a\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0bIO\u64cd\u7eb5\u7b26\uff1a</li> <li><code>endl</code>\uff1a\u8f93\u51fa\u4e00\u4e2a\u6362\u884c\u7b26\u5e76\u5237\u65b0\u7f13\u51b2\u533a\u3002</li> <li><code>flush</code>\uff1a\u5237\u65b0\u6d41\uff0c\u5355\u4e0d\u6dfb\u52a0\u4efb\u4f55\u5b57\u7b26\u3002</li> <li><code>ends</code>\uff1a\u5728\u7f13\u51b2\u533a\u63d2\u5165\u7a7a\u5b57\u7b26<code>null</code>\uff0c\u7136\u540e\u5237\u65b0\u3002</li> <li><code>unitbuf</code>\uff1a\u544a\u8bc9\u6d41\u63a5\u4e0b\u6765\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\u90fd\u8981\u8fdb\u884c\u4e00\u6b21<code>flush</code>\u64cd\u4f5c\u3002</li> <li><code>nounitbuf</code>\uff1a\u56de\u5230\u6b63\u5e38\u7684\u7f13\u51b2\u65b9\u5f0f\u3002</li> </ul>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#_3","title":"\u6587\u4ef6\u8f93\u5165\u8f93\u51fa","text":"<ul> <li>\u5934\u6587\u4ef6<code>fstream</code>\u5b9a\u4e49\u4e86\u4e09\u4e2a\u7c7b\u578b\u6765\u652f\u6301\u6587\u4ef6IO\uff1a</li> <li><code>ifstream</code>\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u3002</li> <li><code>ofstream</code>\u5411\u4e00\u4e2a\u7ed9\u5b9a\u6587\u4ef6\u5199\u5165\u6570\u636e\u3002</li> <li><code>fstream</code>\u53ef\u4ee5\u8bfb\u5199\u7ed9\u5b9a\u6587\u4ef6\u3002</li> <li>\u6587\u4ef6\u6d41\uff1a\u9700\u8981\u8bfb\u5199\u6587\u4ef6\u65f6\uff0c\u5fc5\u987b\u5b9a\u4e49\u81ea\u5df1\u7684\u6587\u4ef6\u6d41\u5bf9\u8c61\uff0c\u5e76\u7ed1\u5b9a\u5728\u9700\u8981\u7684\u6587\u4ef6\u4e0a\u3002</li> </ul>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#fstream","title":"fstream\u7279\u6709\u7684\u64cd\u4f5c","text":"\u64cd\u4f5c \u89e3\u91ca <code>fstream fstrm;</code> \u521b\u5efa\u4e00\u4e2a\u672a\u7ed1\u5b9a\u7684\u6587\u4ef6\u6d41\u3002 <code>fstream fstrm(s);</code> \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u5e76\u6253\u5f00\u540d\u4e3a<code>s</code>\u7684\u6587\u4ef6\uff0c<code>s</code>\u53ef\u4ee5\u662f<code>string</code>\u4e5f\u53ef\u4ee5\u662f<code>char</code>\u6307\u9488 <code>fstream fstrm(s, mode);</code> \u4e0e\u524d\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u7c7b\u4f3c\uff0c\u4f46\u6309\u6307\u5b9a<code>mode</code>\u6253\u5f00\u6587\u4ef6 <code>fstrm.open(s)</code> \u6253\u5f00\u540d\u4e3a<code>s</code>\u7684\u6587\u4ef6\uff0c\u5e76\u548c<code>fstrm</code>\u7ed1\u5b9a <code>fstrm.close()</code> \u5173\u95ed\u548c<code>fstrm</code>\u7ed1\u5b9a\u7684\u6587\u4ef6 <code>fstrm.is_open()</code> \u8fd4\u56de\u4e00\u4e2a<code>bool</code>\u503c\uff0c\u6307\u51fa\u4e0e<code>fstrm</code>\u5173\u8054\u7684\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00\u4e14\u5c1a\u672a\u5173\u95ed <p>\u4e0a\u8868\u4e2d\uff0c<code>fstream</code>\u662f\u5934\u6587\u4ef6<code>fstream</code>\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u7c7b\u578b\uff0c<code>fstrm</code>\u662f\u4e00\u4e2a\u6587\u4ef6\u6d41\u5bf9\u8c61\u3002</p>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#_4","title":"\u6587\u4ef6\u6a21\u5f0f","text":"\u6587\u4ef6\u6a21\u5f0f \u89e3\u91ca <code>in</code> \u4ee5\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00 <code>out</code> \u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00 <code>app</code> \u6bcf\u6b21\u5199\u64cd\u4f5c\u524d\u5747\u5b9a\u4f4d\u5230\u6587\u4ef6\u672b\u5c3e <code>ate</code> \u6253\u5f00\u6587\u4ef6\u540e\u7acb\u5373\u5b9a\u4f4d\u5230\u6587\u4ef6\u672b\u5c3e <code>trunc</code> \u622a\u65ad\u6587\u4ef6 <code>binary</code> \u4ee5\u4e8c\u8fdb\u5236\u65b9\u5f0f\u8fdb\u884cIO\u64cd\u4f5c\u3002"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#string","title":"string\u6d41","text":"<ul> <li>\u5934\u6587\u4ef6<code>sstream</code>\u5b9a\u4e49\u4e86\u4e09\u4e2a\u7c7b\u578b\u6765\u652f\u6301\u5185\u5b58IO\uff1a</li> <li><code>istringstream</code>\u4ece<code>string</code>\u8bfb\u53d6\u6570\u636e\u3002</li> <li><code>ostringstream</code>\u5411<code>string</code>\u5199\u5165\u6570\u636e\u3002</li> <li><code>stringstream</code>\u53ef\u4ee5\u8bfb\u5199\u7ed9\u5b9a<code>string</code>\u3002</li> </ul>"},{"location":"C%2B%2B/C%2B%2B%E6%A0%87%E5%87%86%E5%BA%93/IO%E5%BA%93/#stringstream","title":"stringstream\u7279\u6709\u7684\u64cd\u4f5c","text":"\u64cd\u4f5c \u89e3\u91ca <code>sstream strm</code> \u5b9a\u4e49\u4e00\u4e2a\u672a\u7ed1\u5b9a\u7684<code>stringstream</code>\u5bf9\u8c61 <code>sstream strm(s)</code> \u7528<code>s</code>\u521d\u59cb\u5316\u5bf9\u8c61 <code>strm.str()</code> \u8fd4\u56de<code>strm</code>\u6240\u4fdd\u5b58\u7684<code>string</code>\u7684\u62f7\u8d1d <code>strm.str(s)</code> \u5c06<code>s</code>\u62f7\u8d1d\u5230<code>strm</code>\u4e2d\uff0c\u8fd4\u56de<code>void</code> <p>\u4e0a\u8868\u4e2d<code>sstream</code>\u662f\u5934\u6587\u4ef6<code>sstream</code>\u4e2d\u4efb\u610f\u4e00\u4e2a\u7c7b\u578b\u3002<code>s</code>\u662f\u4e00\u4e2a<code>string</code>\u3002</p>"},{"location":"C%2B%2B/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/easyx%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F/","title":"Easyx\u7684\u7b2c\u4e00\u4e2a\u5c0f\u7a0b\u5e8f","text":"<pre><code>#include&lt;graphics.h&gt;\n#include&lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n    initgraph(1280, 720);\n    int x = 300;\n    int y= 300;\n\n    BeginBatchDraw();\n\n    while (true) {\n        ExMessage mcg;\n        while (peekmessage(&amp; mcg)) {\n            if (mcg.message == WM_MOUSEMOVE) {\n                x = mcg.x;\n                y = mcg.y;\n            }\n        }\n        cleardevice();\n        solidcircle(x, y, 100);\n        FlushBatchDraw();\n    }\n\n    EndBatchDraw();\n    return 0;\n}\n</code></pre>"},{"location":"STL/STL/","title":"STL","text":""},{"location":"STL/STL/#_1","title":"\u7f51\u7ad9","text":"<ul> <li>github . huihut/note/STL.md</li> <li>cplusplus . stl</li> <li>cppreference . C++ \u53c2\u8003\u624b\u518c</li> <li>CSDN\u4e13\u680f\uff1aSTL\u5b66\u4e60\u7b14\u8bb0</li> </ul>"},{"location":"STL/STL/#_2","title":"\u7ec4\u6210","text":"<ul> <li>\u5bb9\u5668\uff08containers\uff09</li> <li>\u7b97\u6cd5\uff08algorithms\uff09</li> <li>\u8fed\u4ee3\u5668\uff08iterators\uff09</li> <li>\u4eff\u51fd\u6570\uff08functors\uff09</li> <li>\u914d\u63a5\u5668\uff08adapters\uff09</li> <li>\u7a7a\u95f4\u914d\u7f6e\u5668\uff08allocator\uff09</li> </ul>"},{"location":"STL/STL/#containers","title":"\u5bb9\u5668\uff08containers\uff09","text":"<ul> <li>\u5e8f\u5217\u5f0f\u5bb9\u5668\uff08sequence containers\uff09\uff1a\u5143\u7d20\u90fd\u662f\u53ef\u5e8f\uff08ordered\uff09\uff0c\u4f46\u672a\u5fc5\u662f\u6709\u5e8f\uff08sorted\uff09</li> <li>\u5173\u8054\u5f0f\u5bb9\u5668\uff08associattive containers\uff09</li> </ul>"},{"location":"STL/STL/#array","title":"array","text":"<p>array\u662f\u56fa\u5b9a\u5927\u5c0f\u7684\u987a\u5e8f\u5bb9\u5668\uff0c\u5b83\u4eec\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4ee5\u4e25\u683c\u7684\u7ebf\u6027\u987a\u5e8f\u6392\u5217\u7684\u7279\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u3002</p> <p>\u5728\u5185\u90e8\uff0c\u4e00\u4e2a\u6570\u7ec4\u9664\u4e86\u5b83\u6240\u5305\u542b\u7684\u5143\u7d20\uff08\u751a\u81f3\u4e0d\u662f\u5b83\u7684\u5927\u5c0f\uff0c\u5b83\u662f\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5728\u7f16\u8bd1\u65f6\u662f\u56fa\u5b9a\u7684\uff09\u4ee5\u5916\u4e0d\u4fdd\u5b58\u4efb\u4f55\u6570\u636e\u3002\u5b58\u50a8\u5927\u5c0f\u4e0e\u7528\u8bed\u8a00\u62ec\u53f7\u8bed\u6cd5\uff08[]\uff09\u58f0\u660e\u7684\u666e\u901a\u6570\u7ec4\u4e00\u6837\u9ad8\u6548\u3002\u8fd9\u4e2a\u7c7b\u53ea\u662f\u589e\u52a0\u4e86\u4e00\u5c42\u6210\u5458\u51fd\u6570\u548c\u5168\u5c40\u51fd\u6570\uff0c\u6240\u4ee5\u6570\u7ec4\u53ef\u4ee5\u4f5c\u4e3a\u6807\u51c6\u5bb9\u5668\u4f7f\u7528\u3002</p> <p>\u4e0e\u5176\u4ed6\u6807\u51c6\u5bb9\u5668\u4e0d\u540c\uff0c\u6570\u7ec4\u5177\u6709\u56fa\u5b9a\u7684\u5927\u5c0f\uff0c\u5e76\u4e14\u4e0d\u901a\u8fc7\u5206\u914d\u5668\u7ba1\u7406\u5176\u5143\u7d20\u7684\u5206\u914d\uff1a\u5b83\u4eec\u662f\u5c01\u88c5\u56fa\u5b9a\u5927\u5c0f\u6570\u7ec4\u5143\u7d20\u7684\u805a\u5408\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u4e0d\u80fd\u52a8\u6001\u5730\u6269\u5927\u6216\u7f29\u5c0f\u3002</p> <p>\u96f6\u5927\u5c0f\u7684\u6570\u7ec4\u662f\u6709\u6548\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u4e0d\u5e94\u8be5\u88ab\u89e3\u9664\u5f15\u7528\uff08\u6210\u5458\u7684\u524d\u9762\uff0c\u540e\u9762\u548c\u6570\u636e\uff09\u3002</p> <p>\u4e0e\u6807\u51c6\u5e93\u4e2d\u7684\u5176\u4ed6\u5bb9\u5668\u4e0d\u540c\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4\u5bb9\u5668\u662f\u4e00\u79cd\u7ebf\u6027\u64cd\u4f5c\uff0c\u5b83\u6d89\u53ca\u5355\u72ec\u4ea4\u6362\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd9\u901a\u5e38\u662f\u76f8\u5f53\u4f4e\u6548\u7684\u64cd\u4f5c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u5141\u8bb8\u8fed\u4ee3\u5668\u5728\u4e24\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u4fdd\u6301\u5176\u539f\u59cb\u5bb9\u5668\u5173\u8054\u3002</p> <p>\u6570\u7ec4\u5bb9\u5668\u7684\u53e6\u4e00\u4e2a\u72ec\u7279\u7279\u6027\u662f\u5b83\u4eec\u53ef\u4ee5\u88ab\u5f53\u4f5c\u5143\u7ec4\u5bf9\u8c61\u6765\u5904\u7406\uff1aarray\u5934\u90e8\u91cd\u8f7dget\u51fd\u6570\u6765\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5c31\u50cf\u5b83\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u4ee5\u53ca\u4e13\u95e8\u7684tuple_size\u548ctuple_element\u7c7b\u578b\u3002</p> <pre><code>template &lt; class T, size_t N &gt; class array;\n</code></pre> <p></p>"},{"location":"STL/STL/#arraybegin","title":"array::begin","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p></p> <pre><code>      iterator begin() noexcept;\nconst_iterator begin() const noexcept;\n</code></pre> <p>Example</p> <p><pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main()\n{\n    std::array&lt;int, 5&gt; myarray = {2, 16, 77,34, 50};\n    std::cout &lt;&lt; \"myarray contains:\";\n    for(auto it = myarray.begin(); it != myarray.end(); ++it)\n        std::cout &lt;&lt; ' ' &lt;&lt; *it;\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 2 16 77 34 50\n</code></pre></p>"},{"location":"STL/STL/#arrayend","title":"array::end","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u7406\u8bba\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <pre><code>      iterator end() noexcept;\nconst_iterator end() const noexcept;\n</code></pre> <p>Example</p> <p><pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,5&gt; myarray = { 5, 19, 77, 34, 99 };\n\n    std::cout &lt;&lt; \"myarray contains:\";\n    for ( auto it = myarray.begin(); it != myarray.end(); ++it )\n        std::cout &lt;&lt; ' ' &lt;&lt; *it;\n\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 5 19 77 34 99\n</code></pre></p>"},{"location":"STL/STL/#arrayrbegin","title":"array::rbegin","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002</p> <p><pre><code>      reverse_iterator rbegin\uff08\uff09noexcept;\nconst_reverse_iterator rbegin\uff08\uff09const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,4&gt; myarray = {4, 26, 80, 14} ;\n    for(auto rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)\n        std::cout &lt;&lt; ' ' &lt;&lt; *rit;\n\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 14 80 26 4\n</code></pre></p>"},{"location":"STL/STL/#arrayrend","title":"array::rend","text":"<p>\u8fd4\u56de\u4e00\u4e2a\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u7406\u8bba\u5143\u7d20\uff08\u8fd9\u88ab\u8ba4\u4e3a\u662f\u5b83\u7684\u53cd\u5411\u7ed3\u675f\uff09\u3002</p> <pre><code>      reverse_iterator rend() noexcept;\nconst_reverse_iterator rend() const noexcept;\n</code></pre> <p>Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,4&gt; myarray = {4, 26, 80, 14};\n    std::cout &lt;&lt; \"myarray contains\";\n    for(auto rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)\n        std::cout &lt;&lt; ' ' &lt;&lt; *rit;\n\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 14 80 26 4\n</code></pre></p>"},{"location":"STL/STL/#arraycbegin","title":"array::cbegin","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5e38\u91cf\u8fed\u4ee3\u5668\uff08const_iterator\uff09\uff1b\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ef\u4ee5\u589e\u52a0\u548c\u51cf\u5c11\uff0c\u4f46\u662f\u4e0d\u80fd\u7528\u6765\u4fee\u6539\u5b83\u6307\u5411\u7684\u5185\u5bb9\u3002 <pre><code>const_iterator cbegin\uff08\uff09const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,5&gt; myarray = {2, 16, 77, 34, 50};\n\n    std::cout &lt;&lt; \"myarray contains:\";\n\n    for ( auto it = myarray.cbegin(); it != myarray.cend(); ++it )\n        std::cout &lt;&lt; ' ' &lt;&lt; *it;   // cannot modify *it\n\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 2 16 77 34 50\n</code></pre></p>"},{"location":"STL/STL/#arraycend","title":"array::cend","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u7406\u8bba\u5143\u7d20\u7684\u5e38\u91cf\u8fed\u4ee3\u5668\uff08const_iterator\uff09\u3002\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ef\u4ee5\u589e\u52a0\u548c\u51cf\u5c11\uff0c\u4f46\u662f\u4e0d\u80fd\u7528\u6765\u4fee\u6539\u5b83\u6307\u5411\u7684\u5185\u5bb9\u3002 <pre><code>const_iterator cend() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,5&gt; myarray = { 15, 720, 801, 1002, 3502 };\n\n    std::cout &lt;&lt; \"myarray contains:\";\n    for ( auto it = myarray.cbegin(); it != myarray.cend(); ++it )\n        std::cout &lt;&lt; ' ' &lt;&lt; *it;   // cannot modify *it\n\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 2 16 77 34 50\n</code></pre></p>"},{"location":"STL/STL/#arraycrbegin","title":"array::crbegin","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5e38\u91cf\u53cd\u5411\u8fed\u4ee3\u5668\uff08const_reverse_iterator\uff09 <pre><code>const_reverse_iterator crbegin\uff08\uff09const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,6&gt; myarray = {10, 20, 30, 40, 50, 60} ;\n\n    std::cout &lt;&lt; \"myarray backwards:\";\n    for ( auto rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )\n        std::cout &lt;&lt; ' ' &lt;&lt; *rit;   // cannot modify *rit\n\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray backwards: 60 50 40 30 20 10\n</code></pre></p>"},{"location":"STL/STL/#arraycrend","title":"array::crend","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u7406\u8bba\u5143\u7d20\u7684\u5e38\u91cf\u53cd\u5411\u8fed\u4ee3\u5668\uff08const_reverse_iterator\uff09\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u5176\u53cd\u5411\u7ed3\u675f\u3002</p> <p><pre><code>const_reverse_iterator crend() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,6&gt; myarray = {10, 20, 30, 40, 50, 60} ;\n\n    std::cout &lt;&lt; \"myarray backwards:\";\n    for ( auto rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )\n        std::cout &lt;&lt; ' ' &lt;&lt; *rit;   // cannot modify *rit\n\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray backwards: 60 50 40 30 20 10\n</code></pre></p>"},{"location":"STL/STL/#arraysize","title":"array::size","text":"<p>\u8fd4\u56de\u6570\u7ec4\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u3002</p> <p><pre><code>constexpr size_type size\uff08\uff09noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,5&gt; myints;\n    std::cout &lt;&lt; \"size of myints:\" &lt;&lt; myints.size() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sizeof(myints):\" &lt;&lt; sizeof(myints) &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> Possible Output <pre><code>size of myints: 5\nsizeof(myints): 20\n</code></pre></p>"},{"location":"STL/STL/#arraymax_size","title":"array::max_size","text":"<p>\u8fd4\u56de\u6570\u7ec4\u5bb9\u5668\u53ef\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u6570\u3002\u6570\u7ec4\u5bf9\u8c61\u7684max_size\u4e0e\u5176size\u4e00\u6837\uff0c\u59cb\u7ec8\u7b49\u4e8e\u7528\u4e8e\u5b9e\u4f8b\u5316\u6570\u7ec4\u6a21\u677f\u7c7b\u7684\u7b2c\u4e8c\u4e2a\u6a21\u677f\u53c2\u6570\u3002 <pre><code>constexpr size_type max_size() noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,10&gt; myints;\n    std::cout &lt;&lt; \"size of myints: \" &lt;&lt; myints.size() &lt;&lt; '\\n';\n    std::cout &lt;&lt; \"max_size of myints: \" &lt;&lt; myints.max_size() &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>size of myints: 10\nmax_size of myints: 10\n</code></pre></p>"},{"location":"STL/STL/#arrayempty","title":"array::empty","text":"<p>\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u6570\u7ec4\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a\uff0c\u5373\u5b83\u7684size()\u662f\u5426\u4e3a0\u3002 <pre><code>constexpr bool empty() noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n  std::array&lt;int,0&gt; first;\n  std::array&lt;int,5&gt; second;\n  std::cout &lt;&lt; \"first \" &lt;&lt; (first.empty() ? \"is empty\" : \"is not empty\") &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"second \" &lt;&lt; (second.empty() ? \"is empty\" : \"is not empty\") &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> Output: <pre><code>first is empty\nsecond is not empt\n</code></pre></p>"},{"location":"STL/STL/#arrayoperator","title":"array::operator[]","text":"<p>\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2cn\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u7684\u5f15\u7528\u3002\u4e0earray::at\u76f8\u4f3c\uff0c\u4f46array::at\u4f1a\u68c0\u67e5\u6570\u7ec4\u8fb9\u754c\u5e76\u901a\u8fc7\u629b\u51fa\u4e00\u4e2aout_of_range\u5f02\u5e38\u6765\u5224\u65adn\u662f\u5426\u8d85\u51fa\u8303\u56f4\uff0c\u800carray::operator[]\u4e0d\u68c0\u67e5\u8fb9\u754c\u3002 <pre><code>      reference operator[] (size_type n);\nconst_reference operator[] (size_type n) const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n    std::array&lt;int,10&gt; myarray;\n    unsigned int i;\n\n    // assign some values:\n    for(i=0; i&lt;10; i++)\n        myarray[i] = i;\n\n    // print content\n    std::cout &lt;&lt; \"myarray contains:\";\n    for(i=0; i&lt;10; i++)\n        std::cout &lt;&lt; ' ' &lt;&lt; myarray[i];\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 0 1 2 3 4 5 6 7 8 9\n</code></pre></p>"},{"location":"STL/STL/#arrayat","title":"array::at","text":"<p>\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2cn\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u7684\u5f15\u7528\u3002\u4e0earray::operator[]\u76f8\u4f3c\uff0c\u4f46array::at\u4f1a\u68c0\u67e5\u6570\u7ec4\u8fb9\u754c\u5e76\u901a\u8fc7\u629b\u51fa\u4e00\u4e2aout_of_range\u5f02\u5e38\u6765\u5224\u65adn\u662f\u5426\u8d85\u51fa\u8303\u56f4\uff0c\u800carray::operator[]\u4e0d\u68c0\u67e5\u8fb9\u754c\u3002 <pre><code>      reference at ( size_type n );\nconst_reference at ( size_type n ) const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main()\n{\n    std::array&lt;int, 10&gt; myarray;\n    unsigned int i;\n\n    // assign some values:\n    for (i = 0; i&lt;10; i++)\n        myarray[i] = i;\n\n    // print content\n    std::cout &lt;&lt; \"myarray contains:\";\n    for (i = 0; i&lt;10; i++)\n        std::cout &lt;&lt; ' ' &lt;&lt; myarray.at(i);\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 0 1 2 3 4 5 6 7 8 9\n</code></pre></p>"},{"location":"STL/STL/#arrayfront","title":"array::front","text":"<p>\u8fd4\u56de\u5bf9\u6570\u7ec4\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002array::begin\u8fd4\u56de\u7684\u662f\u8fed\u4ee3\u5668\uff0carray::front\u8fd4\u56de\u7684\u662f\u76f4\u63a5\u5f15\u7528\u3002 \u5728\u7a7a\u5bb9\u5668\u4e0a\u8c03\u7528\u6b64\u51fd\u6570\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002 <pre><code>      reference front();\nconst_reference front() const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n  std::array&lt;int,3&gt; myarray = {2, 16, 77};\n\n  std::cout &lt;&lt; \"front is: \" &lt;&lt; myarray.front() &lt;&lt; std::endl;   // 2\n  std::cout &lt;&lt; \"back is: \" &lt;&lt; myarray.back() &lt;&lt; std::endl;     // 77\n\n  myarray.front() = 100;\n\n  std::cout &lt;&lt; \"myarray now contains:\";\n  for ( int&amp; x : myarray ) std::cout &lt;&lt; ' ' &lt;&lt; x;\n\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>front is: 2\nback is: 77\nmyarray now contains: 100 16 77\n</code></pre></p>"},{"location":"STL/STL/#arrayback","title":"array::back","text":"<p>\u8fd4\u56de\u5bf9\u6570\u7ec4\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002array::end\u8fd4\u56de\u7684\u662f\u8fed\u4ee3\u5668\uff0carray::back\u8fd4\u56de\u7684\u662f\u76f4\u63a5\u5f15\u7528\u3002 \u5728\u7a7a\u5bb9\u5668\u4e0a\u8c03\u7528\u6b64\u51fd\u6570\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002 <pre><code>      reference back();\nconst_reference back() const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n  std::array&lt;int,3&gt; myarray = {5, 19, 77};\n\n  std::cout &lt;&lt; \"front is: \" &lt;&lt; myarray.front() &lt;&lt; std::endl;   // 5\n  std::cout &lt;&lt; \"back is: \" &lt;&lt; myarray.back() &lt;&lt; std::endl;     // 77\n\n  myarray.back() = 50;\n\n  std::cout &lt;&lt; \"myarray now contains:\";\n  for ( int&amp; x : myarray ) std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>front is: 5\nback is: 77\nmyarray now contains: 5 19 50\n</code></pre></p>"},{"location":"STL/STL/#arraydata","title":"array::data","text":"<p>\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bf9\u8c61\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002</p> <p>\u7531\u4e8e\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u8fde\u7eed\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u6240\u4ee5\u68c0\u7d22\u5230\u7684\u6307\u9488\u53ef\u4ee5\u504f\u79fb\u4ee5\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u3002 <pre><code>      value_type* data() noexcept;\nconst value_type* data() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n  const char* cstr = \"Test string\";\n  std::array&lt;char,12&gt; charray;\n\n  std::memcpy (charray.data(),cstr,12);\n\n  std::cout &lt;&lt; charray.data() &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>Test string\n</code></pre></p>"},{"location":"STL/STL/#arrayfill","title":"array::fill","text":"<p>\u7528val\u586b\u5145\u6570\u7ec4\u6240\u6709\u5143\u7d20\uff0c\u5c06val\u8bbe\u7f6e\u4e3a\u6570\u7ec4\u5bf9\u8c61\u4e2d\u6240\u6709\u5143\u7d20\u7684\u503c\u3002 <pre><code>void fill (const value_type&amp; val);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main () {\n  std::array&lt;int,6&gt; myarray;\n\n  myarray.fill(5);\n\n  std::cout &lt;&lt; \"myarray contains:\";\n  for ( int&amp; x : myarray) { std::cout &lt;&lt; ' ' &lt;&lt; x; }\n\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>myarray contains: 5 5 5 5 5 5\n</code></pre></p>"},{"location":"STL/STL/#arrayswap","title":"array::swap","text":"<p>\u901a\u8fc7x\u7684\u5185\u5bb9\u4ea4\u6362\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u6570\u7ec4\u5bf9\u8c61\uff08\u5305\u62ec\u76f8\u540c\u7684\u5927\u5c0f\uff09\u3002</p> <p>\u4e0e\u5176\u4ed6\u5bb9\u5668\u7684\u4ea4\u6362\u6210\u5458\u51fd\u6570\u4e0d\u540c\uff0c\u6b64\u6210\u5458\u51fd\u6570\u901a\u8fc7\u5728\u5404\u4e2a\u5143\u7d20\u4e4b\u95f4\u6267\u884c\u4e0e\u5176\u5927\u5c0f\u76f8\u540c\u7684\u5355\u72ec\u4ea4\u6362\u64cd\u4f5c\uff0c\u4ee5\u7ebf\u6027\u65f6\u95f4\u8fd0\u884c\u3002 <pre><code>void swap (array&amp; x) noexcept(noexcept(swap(declval&lt;value_type&amp;&gt;(),declval&lt;value_type&amp;&gt;())));\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n  std::array&lt;int,5&gt; first = {10, 20, 30, 40, 50};\n  std::array&lt;int,5&gt; second = {11, 22, 33, 44, 55};\n\n  first.swap (second);\n\n  std::cout &lt;&lt; \"first:\";\n  for (int&amp; x : first) std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  std::cout &lt;&lt; \"second:\";\n  for (int&amp; x : second) std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>first: 11 22 33 44 55\nsecond: 10 20 30 40 50\n</code></pre></p>"},{"location":"STL/STL/#getarray","title":"get\uff08array\uff09","text":"<p>\u5f62\u5982\uff1astd::get&lt;0&gt;(myarray)\uff1b\u4f20\u5165\u4e00\u4e2a\u6570\u7ec4\u5bb9\u5668\uff0c\u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528\u3002 <pre><code>template &lt;size_t I\uff0cclass T\uff0csize_t N&gt; T\uff06get\uff08array &lt;T\uff0cN&gt;\uff06arr\uff09noexcept; \ntemplate &lt;size_t I\uff0cclass T\uff0csize_t N&gt; T &amp;&amp; get\uff08array &lt;T\uff0cN&gt; &amp;&amp; arr\uff09noexcept; \ntemplate &lt;size_t I\uff0cclass T\uff0csize_t N&gt; const T\uff06get\uff08const array &lt;T\uff0cN&gt;\uff06arr\uff09noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n#include &lt;tuple&gt;\n\nint main ()\n{\n  std::array&lt;int,3&gt; myarray = {10, 20, 30};\n  std::tuple&lt;int,int,int&gt; mytuple (10, 20, 30);\n\n  std::tuple_element&lt;0,decltype(myarray)&gt;::type myelement;  // int myelement\n\n  myelement = std::get&lt;2&gt;(myarray);\n  std::get&lt;2&gt;(myarray) = std::get&lt;0&gt;(myarray);\n  std::get&lt;0&gt;(myarray) = myelement;\n\n  std::cout &lt;&lt; \"first element in myarray: \" &lt;&lt; std::get&lt;0&gt;(myarray) &lt;&lt; \"\\n\";\n  std::cout &lt;&lt; \"first element in mytuple: \" &lt;&lt; std::get&lt;0&gt;(mytuple) &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre> Output <pre><code>first element in myarray: 30\nfirst element in mytuple: 10\n</code></pre></p>"},{"location":"STL/STL/#relational-operators-array","title":"relational operators (array)","text":"<p>\u5f62\u5982\uff1aarrayA != arrayB\u3001arrayA &gt; arrayB\uff1b\u4f9d\u6b64\u6bd4\u8f83\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5173\u7cfb\u3002 <pre><code>\uff081\uff09 \ntemplate &lt;class T\uff0csize_T N&gt; \n  bool operator ==\uff08const array &lt;T\uff0cN&gt;\uff06lhs\uff0cconst array &lt;T\uff0cN&gt;\uff06rhs\uff09;\n\uff082\uff09 \ntemplate &lt;class T\uff0csize_T N&gt; \n  bool operator\uff01=\uff08const array &lt;T\uff0cN&gt;\uff06lhs\uff0cconst array &lt;T\uff0cN&gt;\uff06rhs\uff09;\n\uff083\uff09 \ntemplate &lt;class T\uff0csize_T N&gt; \n  bool operator &lt;\uff08const array &lt;T\uff0cN&gt;\uff06lhs\uff0cconst array &lt;T\uff0cN&gt;\uff06rhs\uff09;\n\uff084\uff09 \ntemplate &lt;class T\uff0csize_T N&gt; \n  bool operator &lt;=\uff08const array &lt;T\uff0cN&gt;\uff06lhs\uff0cconst array &lt;T\uff0cN&gt;\uff06rhs\uff09;\n\uff085\uff09 \ntemplate &lt;class T\uff0csize_T N&gt; \n  bool operator&gt;\uff08const array &lt;T\uff0cN&gt;\uff06lhs\uff0cconst array &lt;T\uff0cN&gt;\uff06rhs\uff09;\n\uff086\uff09 \ntemplate &lt;class T\uff0csize_T N&gt; \n  bool operator&gt; =\uff08const array &lt;T\uff0cN&gt;\uff06lhs\uff0cconst array &lt;T\uff0cN&gt;\uff06rhs\uff09;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main ()\n{\n  std::array&lt;int,5&gt; a = {10, 20, 30, 40, 50};\n  std::array&lt;int,5&gt; b = {10, 20, 30, 40, 50};\n  std::array&lt;int,5&gt; c = {50, 40, 30, 20, 10};\n\n  if (a==b) std::cout &lt;&lt; \"a and b are equal\\n\";\n  if (b!=c) std::cout &lt;&lt; \"b and c are not equal\\n\";\n  if (b&lt;c) std::cout &lt;&lt; \"b is less than c\\n\";\n  if (c&gt;b) std::cout &lt;&lt; \"c is greater than b\\n\";\n  if (a&lt;=b) std::cout &lt;&lt; \"a is less than or equal to b\\n\";\n  if (a&gt;=b) std::cout &lt;&lt; \"a is greater than or equal to b\\n\";\n\n  return 0;\n}\n</code></pre> Output <pre><code>a and b are equal\nb and c are not equal\nb is less than c\nc is greater than b\na is less than or equal to b\na is greater than or equal to b\n</code></pre></p>"},{"location":"STL/STL/#vector","title":"vector","text":"<p>vector\u662f\u8868\u793a\u53ef\u4ee5\u6539\u53d8\u5927\u5c0f\u7684\u6570\u7ec4\u7684\u5e8f\u5217\u5bb9\u5668\u3002</p> <p>\u5c31\u50cf\u6570\u7ec4\u4e00\u6837\uff0cvector\u4e3a\u5b83\u4eec\u7684\u5143\u7d20\u4f7f\u7528\u8fde\u7eed\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u7684\u5143\u7d20\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5230\u5176\u5143\u7d20\u7684\u5e38\u89c4\u6307\u9488\u4e0a\u7684\u504f\u79fb\u6765\u8bbf\u95ee\uff0c\u800c\u4e14\u548c\u6570\u7ec4\u4e00\u6837\u9ad8\u6548\u3002\u4f46\u662f\u4e0e\u6570\u7ec4\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u4eec\u7684\u5927\u5c0f\u53ef\u4ee5\u52a8\u6001\u5730\u6539\u53d8\uff0c\u5b83\u4eec\u7684\u5b58\u50a8\u7531\u5bb9\u5668\u81ea\u52a8\u5904\u7406\u3002</p> <p>\u5728\u5185\u90e8\uff0cvector\u4f7f\u7528\u4e00\u4e2a\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4\u6765\u5b58\u50a8\u5b83\u4eec\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u6570\u7ec4\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u5206\u914d\uff0c\u4ee5\u4fbf\u5728\u63d2\u5165\u65b0\u5143\u7d20\u65f6\u589e\u52a0\u5927\u5c0f\uff0c\u8fd9\u610f\u5473\u7740\u5206\u914d\u4e00\u4e2a\u65b0\u6570\u7ec4\u5e76\u5c06\u6240\u6709\u5143\u7d20\u79fb\u52a8\u5230\u5176\u4e2d\u3002\u5c31\u5904\u7406\u65f6\u95f4\u800c\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u6602\u8d35\u7684\u4efb\u52a1\uff0c\u56e0\u6b64\u6bcf\u6b21\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u5bb9\u5668\u65f6\u77e2\u91cf\u90fd\u4e0d\u4f1a\u91cd\u65b0\u5206\u914d\u3002</p> <p>\u76f8\u53cd\uff0cvector\u5bb9\u5668\u53ef\u4ee5\u5206\u914d\u4e00\u4e9b\u989d\u5916\u7684\u5b58\u50a8\u4ee5\u9002\u5e94\u53ef\u80fd\u7684\u589e\u957f\uff0c\u5e76\u4e14\u56e0\u6b64\u5bb9\u5668\u53ef\u4ee5\u5177\u6709\u6bd4\u4e25\u683c\u9700\u8981\u5305\u542b\u5176\u5143\u7d20\uff08\u5373\uff0c\u5176\u5927\u5c0f\uff09\u7684\u5b58\u50a8\u66f4\u5927\u7684\u5b9e\u9645\u5bb9\u91cf\u3002\u5e93\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u7b56\u7565\u7684\u589e\u957f\u5230\u5185\u5b58\u4f7f\u7528\u548c\u91cd\u65b0\u5206\u914d\u4e4b\u95f4\u7684\u5e73\u8861\uff0c\u4f46\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u518d\u5206\u914d\u5e94\u4ec5\u5728\u5bf9\u6570\u751f\u957f\u7684\u95f4\u9694\u53d1\u751f\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5728\u6240\u8ff0\u8f7d\u4f53\u7684\u672b\u7aef\u5404\u4e2a\u5143\u4ef6\u7684\u63d2\u5165\u53ef\u4ee5\u4e0e\u63d0\u4f9b\u5206\u671f\u5e38\u91cf\u65f6\u95f4\u590d\u6742\u6027\u3002</p> <p>\u56e0\u6b64\uff0c\u4e0e\u6570\u7ec4\u76f8\u6bd4\uff0c\u8f7d\u4f53\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\u6765\u4ea4\u6362\u7ba1\u7406\u5b58\u50a8\u548c\u4ee5\u6709\u6548\u65b9\u5f0f\u52a8\u6001\u589e\u957f\u7684\u80fd\u529b\u3002</p> <p>\u4e0e\u5176\u4ed6\u52a8\u6001\u5e8f\u5217\u5bb9\u5668\uff08deques\uff0clists\u548c forward_lists \uff09\u76f8\u6bd4\uff0cvector\u975e\u5e38\u6709\u6548\u5730\u8bbf\u95ee\u5176\u5143\u7d20\uff08\u5c31\u50cf\u6570\u7ec4\u4e00\u6837\uff09\uff0c\u5e76\u76f8\u5bf9\u6709\u6548\u5730\u4ece\u5143\u7d20\u672b\u5c3e\u6dfb\u52a0\u6216\u79fb\u9664\u5143\u7d20\u3002\u5bf9\u4e8e\u6d89\u53ca\u63d2\u5165\u6216\u79fb\u9664\u9664\u4e86\u7ed3\u5c3e\u4e4b\u5916\u7684\u4f4d\u7f6e\u7684\u5143\u7d20\u7684\u64cd\u4f5c\uff0c\u5b83\u4eec\u6267\u884c\u6bd4\u5176\u4ed6\u4f4d\u7f6e\u66f4\u5dee\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u5177\u6709\u6bd4\u5217\u8868\u548c forward_lists \u66f4\u4e0d\u4e00\u81f4\u7684\u8fed\u4ee3\u5668\u548c\u5f15\u7528\u3002</p> <p>\u9488\u5bf9 vector \u7684\u5404\u79cd\u5e38\u89c1\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\uff08\u6548\u7387\uff09\u5982\u4e0b\uff1a  * \u968f\u673a\u8bbf\u95ee - \u5e38\u6570 O(1)  * \u5728\u5c3e\u90e8\u589e\u5220\u5143\u7d20 - \u5e73\u644a\uff08amortized\uff09\u5e38\u6570 O(1)}}  * \u589e\u5220\u5143\u7d20 - \u81f3 vector \u5c3e\u90e8\u7684\u7ebf\u6027\u8ddd\u79bb O(n)}}</p> <p><pre><code>template &lt; class T, class Alloc = allocator&lt;T&gt; &gt; class vector;\n</code></pre> </p>"},{"location":"STL/STL/#vectorvector","title":"vector::vector","text":"<p>\uff081\uff09empty\u5bb9\u5668\u6784\u9020\u51fd\u6570\uff08\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff09 \u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u5bb9\u5668\uff0c\u6ca1\u6709\u5143\u7d20\u3002 \uff082\uff09fill\u6784\u9020\u51fd\u6570 \u7528n\u4e2a\u5143\u7d20\u6784\u9020\u4e00\u4e2a\u5bb9\u5668\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fval\u7684\u526f\u672c\uff08\u5982\u679c\u63d0\u4f9b\uff09\u3002 \uff083\uff09\u8303\u56f4\uff08range\uff09\u6784\u9020\u5668 \u4f7f\u7528\u4e0e[ range\uff0cfirst\uff0clast]\u8303\u56f4\u5185\u7684\u5143\u7d20\u76f8\u540c\u7684\u987a\u5e8f\u6784\u9020\u4e00\u4e2a\u5bb9\u5668\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662femplace -\u4ece\u8be5\u8303\u56f4\u5185\u76f8\u5e94\u7684\u5143\u7d20\u6784\u9020\u800c\u6210\u3002 \uff084\uff09\u590d\u5236\uff08copy\uff09\u6784\u9020\u51fd\u6570\uff08\u5e76\u7528\u5206\u914d\u5668\u590d\u5236\uff09 \u6309\u7167\u76f8\u540c\u7684\u987a\u5e8f\u6784\u9020\u4e00\u4e2a\u5305\u542bx\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u526f\u672c\u7684\u5bb9\u5668\u3002 \uff085\uff09\u79fb\u52a8\uff08move\uff09\u6784\u9020\u51fd\u6570\uff08\u548c\u5206\u914d\u5668\u79fb\u52a8\uff09 \u6784\u9020\u4e00\u4e2a\u83b7\u53d6x\u5143\u7d20\u7684\u5bb9\u5668\u3002 \u5982\u679c\u6307\u5b9a\u4e86alloc\u5e76\u4e14\u4e0ex\u7684\u5206\u914d\u5668\u4e0d\u540c\uff0c\u90a3\u4e48\u5143\u7d20\u5c06\u88ab\u79fb\u52a8\u3002\u5426\u5219\uff0c\u6ca1\u6709\u6784\u5efa\u5143\u7d20\uff08\u4ed6\u4eec\u7684\u6240\u6709\u6743\u76f4\u63a5\u8f6c\u79fb\uff09\u3002 x\u4fdd\u6301\u672a\u6307\u5b9a\u4f46\u6709\u6548\u7684\u72b6\u6001\u3002 \uff086\uff09\u521d\u59cb\u5316\u5217\u8868\u6784\u9020\u51fd\u6570 \u6784\u9020\u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e2a\u5143\u4ef6\u4e2d\u7684\u4e00\u4e2a\u62f7\u8d1d\u7684IL\uff0c\u4ee5\u76f8\u540c\u7684\u987a\u5e8f\u3002</p> <p><pre><code>default (1) \nexplicit vector (const allocator_type&amp; alloc = allocator_type());\nfill (2)    \nexplicit vector (size_type n);\n         vector (size_type n, const value_type&amp; val,\n                 const allocator_type&amp; alloc = allocator_type());\nrange (3)   \ntemplate &lt;class InputIterator&gt;\n  vector (InputIterator first, InputIterator last,\n          const allocator_type&amp; alloc = allocator_type());\ncopy (4)    \nvector (const vector&amp; x);\nvector (const vector&amp; x, const allocator_type&amp; alloc);\nmove (5)    \nvector (vector&amp;&amp; x);\nvector (vector&amp;&amp; x, const allocator_type&amp; alloc);\ninitializer list (6)    \nvector (initializer_list&lt;value_type&gt; il,\n       const allocator_type&amp; alloc = allocator_type());\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n    // constructors used in the same order as described above:\n    std::vector&lt;int&gt; first;             // empty vector of ints\n    std::vector&lt;int&gt; second(4, 100);    // four ints with value 100\n    std::vector&lt;int&gt; third(second.begin(), second.end());// iterating through second\n    std::vector&lt;int&gt; fourth(third);     // a copy of third\n\n    // the iterator constructor can also be used to construct from arrays:\n    int myints[] = {16,2,77,29};\n    std::vector&lt;int&gt; fifth(myints, myints + sizeof(myints) / sizeof(int));\n\n    std::cout &lt;&lt; \"The contents of fifth are:\";\n    for(std::vector&lt;int&gt;::iterator it = fifth.begin(); it != fifth.end(); ++it)\n        std::cout &lt;&lt; ' ' &lt;&lt; *it;\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> Output <pre><code>The contents of fifth are: 16 2 77 29 \n</code></pre></p>"},{"location":"STL/STL/#vectorvector_1","title":"vector::~vector","text":"<p>\u9500\u6bc1\u5bb9\u5668\u5bf9\u8c61\u3002\u8fd9\u5c06\u5728\u6bcf\u4e2a\u5305\u542b\u7684\u5143\u7d20\u4e0a\u8c03\u7528allocator_traits::destroy\uff0c\u5e76\u4f7f\u7528\u5176\u5206\u914d\u5668\u91ca\u653e\u7531\u77e2\u91cf\u5206\u914d\u7684\u6240\u6709\u5b58\u50a8\u5bb9\u91cf\u3002 <pre><code>~vector();\n</code></pre></p>"},{"location":"STL/STL/#vectoroperator","title":"vector::operator=","text":"<p>\u5c06\u65b0\u5185\u5bb9\u5206\u914d\u7ed9\u5bb9\u5668\uff0c\u66ff\u6362\u5176\u5f53\u524d\u5185\u5bb9\uff0c\u5e76\u76f8\u5e94\u5730\u4fee\u6539\u5176\u5927\u5c0f\u3002 <pre><code>copy (1)    \nvector&amp; operator= (const vector&amp; x);\nmove (2)    \nvector&amp; operator= (vector&amp;&amp; x);\ninitializer list (3)    \nvector&amp; operator= (initializer_list&lt;value_type&gt; il);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; foo (3,0);\n  std::vector&lt;int&gt; bar (5,0);\n\n  bar = foo;\n  foo = std::vector&lt;int&gt;();\n\n  std::cout &lt;&lt; \"Size of foo: \" &lt;&lt; int(foo.size()) &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"Size of bar: \" &lt;&lt; int(bar.size()) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> Output <pre><code>Size of foo: 0\nSize of bar: 3\n</code></pre></p>"},{"location":"STL/STL/#vectorbegin","title":"vector::begin","text":""},{"location":"STL/STL/#vectorend","title":"vector::end","text":""},{"location":"STL/STL/#vectorrbegin","title":"vector::rbegin","text":""},{"location":"STL/STL/#vectorrend","title":"vector::rend","text":""},{"location":"STL/STL/#vectorcbegin","title":"vector::cbegin","text":""},{"location":"STL/STL/#vectorcend","title":"vector::cend","text":""},{"location":"STL/STL/#vectorrcbegin","title":"vector::rcbegin","text":""},{"location":"STL/STL/#vectorrcend","title":"vector::rcend","text":""},{"location":"STL/STL/#vectorsize","title":"vector::size","text":"<p>\u8fd4\u56devector\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u3002</p> <p>\u8fd9\u662fvector\u4e2d\u4fdd\u5b58\u7684\u5b9e\u9645\u5bf9\u8c61\u7684\u6570\u91cf\uff0c\u4e0d\u4e00\u5b9a\u7b49\u4e8e\u5176\u5b58\u50a8\u5bb9\u91cf\u3002</p> <p><pre><code>size_type size() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myints;\n  std::cout &lt;&lt; \"0. size: \" &lt;&lt; myints.size() &lt;&lt; '\\n';\n\n  for (int i=0; i&lt;10; i++) myints.push_back(i);\n  std::cout &lt;&lt; \"1. size: \" &lt;&lt; myints.size() &lt;&lt; '\\n';\n\n  myints.insert (myints.end(),10,100);\n  std::cout &lt;&lt; \"2. size: \" &lt;&lt; myints.size() &lt;&lt; '\\n';\n\n  myints.pop_back();\n  std::cout &lt;&lt; \"3. size: \" &lt;&lt; myints.size() &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>0. size: 0\n1. size: 10\n2. size: 20\n3. size: 19\n</code></pre></p>"},{"location":"STL/STL/#vectormax_size","title":"vector::max_size","text":"<p>\u8fd4\u56de\u8be5vector\u53ef\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u6570\u91cf\u3002\u7531\u4e8e\u5df2\u77e5\u7684\u7cfb\u7edf\u6216\u5e93\u5b9e\u73b0\u9650\u5236\uff0c</p> <p>\u8fd9\u662f\u5bb9\u5668\u53ef\u4ee5\u8fbe\u5230\u7684\u6700\u5927\u6f5c\u5728\u5927\u5c0f\uff0c\u4f46\u5bb9\u5668\u65e0\u6cd5\u4fdd\u8bc1\u80fd\u591f\u8fbe\u5230\u8be5\u5927\u5c0f\uff1a\u5728\u8fbe\u5230\u8be5\u5927\u5c0f\u4e4b\u524d\u7684\u4efb\u4f55\u65f6\u95f4\uff0c\u4ecd\u7136\u65e0\u6cd5\u5206\u914d\u5b58\u50a8\u3002 <pre><code>size_type max_size() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n\n  // set some content in the vector:\n  for (int i=0; i&lt;100; i++) myvector.push_back(i);\n\n  std::cout &lt;&lt; \"size: \" &lt;&lt; myvector.size() &lt;&lt; \"\\n\";\n  std::cout &lt;&lt; \"capacity: \" &lt;&lt; myvector.capacity() &lt;&lt; \"\\n\";\n  std::cout &lt;&lt; \"max_size: \" &lt;&lt; myvector.max_size() &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre> A possible output for this program could be: <pre><code>size: 100\ncapacity: 128\nmax_size: 1073741823\n</code></pre></p>"},{"location":"STL/STL/#vectorresize","title":"vector::resize","text":"<p>\u8c03\u6574\u5bb9\u5668\u7684\u5927\u5c0f\uff0c\u4f7f\u5176\u5305\u542bn\u4e2a\u5143\u7d20\u3002</p> <p>\u5982\u679cn\u5c0f\u4e8e\u5f53\u524d\u7684\u5bb9\u5668size\uff0c\u5185\u5bb9\u5c06\u88ab\u7f29\u5c0f\u5230\u524dn\u4e2a\u5143\u7d20\uff0c\u5c06\u5176\u5220\u9664\uff08\u5e76\u9500\u6bc1\u5b83\u4eec\uff09\u3002</p> <p>\u5982\u679cn\u5927\u4e8e\u5f53\u524d\u5bb9\u5668size\uff0c\u5219\u901a\u8fc7\u5728\u672b\u5c3e\u63d2\u5165\u5c3d\u53ef\u80fd\u591a\u7684\u5143\u7d20\u4ee5\u8fbe\u5230\u5927\u5c0fn\u6765\u6269\u5c55\u5185\u5bb9\u3002\u5982\u679c\u6307\u5b9a\u4e86val\uff0c\u5219\u65b0\u5143\u7d20\u5c06\u521d\u59cb\u5316\u4e3aval\u7684\u526f\u672c\uff0c\u5426\u5219\u5c06\u8fdb\u884c\u503c\u521d\u59cb\u5316\u3002</p> <p>\u5982\u679cn\u4e5f\u5927\u4e8e\u5f53\u524d\u7684\u5bb9\u5668\u7684capacity\uff08\u5bb9\u91cf\uff09\uff0c\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u5c06\u81ea\u52a8\u91cd\u65b0\u5206\u914d\u3002</p> <p>\u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u63d2\u5165\u6216\u8005\u5220\u9664\u5143\u7d20\u7684\u5185\u5bb9\u6765\u6539\u53d8\u5bb9\u5668\u7684\u5b9e\u9645\u5185\u5bb9\u3002 <pre><code>void resize (size_type n);\nvoid resize (size_type n, const value_type&amp; val);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n\n  // set some initial content:\n  for (int i=1;i&lt;10;i++) myvector.push_back(i);\n\n  myvector.resize(5);\n  myvector.resize(8,100);\n  myvector.resize(12);\n\n  std::cout &lt;&lt; \"myvector contains:\";\n  for (int i=0;i&lt;myvector.size();i++)\n    std::cout &lt;&lt; ' ' &lt;&lt; myvector[i];\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0\n</code></pre></p>"},{"location":"STL/STL/#vectorcapacity","title":"vector::capacity","text":"<p>\u8fd4\u56de\u5f53\u524d\u4e3avector\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u7684\u5927\u5c0f\uff0c\u7528\u5143\u7d20\u8868\u793a\u3002\u8fd9\u4e2acapacity(\u5bb9\u91cf)\u4e0d\u4e00\u5b9a\u7b49\u4e8evector\u7684size\u3002\u5b83\u53ef\u4ee5\u76f8\u7b49\u6216\u66f4\u5927\uff0c\u989d\u5916\u7684\u7a7a\u95f4\u5141\u8bb8\u9002\u5e94\u589e\u957f\uff0c\u800c\u4e0d\u9700\u8981\u91cd\u65b0\u5206\u914d\u6bcf\u4e2a\u63d2\u5165\u3002 <pre><code>size_type capacity() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n\n  // set some content in the vector:\n  for (int i=0; i&lt;100; i++) myvector.push_back(i);\n\n  std::cout &lt;&lt; \"size: \" &lt;&lt; (int) myvector.size() &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"capacity: \" &lt;&lt; (int) myvector.capacity() &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"max_size: \" &lt;&lt; (int) myvector.max_size() &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> A possible output for this program could be: <pre><code>size: 100\ncapacity: 128\nmax_size: 1073741823\n</code></pre></p>"},{"location":"STL/STL/#vectorempty","title":"vector::empty","text":"<p>\u8fd4\u56devector\u662f\u5426\u4e3a\u7a7a\uff08\u5373\uff0c\u5b83\u7684size\u662f\u5426\u4e3a0\uff09 <pre><code>bool empty() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n  int sum (0);\n\n  for (int i=1;i&lt;=10;i++) myvector.push_back(i);\n\n  while (!myvector.empty())\n  {\n     sum += myvector.back();\n     myvector.pop_back();\n  }\n\n  std::cout &lt;&lt; \"total: \" &lt;&lt; sum &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>total: 55\n</code></pre></p>"},{"location":"STL/STL/#vectorreserve","title":"vector::reserve","text":"<p>\u8bf7\u6c42vector\u5bb9\u91cf\u81f3\u5c11\u8db3\u4ee5\u5305\u542bn\u4e2a\u5143\u7d20\u3002</p> <p>\u5982\u679cn\u5927\u4e8e\u5f53\u524dvector\u5bb9\u91cf\uff0c\u5219\u8be5\u51fd\u6570\u4f7f\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u5176\u5b58\u50a8\u5bb9\u91cf\uff0c\u4ece\u800c\u5c06\u5176\u5bb9\u91cf\u589e\u52a0\u5230n\uff08\u6216\u66f4\u5927\uff09\u3002</p> <p>\u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u8c03\u7528\u4e0d\u4f1a\u5bfc\u81f4\u91cd\u65b0\u5206\u914d\uff0c\u5e76\u4e14vector\u5bb9\u91cf\u4e0d\u53d7\u5f71\u54cd\u3002</p> <p>\u8fd9\u4e2a\u51fd\u6570\u5bf9vector\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u5b83\u7684\u5143\u7d20\u3002 <pre><code>void reserve (size_type n);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt;::size_type sz;\n\n  std::vector&lt;int&gt; foo;\n  sz = foo.capacity();\n  std::cout &lt;&lt; \"making foo grow:\\n\";\n  for (int i=0; i&lt;100; ++i) {\n    foo.push_back(i);\n    if (sz!=foo.capacity()) {\n      sz = foo.capacity();\n      std::cout &lt;&lt; \"capacity changed: \" &lt;&lt; sz &lt;&lt; '\\n';\n    }\n  }\n\n  std::vector&lt;int&gt; bar;\n  sz = bar.capacity();\n  bar.reserve(100);   // this is the only difference with foo above\n  std::cout &lt;&lt; \"making bar grow:\\n\";\n  for (int i=0; i&lt;100; ++i) {\n    bar.push_back(i);\n    if (sz!=bar.capacity()) {\n      sz = bar.capacity();\n      std::cout &lt;&lt; \"capacity changed: \" &lt;&lt; sz &lt;&lt; '\\n';\n    }\n  }\n  return 0;\n}\n</code></pre> Possible output <pre><code>making foo grow:\ncapacity changed: 1\ncapacity changed: 2\ncapacity changed: 4\ncapacity changed: 8\ncapacity changed: 16\ncapacity changed: 32\ncapacity changed: 64\ncapacity changed: 128\nmaking bar grow:\ncapacity changed: 100\n</code></pre></p>"},{"location":"STL/STL/#vectorshrink_to_fit","title":"vector::shrink_to_fit","text":"<p>\u8981\u6c42\u5bb9\u5668\u51cf\u5c0f\u5176capacity(\u5bb9\u91cf)\u4ee5\u9002\u5e94\u5176\u5c3a\u5bf8\u3002</p> <p>\u8be5\u8bf7\u6c42\u662f\u975e\u7ed1\u5b9a\u7684\uff0c\u5e76\u4e14\u5bb9\u5668\u5b9e\u73b0\u53ef\u4ee5\u81ea\u7531\u5730\u8fdb\u884c\u4f18\u5316\uff0c\u5e76\u4e14\u4fdd\u6301capacity\u5927\u4e8e\u5176size\u7684vector\u3002 \u8fd9\u53ef\u80fd\u5bfc\u81f4\u91cd\u65b0\u5206\u914d\uff0c\u4f46\u5bf9\u77e2\u91cf\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5e76\u4e14\u4e0d\u80fd\u6539\u53d8\u5176\u5143\u7d20\u3002 <pre><code>void shrink_to_fit();\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector (100);\n  std::cout &lt;&lt; \"1. capacity of myvector: \" &lt;&lt; myvector.capacity() &lt;&lt; '\\n';\n\n  myvector.resize(10);\n  std::cout &lt;&lt; \"2. capacity of myvector: \" &lt;&lt; myvector.capacity() &lt;&lt; '\\n';\n\n  myvector.shrink_to_fit();\n  std::cout &lt;&lt; \"3. capacity of myvector: \" &lt;&lt; myvector.capacity() &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Possible output <pre><code>1. capacity of myvector: 100\n2. capacity of myvector: 100\n3. capacity of myvector: 10\n</code></pre></p>"},{"location":"STL/STL/#vectoroperator_1","title":"vector::operator[]","text":""},{"location":"STL/STL/#vectorat","title":"vector::at","text":""},{"location":"STL/STL/#vectorfront","title":"vector::front","text":""},{"location":"STL/STL/#vectorback","title":"vector::back","text":""},{"location":"STL/STL/#vectordata","title":"vector::data","text":""},{"location":"STL/STL/#vectorassign","title":"vector::assign","text":"<p>\u5c06\u65b0\u5185\u5bb9\u5206\u914d\u7ed9vector\uff0c\u66ff\u6362\u5176\u5f53\u524d\u5185\u5bb9\uff0c\u5e76\u76f8\u5e94\u5730\u4fee\u6539\u5176\u5927\u5c0f\u3002</p> <p>\u5728\u8303\u56f4\u7248\u672c\uff081\uff09\u4e2d\uff0c\u65b0\u5185\u5bb9\u662f\u4ece\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u6309\u76f8\u540c\u987a\u5e8f\u6784\u9020\u7684\u5143\u7d20\u3002</p> <p>\u5728\u586b\u5145\u7248\u672c\uff082\uff09\u4e2d\uff0c\u65b0\u5185\u5bb9\u662fn\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2aval\u7684\u526f\u672c\u3002</p> <p>\u5728\u521d\u59cb\u5316\u5217\u8868\u7248\u672c\uff083\uff09\u4e2d\uff0c\u65b0\u5185\u5bb9\u662f\u4ee5\u76f8\u540c\u987a\u5e8f\u4f5c\u4e3a\u521d\u59cb\u5316\u5217\u8868\u4f20\u9012\u7684\u503c\u7684\u526f\u672c\u3002</p> <p>\u6240\u8ff0\u5185\u90e8\u5206\u914d\u5668\u88ab\u7528\u4e8e\uff08\u901a\u8fc7\u5176\u6027\u72b6\uff09\uff0c\u4ee5\u5206\u914d\u548c\u89e3\u9664\u5206\u914d\u5b58\u50a8\u5668\u5982\u679c\u91cd\u65b0\u5206\u914d\u53d1\u751f\u3002\u5b83\u4e5f\u4e60\u60ef\u4e8e\u6467\u6bc1\u6240\u6709\u73b0\u6709\u7684\u5143\u7d20\uff0c\u5e76\u6784\u5efa\u65b0\u7684\u5143\u7d20\u3002 <pre><code>range (1)   \ntemplate &lt;class InputIterator&gt;\n  void assign (InputIterator first, InputIterator last);\nfill (2)    \nvoid assign (size_type n, const value_type&amp; val);\ninitializer list (3)    \nvoid assign (initializer_list&lt;value_type&gt; il);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; first;\n  std::vector&lt;int&gt; second;\n  std::vector&lt;int&gt; third;\n\n  first.assign (7,100);             // 7 ints with a value of 100\n\n  std::vector&lt;int&gt;::iterator it;\n  it=first.begin()+1;\n\n  second.assign (it,first.end()-1); // the 5 central values of first\n\n  int myints[] = {1776,7,4};\n  third.assign (myints,myints+3);   // assigning from array.\n\n  std::cout &lt;&lt; \"Size of first: \" &lt;&lt; int (first.size()) &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"Size of second: \" &lt;&lt; int (second.size()) &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"Size of third: \" &lt;&lt; int (third.size()) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> Output <pre><code>Size of first: 7\nSize of second: 5\nSize of third: 3\n</code></pre></p> <p>\u8865\u5145\uff1avector::assign \u4e0e vector::operator= \u7684\u533a\u522b\uff1a</p> <ol> <li>vector::assign \u5b9e\u73b0\u6e90\u7801</li> </ol> <pre><code>void assign(size_type __n, const _Tp&amp; __val) { _M_fill_assign(__n, __val); }\n\ntemplate &lt;class _Tp, class _Alloc&gt;\nvoid vector&lt;_Tp, _Alloc&gt;::_M_fill_assign(size_t __n, const value_type&amp; __val) \n{\n  if (__n &gt; capacity()) {\n    vector&lt;_Tp, _Alloc&gt; __tmp(__n, __val, get_allocator());\n    __tmp.swap(*this);\n  }\n  else if (__n &gt; size()) {\n    fill(begin(), end(), __val);\n    _M_finish = uninitialized_fill_n(_M_finish, __n - size(), __val);\n  }\n  else\n    erase(fill_n(begin(), __n, __val), end());\n}\n</code></pre> <ol> <li>vector::operator= \u5b9e\u73b0\u6e90\u7801</li> </ol> <pre><code>template &lt;class _Tp, class _Alloc&gt;\nvector&lt;_Tp,_Alloc&gt;&amp; \nvector&lt;_Tp,_Alloc&gt;::operator=(const vector&lt;_Tp, _Alloc&gt;&amp; __x)\n{\n  if (&amp;__x != this) {\n    const size_type __xlen = __x.size();\n    if (__xlen &gt; capacity()) {\n      iterator __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());\n      destroy(_M_start, _M_finish);\n      _M_deallocate(_M_start, _M_end_of_storage - _M_start);\n      _M_start = __tmp;\n      _M_end_of_storage = _M_start + __xlen;\n    }\n    else if (size() &gt;= __xlen) {\n      iterator __i = copy(__x.begin(), __x.end(), begin());\n      destroy(__i, _M_finish);\n    }\n    else {\n      copy(__x.begin(), __x.begin() + size(), _M_start);\n      uninitialized_copy(__x.begin() + size(), __x.end(), _M_finish);\n    }\n    _M_finish = _M_start + __xlen;\n  }\n  return *this;\n}\n</code></pre>"},{"location":"STL/STL/#vectorpush_back","title":"vector::push_back","text":"<p>\u5728vector\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u3002val\u7684\u5185\u5bb9\u88ab\u590d\u5236\uff08\u6216\u79fb\u52a8\uff09\u5230\u65b0\u7684\u5143\u7d20\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u5c06\u5bb9\u5668size\u589e\u52a0\u4e86\u4e00\u4e2a\uff0c\u5982\u679c\u65b0\u7684\u77e2\u91cfsize\u8d85\u8fc7\u4e86\u5f53\u524dvector\u7684capacity\uff0c\u5219\u5bfc\u81f4\u6240\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u81ea\u52a8\u91cd\u65b0\u5206\u914d\u3002 <pre><code>void push_back (const value_type&amp; val);\nvoid push_back (value_type&amp;&amp; val);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n  int myint;\n\n  std::cout &lt;&lt; \"Please enter some integers (enter 0 to end):\\n\";\n\n  do {\n    std::cin &gt;&gt; myint;\n    myvector.push_back (myint);\n  } while (myint);\n\n  std::cout &lt;&lt; \"myvector stores \" &lt;&lt; int(myvector.size()) &lt;&lt; \" numbers.\\n\";\n\n  return 0;\n}\n</code></pre></p>"},{"location":"STL/STL/#vectorpop_back","title":"vector::pop_back","text":"<p>\u5220\u9664vector\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u6709\u6548\u5730\u5c06\u5bb9\u5668size\u51cf\u5c11\u4e00\u4e2a\u3002</p> <p>\u8fd9\u7834\u574f\u4e86\u88ab\u5220\u9664\u7684\u5143\u7d20\u3002 <pre><code>void pop_back();\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n  int sum (0);\n  myvector.push_back (100);\n  myvector.push_back (200);\n  myvector.push_back (300);\n\n  while (!myvector.empty())\n  {\n    sum+=myvector.back();\n    myvector.pop_back();\n  }\n\n  std::cout &lt;&lt; \"The elements of myvector add up to \" &lt;&lt; sum &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>The elements of myvector add up to 600\n</code></pre></p>"},{"location":"STL/STL/#vectorinsert","title":"vector::insert","text":"<p>\u901a\u8fc7\u5728\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165\u65b0\u5143\u7d20\u6765\u6269\u5c55\u8be5vector\uff0c\u901a\u8fc7\u63d2\u5165\u5143\u7d20\u7684\u6570\u91cf\u6709\u6548\u5730\u589e\u52a0\u5bb9\u5668\u5927\u5c0f\u3002 \u8fd9\u4f1a\u5bfc\u81f4\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u81ea\u52a8\u91cd\u65b0\u5206\u914d\uff0c\u53ea\u6709\u5728\u65b0\u7684vector\u7684size\u8d85\u8fc7\u5f53\u524d\u7684vector\u7684capacity\u7684\u60c5\u51b5\u4e0b\u3002 </p> <p>\u7531\u4e8evector\u4f7f\u7528\u6570\u7ec4\u4f5c\u4e3a\u5176\u57fa\u7840\u5b58\u50a8\uff0c\u56e0\u6b64\u9664\u4e86\u5c06\u5143\u7d20\u63d2\u5165\u5230vector\u672b\u5c3e\u4e4b\u540e\uff0c\u6216vector\u7684begin\u4e4b\u524d\uff0c\u5176\u4ed6\u4f4d\u7f6e\u4f1a\u5bfc\u81f4\u5bb9\u5668\u91cd\u65b0\u5b9a\u4f4d\u4f4d\u7f6e\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5230\u4ed6\u4eec\u7684\u65b0\u4f4d\u7f6e\u3002\u4e0e\u5176\u4ed6\u79cd\u7c7b\u7684\u5e8f\u5217\u5bb9\u5668\uff08\u4f8b\u5982list\u6216forward_list\uff09\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u64cd\u4f5c\u76f8\u6bd4\uff0c\u8fd9\u901a\u5e38\u662f\u4f4e\u6548\u7684\u64cd\u4f5c\u3002 <pre><code>single element (1)  \niterator insert (const_iterator position, const value_type&amp; val);\nfill (2)    \niterator insert (const_iterator position, size_type n, const value_type&amp; val);\nrange (3)   \ntemplate &lt;class InputIterator&gt;\niterator insert (const_iterator position, InputIterator first, InputIterator last);\nmove (4)    \niterator insert (const_iterator position, value_type&amp;&amp; val);\ninitializer list (5)    \niterator insert (const_iterator position, initializer_list&lt;value_type&gt; il);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector (3,100);\n  std::vector&lt;int&gt;::iterator it;\n\n  it = myvector.begin();\n  it = myvector.insert ( it , 200 );\n\n  myvector.insert (it,2,300);\n\n  // \"it\" no longer valid, get a new one:\n  it = myvector.begin();\n\n  std::vector&lt;int&gt; anothervector (2,400);\n  myvector.insert (it+2,anothervector.begin(),anothervector.end());\n\n  int myarray [] = { 501,502,503 };\n  myvector.insert (myvector.begin(), myarray, myarray+3);\n\n  std::cout &lt;&lt; \"myvector contains:\";\n  for (it=myvector.begin(); it&lt;myvector.end(); it++)\n    std::cout &lt;&lt; ' ' &lt;&lt; *it;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>myvector contains: 501 502 503 300 300 400 400 200 100 100 100\n</code></pre></p> <p>\u8865\u5145\uff1ainsert \u8fed\u4ee3\u5668\u91ce\u6307\u9488\u9519\u8bef\uff1a</p> <p><pre><code>int main()\n{\n    std::vector&lt;int&gt; v(5, 0);\n    std::vector&lt;int&gt;::iterator vi;\n\n  // \u83b7\u53d6vector\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\n    vi = v.begin();\n\n  // push_back \u63d2\u5165\u5143\u7d20\u4e4b\u540e\u53ef\u80fd\u4f1a\u56e0\u4e3a push_back \u7684\u9a9a\u64cd\u4f5c\uff08\u521b\u5efa\u4e00\u4e2a\u65b0vector\u628a\u65e7vector\u7684\u503c\u590d\u5236\u5230\u65b0vector\uff09\uff0c\u5bfc\u81f4vector\u8fed\u4ee3\u5668iterator\u7684\u6307\u9488\u53d8\u6210\u91ce\u6307\u9488\uff0c\u800c\u5bfc\u81f4insert\u51fa\u9519\n    v.push_back(10);\n\n    v.insert(vi, 2, 300);\n\n    return 0;\n}\n</code></pre> \u6539\u6b63\uff1a\u5e94\u8be5\u628a<code>vi = v.begin();</code>\u653e\u5230<code>v.push_back(10);</code>\u540e\u9762</p>"},{"location":"STL/STL/#vectorerase","title":"vector::erase","text":"<p>\u4ecevector\u4e2d\u5220\u9664\u5355\u4e2a\u5143\u7d20\uff08position\uff09\u6216\u4e00\u7cfb\u5217\u5143\u7d20\uff08[first\uff0clast\uff09\uff09\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u51cf\u5c11\u4e86\u88ab\u53bb\u9664\u7684\u5143\u7d20\u7684\u6570\u91cf\uff0c\u4ece\u800c\u7834\u574f\u4e86\u5bb9\u5668\u7684\u5927\u5c0f\u3002</p> <p>\u7531\u4e8evector\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u5176\u5e95\u5c42\u5b58\u50a8\uff0c\u6240\u4ee5\u5220\u9664\u9664vector\u7ed3\u675f\u4f4d\u7f6e\u4e4b\u540e\uff0c\u6216vector\u7684begin\u4e4b\u524d\u7684\u5143\u7d20\u5916\uff0c\u5c06\u5bfc\u81f4\u5bb9\u5668\u5c06\u6bb5\u88ab\u64e6\u9664\u540e\u7684\u6240\u6709\u5143\u7d20\u91cd\u65b0\u5b9a\u4f4d\u5230\u65b0\u7684\u4f4d\u7f6e\u3002\u4e0e\u5176\u4ed6\u79cd\u7c7b\u7684\u5e8f\u5217\u5bb9\u5668\uff08\u4f8b\u5982list\u6216forward_list\uff09\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u64cd\u4f5c\u76f8\u6bd4\uff0c\u8fd9\u901a\u5e38\u662f\u4f4e\u6548\u7684\u64cd\u4f5c\u3002 <pre><code>iterator erase (const_iterator position);\niterator erase (const_iterator first, const_iterator last);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n\n  // set some values (from 1 to 10)\n  for (int i=1; i&lt;=10; i++) myvector.push_back(i);\n\n  // erase the 6th element\n  myvector.erase (myvector.begin()+5);\n\n  // erase the first 3 elements:\n  myvector.erase (myvector.begin(),myvector.begin()+3);\n\n  std::cout &lt;&lt; \"myvector contains:\";\n  for (unsigned i=0; i&lt;myvector.size(); ++i)\n    std::cout &lt;&lt; ' ' &lt;&lt; myvector[i];\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>myvector contains: 4 5 7 8 9 10\n</code></pre></p>"},{"location":"STL/STL/#vectorswap","title":"vector::swap","text":"<p>\u901a\u8fc7x\u7684\u5185\u5bb9\u4ea4\u6362\u5bb9\u5668\u7684\u5185\u5bb9\uff0cx\u662f\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684vector\u5bf9\u8c61\u3002\u5c3a\u5bf8\u53ef\u80fd\u4e0d\u540c\u3002</p> <p>\u5728\u8c03\u7528\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u4e4b\u540e\uff0c\u8fd9\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u662f\u90a3\u4e9b\u5728\u8c03\u7528\u4e4b\u524d\u5728x\u4e2d\u7684\u5143\u7d20\uff0c\u800cx\u7684\u5143\u7d20\u662f\u5728\u8fd9\u4e2a\u5143\u7d20\u4e2d\u7684\u5143\u7d20\u3002\u6240\u6709\u8fed\u4ee3\u5668\uff0c\u5f15\u7528\u548c\u6307\u9488\u5bf9\u4ea4\u6362\u5bf9\u8c61\u4fdd\u6301\u6709\u6548\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u975e\u6210\u5458\u51fd\u6570\u5b58\u5728\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u4ea4\u6362\uff0c\u5e76\u4f7f\u7528\u4e0e\u6b64\u6210\u5458\u51fd\u6570\u76f8\u4f3c\u7684\u4f18\u5316\u6765\u91cd\u8f7d\u8be5\u7b97\u6cd5\u3002 <pre><code>void swap (vector&amp; x);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; foo (3,100);   // three ints with a value of 100\n  std::vector&lt;int&gt; bar (5,200);   // five ints with a value of 200\n\n  foo.swap(bar);\n\n  std::cout &lt;&lt; \"foo contains:\";\n  for (unsigned i=0; i&lt;foo.size(); i++)\n    std::cout &lt;&lt; ' ' &lt;&lt; foo[i];\n  std::cout &lt;&lt; '\\n';\n\n  std::cout &lt;&lt; \"bar contains:\";\n  for (unsigned i=0; i&lt;bar.size(); i++)\n    std::cout &lt;&lt; ' ' &lt;&lt; bar[i];\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>foo contains: 200 200 200 200 200 \nbar contains: 100 100 100 \n</code></pre></p>"},{"location":"STL/STL/#vectorclear","title":"vector::clear","text":"<p>\u4ecevector\u4e2d\u5220\u9664\u6240\u6709\u7684\u5143\u7d20\uff08\u88ab\u9500\u6bc1\uff09\uff0c\u7559\u4e0bsize\u4e3a0\u7684\u5bb9\u5668\u3002</p> <p>\u4e0d\u4fdd\u8bc1\u91cd\u65b0\u5206\u914d\uff0c\u5e76\u4e14\u7531\u4e8e\u8c03\u7528\u6b64\u51fd\u6570\uff0c vector\u7684capacity\u4e0d\u4fdd\u8bc1\u53d1\u751f\u53d8\u5316\u3002\u5f3a\u5236\u91cd\u65b0\u5206\u914d\u7684\u5178\u578b\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528swap\uff1a<code>vector&lt;T&gt;().swap(x);   // clear x reallocating</code> <pre><code>void clear() noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nvoid printVector(const std::vector&lt;int&gt; &amp;v)\n{\n    for (auto it = v.begin(); it != v.end(); ++it)\n    {\n        std::cout &lt;&lt; *it &lt;&lt; ' ';\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nint main()\n{\n    std::vector&lt;int&gt; v1(5, 50);\n\n    printVector(v1);\n    std::cout &lt;&lt; \"v1 size  = \" &lt;&lt; v1.size() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"v1 capacity  = \" &lt;&lt; v1.capacity() &lt;&lt; std::endl;\n\n    v1.clear();\n\n    printVector(v1);\n    std::cout &lt;&lt; \"v1 size  = \" &lt;&lt; v1.size() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"v1 capacity  = \" &lt;&lt; v1.capacity() &lt;&lt; std::endl;\n\n    v1.push_back(11);\n    v1.push_back(22);\n\n    printVector(v1);\n    std::cout &lt;&lt; \"v1 size  = \" &lt;&lt; v1.size() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"v1 capacity  = \" &lt;&lt; v1.capacity() &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> Output <pre><code>50 50 50 50 50\nv1 size  = 5\nv1 capacity  = 5\n\nv1 size  = 0\nv1 capacity  = 5\n11 22\nv1 size  = 2\nv1 capacity  = 5\n</code></pre></p>"},{"location":"STL/STL/#vectoremplace","title":"vector::emplace","text":"<p>\u901a\u8fc7\u5728position\u4f4d\u7f6e\u5904\u63d2\u5165\u65b0\u5143\u7d20args\u6765\u6269\u5c55\u5bb9\u5668\u3002\u8fd9\u4e2a\u65b0\u5143\u7d20\u662f\u7528args\u4f5c\u4e3a\u6784\u5efa\u7684\u53c2\u6570\u6765\u6784\u5efa\u7684\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u589e\u52a0\u4e86\u4e00\u4e2a\u5bb9\u5668\u7684\u5927\u5c0f\u3002</p> <p>\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u7684\u81ea\u52a8\u91cd\u65b0\u5206\u914d\u53d1\u751f\u5728\u65b0\u7684vector\u7684size\u8d85\u8fc7\u5f53\u524d\u5411\u91cf\u5bb9\u91cf\u7684\u60c5\u51b5\u4e0b\u3002</p> <p>\u7531\u4e8evector\u4f7f\u7528\u6570\u7ec4\u4f5c\u4e3a\u5176\u57fa\u7840\u5b58\u50a8\uff0c\u56e0\u6b64\u9664\u4e86\u5c06\u5143\u7d20\u63d2\u5165\u5230vector\u672b\u5c3e\u4e4b\u540e\uff0c\u6216vector\u7684begin\u4e4b\u524d\uff0c\u5176\u4ed6\u4f4d\u7f6e\u4f1a\u5bfc\u81f4\u5bb9\u5668\u91cd\u65b0\u5b9a\u4f4d\u4f4d\u7f6e\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5230\u4ed6\u4eec\u7684\u65b0\u4f4d\u7f6e\u3002\u4e0e\u5176\u4ed6\u79cd\u7c7b\u7684\u5e8f\u5217\u5bb9\u5668\uff08\u4f8b\u5982list\u6216forward_list\uff09\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u64cd\u4f5c\u76f8\u6bd4\uff0c\u8fd9\u901a\u5e38\u662f\u4f4e\u6548\u7684\u64cd\u4f5c\u3002</p> <p>\u8be5\u5143\u7d20\u662f\u901a\u8fc7\u8c03\u7528allocator_traits::construct\u6765\u8f6c\u6362args\u6765\u521b\u5efa\u7684\u3002\u63d2\u5165\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6210\u5458\u51fd\u6570\uff0c\u5c06\u73b0\u6709\u5bf9\u8c61\u590d\u5236\u6216\u79fb\u52a8\u5230\u5bb9\u5668\u4e2d\u3002</p> <p><pre><code>template &lt;class... Args&gt;\niterator emplace (const_iterator position, Args&amp;&amp;... args);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector = {10,20,30};\n\n  auto it = myvector.emplace ( myvector.begin()+1, 100 );\n  myvector.emplace ( it, 200 );\n  myvector.emplace ( myvector.end(), 300 );\n\n  std::cout &lt;&lt; \"myvector contains:\";\n  for (auto&amp; x: myvector)\n    std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>myvector contains: 10 200 100 20 30 300\n</code></pre></p>"},{"location":"STL/STL/#vectoremplace_back","title":"vector::emplace_back","text":"<p>\u5728vector\u7684\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u7d27\u8ddf\u5728\u5f53\u524d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u3002\u8fd9\u4e2a\u65b0\u5143\u7d20\u662f\u7528args\u4f5c\u4e3a\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u6765\u6784\u9020\u7684\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u5c06\u5bb9\u5668\u5927\u5c0f\u589e\u52a0\u4e86\u4e00\u4e2a\uff0c\u5982\u679c\u65b0\u7684\u77e2\u91cf\u5927\u5c0f\u8d85\u8fc7\u4e86\u5f53\u524d\u7684vector\u5bb9\u91cf\uff0c\u5219\u5bfc\u81f4\u6240\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u81ea\u52a8\u91cd\u65b0\u5206\u914d\u3002</p> <p>\u8be5\u5143\u7d20\u662f\u901a\u8fc7\u8c03\u7528allocator_traits :: construct\u6765\u8f6c\u6362args\u6765\u521b\u5efa\u7684\u3002</p> <p>\u4e0epush_back\u76f8\u6bd4\uff0cemplace_back\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u590d\u5236\u548c\u79fb\u52a8\u64cd\u4f5c\u3002 <pre><code>template &lt;class... Args&gt;\n  void emplace_back (Args&amp;&amp;... args);\n</code></pre></p> <p>Example</p> <pre><code>#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nstruct President\n{\n    std::string name;\n    std::string country;\n    int year;\n\n    President(std::string p_name, std::string p_country, int p_year)\n        : name(std::move(p_name)), country(std::move(p_country)), year(p_year)\n    {\n        std::cout &lt;&lt; \"I am being constructed.\\n\";\n    }\n    President(President&amp;&amp; other)\n        : name(std::move(other.name)), country(std::move(other.country)), year(other.year)\n    {\n        std::cout &lt;&lt; \"I am being moved.\\n\";\n    }\n    President&amp; operator=(const President&amp; other) = default;\n};\n\nint main()\n{\n    std::vector&lt;President&gt; elections;\n    std::cout &lt;&lt; \"emplace_back:\\n\";\n    elections.emplace_back(\"Nelson Mandela\", \"South Africa\", 1994);\n\n    std::vector&lt;President&gt; reElections;\n    std::cout &lt;&lt; \"\\npush_back:\\n\";\n    reElections.push_back(President(\"Franklin Delano Roosevelt\", \"the USA\", 1936));\n\n    std::cout &lt;&lt; \"\\nContents:\\n\";\n    for (President const&amp; president: elections) {\n        std::cout &lt;&lt; president.name &lt;&lt; \" was elected president of \"\n                  &lt;&lt; president.country &lt;&lt; \" in \" &lt;&lt; president.year &lt;&lt; \".\\n\";\n    }\n    for (President const&amp; president: reElections) {\n        std::cout &lt;&lt; president.name &lt;&lt; \" was re-elected president of \"\n                  &lt;&lt; president.country &lt;&lt; \" in \" &lt;&lt; president.year &lt;&lt; \".\\n\";\n    }\n}\n</code></pre> <p>Output</p> <pre><code>emplace_back:\nI am being constructed.\n\npush_back:\nI am being constructed.\nI am being moved.\n\nContents:\nNelson Mandela was elected president of South Africa in 1994.\nFranklin Delano Roosevelt was re-elected president of the USA in 1936.\n</code></pre>"},{"location":"STL/STL/#vectorget_allocator","title":"vector::get_allocator","text":"<p>\u8fd4\u56de\u4e0evector\u5173\u8054\u7684\u6784\u9020\u5668\u5bf9\u8c61\u7684\u526f\u672c\u3002 <pre><code>allocator_type get_allocator() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main ()\n{\n  std::vector&lt;int&gt; myvector;\n  int * p;\n  unsigned int i;\n\n  // allocate an array with space for 5 elements using vector's allocator:\n  p = myvector.get_allocator().allocate(5);\n\n  // construct values in-place on the array:\n  for (i=0; i&lt;5; i++) myvector.get_allocator().construct(&amp;p[i],i);\n\n  std::cout &lt;&lt; \"The allocated array contains:\";\n  for (i=0; i&lt;5; i++) std::cout &lt;&lt; ' ' &lt;&lt; p[i];\n  std::cout &lt;&lt; '\\n';\n\n  // destroy and deallocate:\n  for (i=0; i&lt;5; i++) myvector.get_allocator().destroy(&amp;p[i]);\n  myvector.get_allocator().deallocate(p,5);\n\n  return 0;\n}\n</code></pre> Output <pre><code>The allocated array contains: 0 1 2 3 4\n</code></pre></p> <p>\u6ce8\u610f\uff1adeallocate\u548cdestory\u7684\u5173\u7cfb\uff1a</p> <p>deallocate\u5b9e\u73b0\u7684\u6e90\u7801\uff1a</p> <pre><code>template &lt;class T&gt;\ninline void _deallocate(T* buffer)\n{\n    ::operator delete(buffer);    //\u4e3a\u4ec0\u4e48\u4e0d\u7528 delete [] ?  ,operator delete \u533a\u522b\u4e8e delete \n                                 //operator delete  \u662f\u4e00\u4e2a\u5e95\u5c42\u64cd\u4f5c\u7b26\n}\n</code></pre> <p>destory\uff1a</p> <pre><code>template &lt;class T&gt;\ninline void _destory(T *ptr)\n{\n    ptr-&gt;~T();\n}\n</code></pre> <p>destory\u8d1f\u8d23\u8c03\u7528\u7c7b\u578b\u7684\u6790\u6784\u51fd\u6570\uff0c\u9500\u6bc1\u76f8\u5e94\u5185\u5b58\u4e0a\u7684\u5185\u5bb9\uff08\u4f46\u9500\u6bc1\u540e\u5185\u5b58\u5730\u5740\u4ecd\u4fdd\u7559\uff09</p> <p>deallocate\u8d1f\u8d23\u91ca\u653e\u5185\u5b58\uff08\u6b64\u65f6\u76f8\u5e94\u5185\u5b58\u4e2d\u7684\u503c\u5728\u6b64\u4e4b\u524d\u5e94\u8c03\u7528destory\u9500\u6bc1\uff0c\u5c06\u5185\u5b58\u5730\u5740\u8fd4\u56de\u7ed9\u7cfb\u7edf\uff0c\u4ee3\u8868\u8fd9\u90e8\u5206\u5730\u5740\u4f7f\u7528\u5f15\u7528-1\uff09</p>"},{"location":"STL/STL/#relational-operators-vector","title":"relational operators (vector)","text":""},{"location":"STL/STL/#swap-vector","title":"swap (vector)","text":""},{"location":"STL/STL/#vector_1","title":"vector","text":""},{"location":"STL/STL/#deque","title":"deque","text":"<p>deque\uff08['dek]\uff09\uff08\u53cc\u7aef\u961f\u5217\uff09\u662fdouble-ended queue \u7684\u4e00\u4e2a\u4e0d\u89c4\u5219\u7f29\u5199\u3002deque\u662f\u5177\u6709\u52a8\u6001\u5927\u5c0f\u7684\u5e8f\u5217\u5bb9\u5668\uff0c\u53ef\u4ee5\u5728\u4e24\u7aef\uff08\u524d\u7aef\u6216\u540e\u7aef\uff09\u6269\u5c55\u6216\u6536\u7f29\u3002</p> <p>\u7279\u5b9a\u7684\u5e93\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0deques\uff0c\u901a\u5e38\u4f5c\u4e3a\u67d0\u79cd\u5f62\u5f0f\u7684\u52a8\u6001\u6570\u7ec4\u3002\u4f46\u662f\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u90fd\u5141\u8bb8\u901a\u8fc7\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u76f4\u63a5\u8bbf\u95ee\u5404\u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u6839\u636e\u9700\u8981\u6269\u5c55\u548c\u6536\u7f29\u5bb9\u5668\u6765\u81ea\u52a8\u5904\u7406\u5b58\u50a8\u3002</p> <p>\u56e0\u6b64\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u4e8evector\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5728\u5e8f\u5217\u7684\u5f00\u59cb\u90e8\u5206\u4e5f\u53ef\u4ee5\u9ad8\u6548\u5730\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728\u7ed3\u5c3e\u3002\u4f46\u662f\uff0c\u4e0evector\u4e0d\u540c\uff0cdeques\u5e76\u4e0d\u4fdd\u8bc1\u5c06\u5176\u6240\u6709\u5143\u7d20\u5b58\u50a8\u5728\u8fde\u7eed\u7684\u5b58\u50a8\u4f4d\u7f6e\uff1adeque\u901a\u8fc7\u504f\u79fb\u6307\u5411\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u8bbf\u95ee\u5143\u7d20\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002</p> <p>\u4e24\u4e2avector\u548cdeques\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u76f8\u4f3c\u7684\u63a5\u53e3\uff0c\u53ef\u4ee5\u7528\u4e8e\u7c7b\u4f3c\u7684\u76ee\u7684\uff0c\u4f46\u5185\u90e8\u5de5\u4f5c\u65b9\u5f0f\u5b8c\u5168\u4e0d\u540c\uff1a\u867d\u7136vector\u4f7f\u7528\u5355\u4e2a\u6570\u7ec4\u9700\u8981\u5076\u5c14\u91cd\u65b0\u5206\u914d\u4ee5\u589e\u957f\uff0c\u4f46\u662fdeque\u7684\u5143\u7d20\u53ef\u4ee5\u5206\u6563\u5728\u4e0d\u540c\u7684\u5757\u7684\u5bb9\u5668\uff0c\u5bb9\u5668\u5728\u5185\u90e8\u4fdd\u5b58\u5fc5\u8981\u7684\u4fe1\u606f\u4ee5\u63d0\u4f9b\u5bf9\u5176\u4efb\u4f55\u5143\u7d20\u7684\u6301\u7eed\u65f6\u95f4\u548c\u7edf\u4e00\u7684\u987a\u5e8f\u63a5\u53e3\uff08\u901a\u8fc7\u8fed\u4ee3\u5668\uff09\u7684\u76f4\u63a5\u8bbf\u95ee\u3002\u56e0\u6b64\uff0cdeques\u5728\u5185\u90e8\u6bd4vector\u66f4\u590d\u6742\u4e00\u70b9\uff0c\u4f46\u662f\u8fd9\u4f7f\u5f97\u4ed6\u4eec\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u66f4\u6709\u6548\u5730\u589e\u957f\uff0c\u5c24\u5176\u662f\u5728\u91cd\u65b0\u5206\u914d\u53d8\u5f97\u66f4\u52a0\u6602\u8d35\u7684\u5f88\u957f\u5e8f\u5217\u7684\u60c5\u51b5\u4e0b\u3002</p> <p>\u5bf9\u4e8e\u9891\u7e41\u63d2\u5165\u6216\u5220\u9664\u5f00\u59cb\u6216\u7ed3\u675f\u4f4d\u7f6e\u4ee5\u5916\u7684\u5143\u7d20\u7684\u64cd\u4f5c\uff0cdeques\u8868\u73b0\u5f97\u66f4\u5dee\uff0c\u5e76\u4e14\u4e0e\u5217\u8868\u548c\u8f6c\u53d1\u5217\u8868\u76f8\u6bd4\uff0c\u8fed\u4ee3\u5668\u548c\u5f15\u7528\u7684\u4e00\u81f4\u6027\u66f4\u4f4e\u3002</p> <p>deque\u4e0a\u5e38\u89c1\u64cd\u4f5c\u7684\u590d\u6742\u6027\uff08\u6548\u7387\uff09\u5982\u4e0b\uff1a </p> <ul> <li>\u968f\u673a\u8bbf\u95ee - \u5e38\u6570O(1) </li> <li>\u5728\u7ed3\u5c3e\u6216\u5f00\u5934\u63d2\u5165\u6216\u79fb\u9664\u5143\u7d20 - \u644a\u9500\u4e0d\u53d8O(1) </li> <li>\u63d2\u5165\u6216\u79fb\u9664\u5143\u7d20 - \u7ebf\u6027O(n) <pre><code>template &lt; class T, class Alloc = allocator&lt;T&gt; &gt; class deque;\n</code></pre> </li> </ul>"},{"location":"STL/STL/#dequedeque","title":"deque::deque <p>\u6784\u9020\u4e00\u4e2adeque\u5bb9\u5668\u5bf9\u8c61\uff0c\u6839\u636e\u6240\u4f7f\u7528\u7684\u6784\u9020\u51fd\u6570\u7248\u672c\u521d\u59cb\u5316\u5b83\u7684\u5185\u5bb9\uff1a</p> <p>Example <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nint main ()\n{\n  unsigned int i;\n\n  // constructors used in the same order as described above:\n  std::deque&lt;int&gt; first;                                // empty deque of ints\n  std::deque&lt;int&gt; second (4,100);                       // four ints with value 100\n  std::deque&lt;int&gt; third (second.begin(),second.end());  // iterating through second\n  std::deque&lt;int&gt; fourth (third);                       // a copy of third\n\n  // the iterator constructor can be used to copy arrays:\n  int myints[] = {16,2,77,29};\n  std::deque&lt;int&gt; fifth (myints, myints + sizeof(myints) / sizeof(int) );\n\n  std::cout &lt;&lt; \"The contents of fifth are:\";\n  for (std::deque&lt;int&gt;::iterator it = fifth.begin(); it!=fifth.end(); ++it)\n    std::cout &lt;&lt; ' ' &lt;&lt; *it;\n\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>The contents of fifth are: 16 2 77 29 \n</code></pre></p>","text":""},{"location":"STL/STL/#dequepush_back","title":"deque::push_back <p>\u5728\u5f53\u524d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e \uff0c\u5728deque\u5bb9\u5668\u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u3002val\u7684\u5185\u5bb9\u88ab\u590d\u5236\uff08\u6216\u79fb\u52a8\uff09\u5230\u65b0\u7684\u5143\u7d20\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u589e\u52a0\u4e86\u4e00\u4e2a\u5bb9\u5668\u7684\u5927\u5c0f\u3002 <pre><code>void push_back (const value_type&amp; val);\nvoid push_back (value_type&amp;&amp; val);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nint main ()\n{\n  std::deque&lt;int&gt; mydeque;\n  int myint;\n\n  std::cout &lt;&lt; \"Please enter some integers (enter 0 to end):\\n\";\n\n  do {\n    std::cin &gt;&gt; myint;\n    mydeque.push_back (myint);\n  } while (myint);\n\n  std::cout &lt;&lt; \"mydeque stores \" &lt;&lt; (int) mydeque.size() &lt;&lt; \" numbers.\\n\";\n\n  return 0;\n}\n</code></pre></p>","text":""},{"location":"STL/STL/#dequepush_front","title":"deque::push_front <p>\u5728deque\u5bb9\u5668\u7684\u5f00\u59cb\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u4f4d\u4e8e\u5f53\u524d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u3002val\u7684\u5185\u5bb9\u88ab\u590d\u5236\uff08\u6216\u79fb\u52a8\uff09\u5230\u63d2\u5165\u7684\u5143\u7d20\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u589e\u52a0\u4e86\u4e00\u4e2a\u5bb9\u5668\u7684\u5927\u5c0f\u3002 <pre><code>void push_front (const value_type&amp; val);\nvoid push_front (value_type&amp;&amp; val);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nint main ()\n{\n  std::deque&lt;int&gt; mydeque (2,100);     // two ints with a value of 100\n  mydeque.push_front (200);\n  mydeque.push_front (300);\n\n  std::cout &lt;&lt; \"mydeque contains:\";\n  for (std::deque&lt;int&gt;::iterator it = mydeque.begin(); it != mydeque.end(); ++it)\n    std::cout &lt;&lt; ' ' &lt;&lt; *it;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>300 200 100 100\n</code></pre></p>","text":""},{"location":"STL/STL/#dequepop_back","title":"deque::pop_back <p>\u5220\u9664deque\u5bb9\u5668\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u6709\u6548\u5730\u5c06\u5bb9\u5668\u5927\u5c0f\u51cf\u5c11\u4e00\u4e2a\u3002</p> <p>\u8fd9\u7834\u574f\u4e86\u88ab\u5220\u9664\u7684\u5143\u7d20\u3002</p> <p><pre><code>void pop_back();\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nint main ()\n{\n  std::deque&lt;int&gt; mydeque;\n  int sum (0);\n  mydeque.push_back (10);\n  mydeque.push_back (20);\n  mydeque.push_back (30);\n\n  while (!mydeque.empty())\n  {\n    sum+=mydeque.back();\n    mydeque.pop_back();\n  }\n\n  std::cout &lt;&lt; \"The elements of mydeque add up to \" &lt;&lt; sum &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>The elements of mydeque add up to 60\n</code></pre></p>","text":""},{"location":"STL/STL/#dequepop_front","title":"deque::pop_front <p>\u5220\u9664deque\u5bb9\u5668\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6709\u6548\u5730\u51cf\u5c0f\u5176\u5927\u5c0f\u3002</p> <p>\u8fd9\u7834\u574f\u4e86\u88ab\u5220\u9664\u7684\u5143\u7d20\u3002 <pre><code>void pop_front();\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nint main ()\n{\n  std::deque&lt;int&gt; mydeque;\n\n  mydeque.push_back (100);\n  mydeque.push_back (200);\n  mydeque.push_back (300);\n\n  std::cout &lt;&lt; \"Popping out the elements in mydeque:\";\n  while (!mydeque.empty())\n  {\n    std::cout &lt;&lt; ' ' &lt;&lt; mydeque.front();\n    mydeque.pop_front();\n  }\n\n  std::cout &lt;&lt; \"\\nThe final size of mydeque is \" &lt;&lt; int(mydeque.size()) &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>Popping out the elements in mydeque: 100 200 300\nThe final size of mydeque is 0\n</code></pre></p>","text":""},{"location":"STL/STL/#dequeemplace_front","title":"deque::emplace_front <p>\u5728deque\u7684\u5f00\u5934\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u5c31\u5728\u5176\u5f53\u524d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u3002\u8fd9\u4e2a\u65b0\u7684\u5143\u7d20\u662f\u7528args\u4f5c\u4e3a\u6784\u5efa\u7684\u53c2\u6570\u6765\u6784\u5efa\u7684\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u589e\u52a0\u4e86\u4e00\u4e2a\u5bb9\u5668\u7684\u5927\u5c0f\u3002</p> <p>\u8be5\u5143\u7d20\u662f\u901a\u8fc7\u8c03\u7528allocator_traits::construct\u6765\u8f6c\u6362args\u6765\u521b\u5efa\u7684\u3002</p> <p>\u5b58\u5728\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6210\u5458\u51fd\u6570push_front\uff0c\u5b83\u53ef\u4ee5\u5c06\u73b0\u6709\u5bf9\u8c61\u590d\u5236\u6216\u79fb\u52a8\u5230\u5bb9\u5668\u4e2d\u3002 <pre><code>template &lt;class... Args&gt;\n  void emplace_front (Args&amp;&amp;... args);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nint main ()\n{\n  std::deque&lt;int&gt; mydeque = {10,20,30};\n\n  mydeque.emplace_front (111);\n  mydeque.emplace_front (222);\n\n  std::cout &lt;&lt; \"mydeque contains:\";\n  for (auto&amp; x: mydeque)\n    std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>mydeque contains: 222 111 10 20 30\n</code></pre></p>","text":""},{"location":"STL/STL/#dequeemplace_back","title":"deque::emplace_back <p>\u5728deque\u7684\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u7d27\u8ddf\u5728\u5f53\u524d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u3002\u8fd9\u4e2a\u65b0\u7684\u5143\u7d20\u662f\u7528args\u4f5c\u4e3a\u6784\u5efa\u7684\u53c2\u6570\u6765\u6784\u5efa\u7684\u3002</p> <p>\u8fd9\u6709\u6548\u5730\u589e\u52a0\u4e86\u4e00\u4e2a\u5bb9\u5668\u7684\u5927\u5c0f\u3002</p> <p>\u8be5\u5143\u7d20\u662f\u901a\u8fc7\u8c03\u7528allocator_traits::construct\u6765\u8f6c\u6362args\u6765\u521b\u5efa\u7684\u3002</p> <p>\u5b58\u5728\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6210\u5458\u51fd\u6570push_back\uff0c\u5b83\u53ef\u4ee5\u5c06\u73b0\u6709\u5bf9\u8c61\u590d\u5236\u6216\u79fb\u52a8\u5230\u5bb9\u5668\u4e2d <pre><code>template &lt;class... Args&gt;\n  void emplace_back (Args&amp;&amp;... args);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nint main ()\n{\n  std::deque&lt;int&gt; mydeque = {10,20,30};\n\n  mydeque.emplace_back (100);\n  mydeque.emplace_back (200);\n\n  std::cout &lt;&lt; \"mydeque contains:\";\n  for (auto&amp; x: mydeque)\n    std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>mydeque contains: 10 20 30 100 200\n</code></pre></p>","text":""},{"location":"STL/STL/#forward_list","title":"forward_list","text":"<p>forward_list\uff08\u5355\u5411\u94fe\u8868\uff09\u662f\u5e8f\u5217\u5bb9\u5668\uff0c\u5141\u8bb8\u5728\u5e8f\u5217\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u6052\u5b9a\u7684\u65f6\u95f4\u63d2\u5165\u548c\u64e6\u9664\u64cd\u4f5c\u3002</p> <p>forward_list\uff08\u5355\u5411\u94fe\u8868\uff09\u88ab\u5b9e\u73b0\u4e3a\u5355\u94fe\u8868; \u5355\u94fe\u8868\u53ef\u4ee5\u5c06\u5b83\u4eec\u5305\u542b\u7684\u6bcf\u4e2a\u5143\u7d20\u5b58\u50a8\u5728\u4e0d\u540c\u548c\u4e0d\u76f8\u5173\u7684\u5b58\u50a8\u4f4d\u7f6e\u4e2d\u3002\u901a\u8fc7\u5173\u8054\u5230\u5e8f\u5217\u4e2d\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u94fe\u63a5\u7684\u6bcf\u4e2a\u5143\u7d20\u6765\u4fdd\u7559\u6392\u5e8f\u3002forward_list\u5bb9\u5668\u548c\u5217\u8868</p> <p>\u4e4b\u95f4\u7684\u4e3b\u8981\u8bbe\u8ba1\u533a\u522b\u5bb9\u5668\u662f\u7b2c\u4e00\u4e2a\u5185\u90e8\u53ea\u4fdd\u7559\u4e00\u4e2a\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u94fe\u63a5\uff0c\u800c\u540e\u8005\u6bcf\u4e2a\u5143\u7d20\u4fdd\u7559\u4e24\u4e2a\u94fe\u63a5\uff1a\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u5411\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5141\u8bb8\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u6709\u6548\u7684\u8fed\u4ee3\uff0c\u4f46\u662f\u6bcf\u4e2a\u5143\u7d20\u6d88\u8017\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u5e76\u4e14\u63d2\u5165\u548c\u79fb\u9664\u5143\u4ef6\u7684\u65f6\u95f4\u5f00\u9500\u7565\u9ad8\u3002\u56e0\u6b64\uff0cforward_list\u5bf9\u8c61\u6bd4\u5217\u8868\u5bf9\u8c61\u66f4\u6709\u6548\u7387\uff0c\u5c3d\u7ba1\u5b83\u4eec\u53ea\u80fd\u5411\u524d\u8fed\u4ee3\u3002</p> <p>\u4e0e\u5176\u4ed6\u57fa\u672c\u7684\u6807\u51c6\u5e8f\u5217\u5bb9\u5668\uff08array\uff0cvector\u548cdeque\uff09\uff0cforward_list\u901a\u5e38\u5728\u63d2\u5165\uff0c\u63d0\u53d6\u548c\u79fb\u52a8\u5bb9\u5668\u5185\u4efb\u4f55\u4f4d\u7f6e\u7684\u5143\u7d20\u65b9\u9762\u6548\u679c\u66f4\u597d\uff0c\u56e0\u6b64\u4e5f\u9002\u7528\u4e8e\u5bc6\u96c6\u4f7f\u7528\u8fd9\u4e9b\u5143\u7d20\u7684\u7b97\u6cd5\uff0c\u5982\u6392\u5e8f\u7b97\u6cd5\u3002</p> <p>\u7684\u4e3b\u8981\u7f3a\u70b9\u4fee\u9970\u7b26Modifiers S\u548c\u5217\u8868\u76f8\u6bd4\u8fd9\u4e9b\u5176\u5b83\u5e8f\u5217\u5bb9\u5668s\u662f\u8bf4\uff0c\u4ed6\u4eec\u7f3a\u4e4f\u53ef\u4ee5\u901a\u8fc7\u4f4d\u7f6e\u7684\u5143\u7d20\u7684\u76f4\u63a5\u8bbf\u95ee; \u4f8b\u5982\uff0c\u8981\u8bbf\u95eeforward_list\u4e2d\u7684\u7b2c\u516d\u4e2a\u5143\u7d20\uff0c\u5fc5\u987b\u4ece\u5f00\u59cb\u4f4d\u7f6e\u8fed\u4ee3\u5230\u8be5\u4f4d\u7f6e\uff0c\u8fd9\u9700\u8981\u5728\u8fd9\u4e9b\u4f4d\u7f6e\u4e4b\u95f4\u7684\u7ebf\u6027\u65f6\u95f4\u3002\u5b83\u4eec\u8fd8\u6d88\u8017\u4e00\u4e9b\u989d\u5916\u7684\u5185\u5b58\u6765\u4fdd\u6301\u4e0e\u6bcf\u4e2a\u5143\u7d20\u76f8\u5173\u8054\u7684\u94fe\u63a5\u4fe1\u606f\uff08\u8fd9\u53ef\u80fd\u662f\u5927\u578b\u5c0f\u5143\u7d20\u5217\u8868\u7684\u91cd\u8981\u56e0\u7d20\uff09\u3002</p> <p>\u8be5\u4fee\u9970\u7b26Modifiersclass\u6a21\u677f\u7684\u8bbe\u8ba1\u8003\u8651\u5230\u6548\u7387\uff1a\u6309\u7167\u8bbe\u8ba1\uff0c\u5b83\u4e0e\u7b80\u5355\u7684\u624b\u5199C\u578b\u5355\u94fe\u8868\u4e00\u6837\u9ad8\u6548\uff0c\u5b9e\u9645\u4e0a\u662f\u552f\u4e00\u7684\u6807\u51c6\u5bb9\u5668\uff0c\u4e3a\u4e86\u6548\u7387\u7684\u8003\u8651\u6545\u610f\u7f3a\u5c11\u5c3a\u5bf8\u6210\u5458\u51fd\u6570\uff1a\u7531\u4e8e\u5176\u6027\u8d28\u4f5c\u4e3a\u4e00\u4e2a\u94fe\u8868\uff0c\u5177\u6709\u4e00\u4e2a\u9700\u8981\u4e00\u5b9a\u65f6\u95f4\u7684\u5927\u5c0f\u7684\u6210\u5458\u5c06\u9700\u8981\u5b83\u4fdd\u6301\u4e00\u4e2a\u5185\u90e8\u8ba1\u6570\u5668\u7684\u5927\u5c0f\uff08\u5982\u5217\u8868\u6240\u793a\uff09\u3002\u8fd9\u4f1a\u6d88\u8017\u4e00\u4e9b\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4f7f\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u6548\u7387\u7a0d\u4f4e\u3002\u8981\u83b7\u53d6forward_list\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u8ddd\u79bb\u7b97\u6cd5\u7684\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7ebf\u6027\u65f6\u95f4\u7684\u64cd\u4f5c\u3002</p> <p></p>"},{"location":"STL/STL/#forward_listforward_list","title":"forward_list::forward_list <p><pre><code>default (1) \nexplicit forward_list (const allocator_type&amp; alloc = allocator_type());\nfill (2)    \nexplicit forward_list (size_type n);\nexplicit forward_list (size_type n, const value_type&amp; val,\n                        const allocator_type&amp; alloc = allocator_type());\nrange (3)   \ntemplate &lt;class InputIterator&gt;\n  forward_list (InputIterator first, InputIterator last,\n                const allocator_type&amp; alloc = allocator_type());\ncopy (4)    \nforward_list (const forward_list&amp; fwdlst);\nforward_list (const forward_list&amp; fwdlst, const allocator_type&amp; alloc);\nmove (5)    \nforward_list (forward_list&amp;&amp; fwdlst);\nforward_list (forward_list&amp;&amp; fwdlst, const allocator_type&amp; alloc);\ninitializer list (6)    \nforward_list (initializer_list&lt;value_type&gt; il,\n              const allocator_type&amp; alloc = allocator_type());\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;forward_list&gt;\n\nint main ()\n{\n  // constructors used in the same order as described above:\n\n  std::forward_list&lt;int&gt; first;                      // default: empty\n  std::forward_list&lt;int&gt; second (3,77);              // fill: 3 seventy-sevens\n  std::forward_list&lt;int&gt; third (second.begin(), second.end()); // range initialization\n  std::forward_list&lt;int&gt; fourth (third);            // copy constructor\n  std::forward_list&lt;int&gt; fifth (std::move(fourth));  // move ctor. (fourth wasted)\n  std::forward_list&lt;int&gt; sixth = {3, 52, 25, 90};    // initializer_list constructor\n\n  std::cout &lt;&lt; \"first:\" ; for (int&amp; x: first)  std::cout &lt;&lt; \" \" &lt;&lt; x; std::cout &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"second:\"; for (int&amp; x: second) std::cout &lt;&lt; \" \" &lt;&lt; x; std::cout &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"third:\";  for (int&amp; x: third)  std::cout &lt;&lt; \" \" &lt;&lt; x; std::cout &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"fourth:\"; for (int&amp; x: fourth) std::cout &lt;&lt; \" \" &lt;&lt; x; std::cout &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"fifth:\";  for (int&amp; x: fifth)  std::cout &lt;&lt; \" \" &lt;&lt; x; std::cout &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"sixth:\";  for (int&amp; x: sixth)  std::cout &lt;&lt; \" \" &lt;&lt; x; std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Possible output <pre><code>forward_list constructor examples:\nfirst:\nsecond: 77 77 77\nthird: 77 77 77\nfourth:\nfifth: 77 77 77\nsixth: 3 52 25 90\n</code></pre></p>","text":""},{"location":"STL/STL/#forward_listforward_list_1","title":"forward_list::~forward_list","text":""},{"location":"STL/STL/#forward_listbefore_begin","title":"forward_list::before_begin <p>\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u4e0d\u5e94\u88ab\u89e3\u9664\u5f15\u7528\uff1a\u5b83\u662f\u4e3a\u4e86\u7528\u4f5c\u6210\u5458\u51fd\u6570\u7684\u53c2\u6570emplace_after\uff0cinsert_after\uff0cerase_after\u6216splice_after\uff0c\u6307\u5b9a\u5e8f\u5217\uff0c\u5176\u4e2d\u6267\u884c\u8be5\u52a8\u4f5c\u7684\u4f4d\u7f6e\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002</p> <p><pre><code>      iterator before_begin() noexcept;\nconst_iterator before_begin() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;forward_list&gt;\n\nint main ()\n{\n  std::forward_list&lt;int&gt; mylist = {20, 30, 40, 50};\n\n  mylist.insert_after ( mylist.before_begin(), 11 );\n\n  std::cout &lt;&lt; \"mylist contains:\";\n  for ( int&amp; x: mylist ) std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>mylist contains: 11 20 30 40 50\n</code></pre></p>","text":""},{"location":"STL/STL/#forward_listcbefore_begin","title":"forward_list::cbefore_begin <p>\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e\u7684const_iterator\u3002</p> <p>\u4e00\u4e2a\u5e38\u91cf\u6027\u662f\u6307\u5411\u5e38\u91cf\u5185\u5bb9\u7684\u8fed\u4ee3\u5668\u3002\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ef\u4ee5\u589e\u52a0\u548c\u51cf\u5c11\uff08\u9664\u975e\u5b83\u672c\u8eab\u4e5f\u662fconst\uff09\uff0c\u5c31\u50cfforward_list::before_begin\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u4e00\u6837\uff0c\u4f46\u4e0d\u80fd\u7528\u6765\u4fee\u6539\u5b83\u6307\u5411\u7684\u5185\u5bb9\u3002</p> <p>\u8fd4\u56de\u7684\u4ef7\u503c\u4e0d\u5f97\u89e3\u9664\u5f15\u7528\u3002 <pre><code>const_iterator cbefore_begin() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;forward_list&gt;\n\nint main ()\n{\n  std::forward_list&lt;int&gt; mylist = {77, 2, 16};\n\n  mylist.insert_after ( mylist.cbefore_begin(), 19 );\n\n  std::cout &lt;&lt; \"mylist contains:\";\n  for ( int&amp; x: mylist ) std::cout &lt;&lt; ' ' &lt;&lt; x;\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>mylist contains: 19 77 2 16\n</code></pre></p>","text":""},{"location":"STL/STL/#list","title":"list","text":""},{"location":"STL/STL/#stack","title":"stack","text":""},{"location":"STL/STL/#queue","title":"queue","text":""},{"location":"STL/STL/#priority_queue","title":"priority_queue","text":""},{"location":"STL/STL/#set","title":"set","text":""},{"location":"STL/STL/#multiset","title":"multiset","text":""},{"location":"STL/STL/#map","title":"map","text":"<p>map \u662f\u5173\u8054\u5bb9\u5668\uff0c\u6309\u7167\u7279\u5b9a\u987a\u5e8f\u5b58\u50a8\u7531 key value (\u952e\u503c) \u548c mapped value (\u6620\u5c04\u503c) \u7ec4\u5408\u5f62\u6210\u7684\u5143\u7d20\u3002</p> <p>\u5728\u6620\u5c04\u4e2d\uff0c\u952e\u503c\u901a\u5e38\u7528\u4e8e\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u548c\u552f\u4e00\u6807\u8bc6\uff0c\u800c\u6620\u5c04\u7684\u503c\u5b58\u50a8\u4e0e\u6b64\u952e\u5173\u8054\u7684\u5185\u5bb9\u3002\u8be5\u7c7b\u578b\u7684\u952e\u548c\u6620\u5c04\u7684\u503c\u53ef\u80fd\u4e0d\u540c\uff0c\u5e76\u4e14\u5728\u90e8\u4ef6\u7c7b\u578b\u88ab\u5206\u7ec4\u5728\u4e00\u8d77VALUE_TYPE\uff0c\u8fd9\u662f\u4e00\u79cd\u5bf9\u7c7b\u578b\u7ed3\u5408\u4e24\u79cd\uff1a</p> <pre><code>typedef pair&lt;const Key, T&gt; value_type;\n</code></pre> <p>\u5728\u5185\u90e8\uff0c\u6620\u5c04\u4e2d\u7684\u5143\u7d20\u603b\u662f\u6309\u7167\u7531\u5176\u5185\u90e8\u6bd4\u8f83\u5bf9\u8c61\uff08\u6bd4\u8f83\u7c7b\u578b\uff09\u6307\u793a\u7684\u7279\u5b9a\u7684\u4e25\u683c\u5f31\u6392\u5e8f\u6807\u51c6\u6309\u952e\u6392\u5e8f\u3002\u6620\u5c04\u5bb9\u5668\u901a\u5e38\u6bd4unordered_map\u5bb9\u5668\u6162\uff0c\u4ee5\u901a\u8fc7\u5b83\u4eec\u7684\u952e\u6765\u8bbf\u95ee\u5404\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u5b83\u4eec\u5141\u8bb8\u57fa\u4e8e\u5b83\u4eec\u7684\u987a\u5e8f\u5bf9\u5b50\u96c6\u8fdb\u884c\u76f4\u63a5\u8fed\u4ee3\u3002 \u5728\u8be5\u6620\u5c04\u503c\u5730\u56fe\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4f7f\u7528\u5176\u76f8\u5e94\u7684\u952e\u6765\u8bbf\u95ee\u62ec\u53f7\u8fd0\u7b97\u7b26\uff08\uff08\u64cd\u4f5c\u7b26[] \uff09\u3002 \u6620\u5c04\u901a\u5e38\u5982\u5b9e\u65bd</p> <pre><code>template &lt; class Key,                                     // map::key_type\n           class T,                                       // map::mapped_type\n           class Compare = less&lt;Key&gt;,                     // map::key_compare\n           class Alloc = allocator&lt;pair&lt;const Key,T&gt; &gt;    // map::allocator_type\n           &gt; class map;\n</code></pre>"},{"location":"STL/STL/#mapmap","title":"map::map <p>\u6784\u9020\u4e00\u4e2a\u6620\u5c04\u5bb9\u5668\u5bf9\u8c61\uff0c\u6839\u636e\u6240\u4f7f\u7528\u7684\u6784\u9020\u5668\u7248\u672c\u521d\u59cb\u5316\u5176\u5185\u5bb9\uff1a</p> <p>\uff081\uff09\u7a7a\u5bb9\u5668\u6784\u9020\u51fd\u6570\uff08\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff09</p> <p>\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u5bb9\u5668\uff0c\u6ca1\u6709\u5143\u7d20\u3002</p> <p>\uff082\uff09\u8303\u56f4\u6784\u9020\u51fd\u6570</p> <p>\u6784\u9020\u5177\u6709\u4e00\u6837\u591a\u7684\u5143\u7d20\u7684\u8303\u56f4\u5185\u7684\u5bb9\u5668[\u7b2c\u4e00\uff0c\u6700\u540e\u4e00\u4e2a\uff09\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u4ef6\u5e03\u8bbe\u6784\u9020\u7684\u4ece\u5728\u8be5\u8303\u56f4\u5185\u5b83\u7684\u76f8\u5e94\u7684\u5143\u4ef6\u3002</p> <p>\uff083\uff09\u590d\u5236\u6784\u9020\u51fd\u6570\uff08\u5e76\u7528\u5206\u914d\u5668\u590d\u5236\uff09</p> <p>\u4f7f\u7528x\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u526f\u672c\u6784\u9020\u4e00\u4e2a\u5bb9\u5668\u3002</p> <p>\uff084\uff09\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08\u5e76\u4e0e\u5206\u914d\u5668\u4e00\u8d77\u79fb\u52a8\uff09</p> <p>\u6784\u9020\u4e00\u4e2a\u83b7\u53d6x\u5143\u7d20\u7684\u5bb9\u5668\u3002 \u5982\u679c\u6307\u5b9a\u4e86alloc\u5e76\u4e14\u4e0ex\u7684\u5206\u914d\u5668\u4e0d\u540c\uff0c\u90a3\u4e48\u5143\u7d20\u5c06\u88ab\u79fb\u52a8\u3002\u5426\u5219\uff0c\u6ca1\u6709\u6784\u5efa\u5143\u7d20\uff08\u4ed6\u4eec\u7684\u6240\u6709\u6743\u76f4\u63a5\u8f6c\u79fb\uff09\u3002 x\u4fdd\u6301\u672a\u6307\u5b9a\u4f46\u6709\u6548\u7684\u72b6\u6001\u3002</p> <p>\uff085\uff09\u521d\u59cb\u5316\u5217\u8868\u6784\u9020\u51fd\u6570</p> <p>\u7528il\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u526f\u672c\u6784\u9020\u4e00\u4e2a\u5bb9\u5668\u3002</p> <p><pre><code>empty (1)   \nexplicit map (const key_compare&amp; comp = key_compare(),\n              const allocator_type&amp; alloc = allocator_type());\nexplicit map (const allocator_type&amp; alloc);\nrange (2)   \ntemplate &lt;class InputIterator&gt;\n  map (InputIterator first, InputIterator last,\n       const key_compare&amp; comp = key_compare(),\n       const allocator_type&amp; = allocator_type());\ncopy (3)    \nmap (const map&amp; x);\nmap (const map&amp; x, const allocator_type&amp; alloc);\nmove (4)    \nmap (map&amp;&amp; x);\nmap (map&amp;&amp; x, const allocator_type&amp; alloc);\ninitializer list (5)    \nmap (initializer_list&lt;value_type&gt; il,\n     const key_compare&amp; comp = key_compare(),\n     const allocator_type&amp; alloc = allocator_type());\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nbool fncomp (char lhs, char rhs) {return lhs&lt;rhs;}\n\nstruct classcomp {\n  bool operator() (const char&amp; lhs, const char&amp; rhs) const\n  {return lhs&lt;rhs;}\n};\n\nint main ()\n{\n  std::map&lt;char,int&gt; first;\n\n  first['a']=10;\n  first['b']=30;\n  first['c']=50;\n  first['d']=70;\n\n  std::map&lt;char,int&gt; second (first.begin(),first.end());\n\n  std::map&lt;char,int&gt; third (second);\n\n  std::map&lt;char,int,classcomp&gt; fourth;                 // class as Compare\n\n  bool(*fn_pt)(char,char) = fncomp;\n  std::map&lt;char,int,bool(*)(char,char)&gt; fifth (fn_pt); // function pointer as Compare\n\n  return 0;\n}\n</code></pre></p>","text":""},{"location":"STL/STL/#mapbegin","title":"map::begin <p>\u8fd4\u56de\u5f15\u7528map\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u7531\u4e8emap\u5bb9\u5668\u59cb\u7ec8\u4fdd\u6301\u5176\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u5f00\u59cb\u6307\u5411\u9075\u5faa\u5bb9\u5668\u6392\u5e8f\u6807\u51c6\u7684\u5143\u7d20\u3002</p> <p>\u5982\u679c\u5bb9\u5668\u662f\u7a7a\u7684\uff0c\u5219\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u503c\u4e0d\u5e94\u88ab\u89e3\u9664\u5f15\u7528\u3002 <pre><code>      iterator begin() noexcept;\nconst_iterator begin() const noexcept;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n\n  mymap['b'] = 100;\n  mymap['a'] = 200;\n  mymap['c'] = 300;\n\n  // show content:\n  for (std::map&lt;char,int&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)\n    std::cout &lt;&lt; it-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; it-&gt;second &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>a =&gt; 200\nb =&gt; 100\nc =&gt; 300\n</code></pre></p>","text":""},{"location":"STL/STL/#mapkey_comp","title":"map::key_comp <p>\u8fd4\u56de\u5bb9\u5668\u7528\u4e8e\u6bd4\u8f83\u952e\u7684\u6bd4\u8f83\u5bf9\u8c61\u7684\u526f\u672c\u3002 </p> <p><pre><code>key_compare key_comp() const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n\n  std::map&lt;char,int&gt;::key_compare mycomp = mymap.key_comp();\n\n  mymap['a']=100;\n  mymap['b']=200;\n  mymap['c']=300;\n\n  std::cout &lt;&lt; \"mymap contains:\\n\";\n\n  char highest = mymap.rbegin()-&gt;first;     // key value of last element\n\n  std::map&lt;char,int&gt;::iterator it = mymap.begin();\n  do {\n    std::cout &lt;&lt; it-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; it-&gt;second &lt;&lt; '\\n';\n  } while ( mycomp((*it++).first, highest) );\n\n  std::cout &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>mymap contains:\na =&gt; 100\nb =&gt; 200\nc =&gt; 300\n</code></pre></p>","text":""},{"location":"STL/STL/#mapvalue_comp","title":"map::value_comp <p>\u8fd4\u56de\u53ef\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u5bf9\u8c61\uff0c\u4ee5\u83b7\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u952e\u662f\u5426\u5728\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e4b\u524d\u3002</p> <p><pre><code>value_compare value_comp() const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n\n  mymap['x']=1001;\n  mymap['y']=2002;\n  mymap['z']=3003;\n\n  std::cout &lt;&lt; \"mymap contains:\\n\";\n\n  std::pair&lt;char,int&gt; highest = *mymap.rbegin();          // last element\n\n  std::map&lt;char,int&gt;::iterator it = mymap.begin();\n  do {\n    std::cout &lt;&lt; it-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; it-&gt;second &lt;&lt; '\\n';\n  } while ( mymap.value_comp()(*it++, highest) );\n\n  return 0;\n}\n</code></pre> Output <pre><code>mymap contains:\nx =&gt; 1001\ny =&gt; 2002\nz =&gt; 3003\n</code></pre></p>","text":""},{"location":"STL/STL/#mapfind","title":"map::find <p>\u5728\u5bb9\u5668\u4e2d\u641c\u7d22\u5177\u6709\u7b49\u4e8ek\u7684\u952e\u7684\u5143\u7d20\uff0c\u5982\u679c\u627e\u5230\u5219\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5426\u5219\u8fd4\u56demap::end\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u5982\u679c\u5bb9\u5668\u7684\u6bd4\u8f83\u5bf9\u8c61\u81ea\u53cd\u5730\u8fd4\u56de\u5047\uff08\u5373\uff0c\u4e0d\u7ba1\u5143\u7d20\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u987a\u5e8f\uff09\uff0c\u5219\u4e24\u4e2akey\u88ab\u8ba4\u4e3a\u662f\u7b49\u540c\u7684\u3002 </p> <p>\u53e6\u4e00\u4e2a\u6210\u5458\u51fd\u6570map::count\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u4e00\u4e2a\u7279\u5b9a\u7684\u952e\u662f\u5426\u5b58\u5728\u3002 <pre><code>      iterator find (const key_type&amp; k);\nconst_iterator find (const key_type&amp; k) const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n  std::map&lt;char,int&gt;::iterator it;\n\n  mymap['a']=50;\n  mymap['b']=100;\n  mymap['c']=150;\n  mymap['d']=200;\n\n  it = mymap.find('b');\n  if (it != mymap.end())\n    mymap.erase (it);\n\n  // print content:\n  std::cout &lt;&lt; \"elements in mymap:\" &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"a =&gt; \" &lt;&lt; mymap.find('a')-&gt;second &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"c =&gt; \" &lt;&lt; mymap.find('c')-&gt;second &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"d =&gt; \" &lt;&lt; mymap.find('d')-&gt;second &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>elements in mymap:\na =&gt; 50\nc =&gt; 150\nd =&gt; 200\n</code></pre></p>","text":""},{"location":"STL/STL/#mapcount","title":"map::count <p>\u5728\u5bb9\u5668\u4e2d\u641c\u7d22\u5177\u6709\u7b49\u4e8ek\u7684\u952e\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u5339\u914d\u7684\u6570\u91cf\u3002</p> <p>\u7531\u4e8e\u5730\u56fe\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\uff0c\u56e0\u6b64\u8be5\u51fd\u6570\u53ea\u80fd\u8fd4\u56de1\uff08\u5982\u679c\u627e\u5230\u8be5\u5143\u7d20\uff09\u6216\u8fd4\u56de\u96f6\uff08\u5426\u5219\uff09\u3002</p> <p>\u5982\u679c\u5bb9\u5668\u7684\u6bd4\u8f83\u5bf9\u8c61\u81ea\u53cd\u5730\u8fd4\u56de\u9519\u8bef\uff08\u5373\uff0c\u4e0d\u7ba1\u6309\u952e\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u987a\u5e8f\uff09\uff0c\u5219\u4e24\u4e2a\u952e\u88ab\u8ba4\u4e3a\u662f\u7b49\u540c\u7684\u3002 <pre><code>size_type count (const key_type&amp; k) const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n  char c;\n\n  mymap ['a']=101;\n  mymap ['c']=202;\n  mymap ['f']=303;\n\n  for (c='a'; c&lt;'h'; c++)\n  {\n    std::cout &lt;&lt; c;\n    if (mymap.count(c)&gt;0)\n      std::cout &lt;&lt; \" is an element of mymap.\\n\";\n    else \n      std::cout &lt;&lt; \" is not an element of mymap.\\n\";\n  }\n\n  return 0;\n}\n</code></pre> Output <pre><code>a is an element of mymap.\nb is not an element of mymap.\nc is an element of mymap.\nd is not an element of mymap.\ne is not an element of mymap.\nf is an element of mymap.\ng is not an element of mymap.\n</code></pre></p>","text":""},{"location":"STL/STL/#maplower_bound","title":"map::lower_bound <p>\u5c06\u8fed\u4ee3\u5668\u8fd4\u56de\u5230\u4e0b\u9650</p> <p>\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u8be5\u5143\u7d20\u7684\u952e\u4e0d\u4f1a\u5728k\u4e4b\u524d\u51fa\u73b0\uff08\u5373\uff0c\u5b83\u662f\u7b49\u4ef7\u7684\u6216\u8005\u5728\u5176\u540e\uff09\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528\u5176\u5185\u90e8\u6bd4\u8f83\u5bf9\u8c61\uff08key_comp\uff09\u6765\u786e\u5b9a\u8fd9\u4e00\u70b9\uff0c\u5c06\u8fed\u4ee3\u5668\u8fd4\u56de\u5230key_comp\uff08element_key\uff0ck\uff09\u5c06\u8fd4\u56defalse\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u5982\u679cmap\u7c7b\u7528\u9ed8\u8ba4\u7684\u6bd4\u8f83\u7c7b\u578b\uff08less\uff09\u5b9e\u4f8b\u5316\uff0c\u5219\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5230\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u952e\u4e0d\u5c0f\u4e8ek\u3002</p> <p>\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6210\u5458\u51fd\u6570upper_bound\u5177\u6709\u76f8\u540c\u7684\u884c\u4e3alower_bound\uff0c\u9664\u975e\u6620\u5c04\u5305\u542b\u4e00\u4e2akey\u503c\u7b49\u4e8ek\u7684\u5143\u7d20\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0clower_bound\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u800cupper_bound\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 <pre><code>      iterator lower_bound (const key_type&amp; k);\nconst_iterator lower_bound (const key_type&amp; k) const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n  std::map&lt;char,int&gt;::iterator itlow,itup;\n\n  mymap['a']=20;\n  mymap['b']=40;\n  mymap['c']=60;\n  mymap['d']=80;\n  mymap['e']=100;\n\n  itlow=mymap.lower_bound ('b');  // itlow points to b\n  itup=mymap.upper_bound ('d');   // itup points to e (not d!)\n\n  mymap.erase(itlow,itup);        // erases [itlow,itup)\n\n  // print content:\n  for (std::map&lt;char,int&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)\n    std::cout &lt;&lt; it-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; it-&gt;second &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>a =&gt; 20\ne =&gt; 100\n</code></pre></p>","text":""},{"location":"STL/STL/#mapupper_bound","title":"map::upper_bound <p>\u5c06\u8fed\u4ee3\u5668\u8fd4\u56de\u5230\u4e0a\u9650</p> <p>\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u7684\u5173\u952e\u5b57\u88ab\u8ba4\u4e3a\u662f\u5728k\u4e4b\u540e\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528\u5176\u5185\u90e8\u6bd4\u8f83\u5bf9\u8c61\uff08key_comp\uff09\u6765\u786e\u5b9a\u8fd9\u4e00\u70b9\uff0c\u5c06\u8fed\u4ee3\u5668\u8fd4\u56de\u5230key_comp\uff08k\uff0celement_key\uff09\u5c06\u8fd4\u56detrue\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u5982\u679cmap\u7c7b\u7528\u9ed8\u8ba4\u7684\u6bd4\u8f83\u7c7b\u578b\uff08less\uff09\u5b9e\u4f8b\u5316\uff0c\u5219\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5230\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u952e\u5927\u4e8ek\u3002</p> <p>\u7c7b\u4f3c\u7684\u6210\u5458\u51fd\u6570lower_bound\u5177\u6709\u4e0eupper_bound\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u9664\u4e86map\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u952e\u503c\u7b49\u4e8ek\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0clower_bound\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u800cupper_bound\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p><pre><code>      iterator upper_bound (const key_type&amp; k);\nconst_iterator upper_bound (const key_type&amp; k) const;\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n  std::map&lt;char,int&gt;::iterator itlow,itup;\n\n  mymap['a']=20;\n  mymap['b']=40;\n  mymap['c']=60;\n  mymap['d']=80;\n  mymap['e']=100;\n\n  itlow=mymap.lower_bound ('b');  // itlow points to b\n  itup=mymap.upper_bound ('d');   // itup points to e (not d!)\n\n  mymap.erase(itlow,itup);        // erases [itlow,itup)\n\n  // print content:\n  for (std::map&lt;char,int&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)\n    std::cout &lt;&lt; it-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; it-&gt;second &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>a =&gt; 20\ne =&gt; 100\n</code></pre></p>","text":""},{"location":"STL/STL/#mapequal_range","title":"map::equal_range <p>\u83b7\u53d6\u76f8\u540c\u5143\u7d20\u7684\u8303\u56f4</p> <p>\u8fd4\u56de\u5305\u542b\u5bb9\u5668\u4e2d\u6240\u6709\u5177\u6709\u4e0ek\u7b49\u4ef7\u7684\u952e\u7684\u5143\u7d20\u7684\u8303\u56f4\u8fb9\u754c\u3002 \u7531\u4e8e\u5730\u56fe\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u5177\u6709\u552f\u4e00\u952e\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u8303\u56f4\u6700\u591a\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u3002 </p> <p>\u5982\u679c\u6ca1\u6709\u627e\u5230\u5339\u914d\uff0c\u5219\u8fd4\u56de\u7684\u8303\u56f4\u5177\u6709\u96f6\u7684\u957f\u5ea6\uff0c\u4e0e\u4e24\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u5177\u6709\u8003\u8651\u53bb\u540e\u4e00\u4e2a\u5bc6\u94a5\u5bf9\u6240\u8ff0\u7b2c\u4e00\u5143\u4ef6\u0137\u6839\u636e\u5bb9\u5668\u7684\u5185\u90e8\u6bd4\u8f83\u5bf9\u8c61\uff08key_comp\uff09\u3002\u5982\u679c\u5bb9\u5668\u7684\u6bd4\u8f83\u5bf9\u8c61\u8fd4\u56defalse\uff0c\u5219\u4e24\u4e2a\u952e\u88ab\u8ba4\u4e3a\u662f\u7b49\u4ef7\u7684\u3002</p> <p><pre><code>pair&lt;const_iterator,const_iterator&gt; equal_range (const key_type&amp; k) const;\npair&lt;iterator,iterator&gt;             equal_range (const key_type&amp; k);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main ()\n{\n  std::map&lt;char,int&gt; mymap;\n\n  mymap['a']=10;\n  mymap['b']=20;\n  mymap['c']=30;\n\n  std::pair&lt;std::map&lt;char,int&gt;::iterator,std::map&lt;char,int&gt;::iterator&gt; ret;\n  ret = mymap.equal_range('b');\n\n  std::cout &lt;&lt; \"lower bound points to: \";\n  std::cout &lt;&lt; ret.first-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; ret.first-&gt;second &lt;&lt; '\\n';\n\n  std::cout &lt;&lt; \"upper bound points to: \";\n  std::cout &lt;&lt; ret.second-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; ret.second-&gt;second &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>lower bound points to: 'b' =&gt; 20\nupper bound points to: 'c' =&gt; 30\n</code></pre></p>","text":""},{"location":"STL/STL/#multimap","title":"multimap","text":""},{"location":"STL/STL/#unordered-containerunordered_setunordered_multisetunordered_mapunordered_multimap","title":"\u65e0\u5e8f\u5bb9\u5668\uff08Unordered Container\uff09\uff1aunordered_set\u3001unordered_multiset\u3001unordered_map\u3001unordered_multimap","text":"<p>\u5305\u62ec\uff1a</p> <ul> <li>unordered_set</li> <li>unordered_multiset</li> <li>unordered_map</li> <li>unordered_multimap</li> </ul> <p>\u90fd\u662f\u4ee5\u54c8\u5e0c\u8868\u5b9e\u73b0\u7684\u3002</p> <p></p> <p>unordered_set\u3001unodered_multiset\u7ed3\u6784\uff1a</p> <p></p> <p>unordered_map\u3001unodered_multimap\u7ed3\u6784\uff1a</p> <p></p>"},{"location":"STL/STL/#unordered_set","title":"unordered_set","text":""},{"location":"STL/STL/#unordered_multiset","title":"unordered_multiset","text":""},{"location":"STL/STL/#unordered_map","title":"unordered_map","text":""},{"location":"STL/STL/#unordered_multimap","title":"unordered_multimap","text":""},{"location":"STL/STL/#tuple","title":"tuple","text":"<p>\u5143\u7ec4\u662f\u4e00\u4e2a\u80fd\u591f\u5bb9\u7eb3\u5143\u7d20\u96c6\u5408\u7684\u5bf9\u8c61\u3002\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002</p> <pre><code>template &lt;class... Types&gt; class tuple;\n</code></pre> <p>Example <pre><code>#include &lt;iostream&gt;     // std::cout\n#include &lt;tuple&gt;        // std::tuple, std::get, std::tie, std::ignore\n\nint main ()\n{\n  std::tuple&lt;int,char&gt; foo (10,'x');\n  auto bar = std::make_tuple (\"test\", 3.1, 14, 'y');\n\n  std::get&lt;2&gt;(bar) = 100;                                    // access element\n\n  int myint; char mychar;\n\n  std::tie (myint, mychar) = foo;                            // unpack elements\n  std::tie (std::ignore, std::ignore, myint, mychar) = bar;  // unpack (with ignore)\n\n  mychar = std::get&lt;3&gt;(bar);\n\n  std::get&lt;0&gt;(foo) = std::get&lt;2&gt;(bar);\n  std::get&lt;1&gt;(foo) = mychar;\n\n  std::cout &lt;&lt; \"foo contains: \";\n  std::cout &lt;&lt; std::get&lt;0&gt;(foo) &lt;&lt; ' ';\n  std::cout &lt;&lt; std::get&lt;1&gt;(foo) &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>foo contains: 100 y\n</code></pre></p>"},{"location":"STL/STL/#tupletuple","title":"tuple::tuple <p>\u6784\u5efa\u4e00\u4e2a tuple\uff08\u5143\u7ec4\uff09\u5bf9\u8c61\u3002</p> <p>\u8fd9\u6d89\u53ca\u5355\u72ec\u6784\u5efa\u5176\u5143\u7d20\uff0c\u521d\u59cb\u5316\u53d6\u51b3\u4e8e\u8c03\u7528\u7684\u6784\u9020\u51fd\u6570\u5f62\u5f0f\uff1a</p> <p>\uff081\uff09\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570</p> <p>\u6784\u5efa\u4e00\u4e2a \u5143\u7ec4\u5bf9\u8c61\u7684\u5143\u7d20\u503c\u521d\u59cb\u5316\u3002</p> <p>\uff082\uff09\u590d\u5236/\u79fb\u52a8\u6784\u9020\u51fd\u6570</p> <p>\u8be5\u5bf9\u8c61\u4f7f\u7528tpl\u7684\u5185\u5bb9\u8fdb\u884c\u521d\u59cb\u5316 \u5143\u7ec4\u76ee\u7684\u3002tpl \u7684\u76f8\u5e94\u5143\u7d20\u88ab\u4f20\u9012\u7ed9\u6bcf\u4e2a\u5143\u7d20\u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>\uff083\uff09\u9690\u5f0f\u8f6c\u6362\u6784\u9020\u51fd\u6570</p> <p>\u540c\u4e0a\u3002tpl\u4e2d\u7684 \u6240\u6709\u7c7b\u578b\u90fd\u53ef\u4ee5\u9690\u542b\u5730\u8f6c\u6362\u4e3a\u6784\u9020\u4e2d\u5b83\u4eec\u5404\u81ea\u5143\u7d20\u7684\u7c7b\u578b\u5143\u7ec4 \u76ee\u7684\u3002</p> <p>\uff084\uff09\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570 \u7528elems\u4e2d\u7684\u76f8\u5e94\u5143\u7d20\u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u3002elems \u7684\u76f8\u5e94\u5143\u7d20\u88ab\u4f20\u9012\u7ed9\u6bcf\u4e2a\u5143\u7d20\u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>\uff085\uff09\u5bf9\u8f6c\u6362\u6784\u9020\u51fd\u6570</p> <p>\u8be5\u5bf9\u8c61\u6709\u4e24\u4e2a\u5bf9\u5e94\u4e8epr.first\u548c\u7684\u5143\u7d20pr.second\u3002PR\u4e2d\u7684\u6240\u6709\u7c7b\u578b\u90fd\u5e94\u8be5\u9690\u542b\u5730\u8f6c\u6362\u4e3a\u5176\u4e2d\u5404\u81ea\u5143\u7d20\u7684\u7c7b\u578b\u5143\u7ec4 \u76ee\u7684\u3002</p> <p>\uff086\uff09\u5206\u914d\u5668\u7248\u672c</p> <p>\u548c\u4e0a\u9762\u7684\u7248\u672c\u4e00\u6837\uff0c\u9664\u4e86\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4f7f\u7528allocator alloc\u6784\u9020\u7684\u3002</p> <p><pre><code>default (1) \nconstexpr tuple();\ncopy / move (2) \ntuple (const tuple&amp; tpl) = default;\ntuple (tuple&amp;&amp; tpl) = default;\nimplicit conversion (3) \ntemplate &lt;class... UTypes&gt;\n  tuple (const tuple&lt;UTypes...&gt;&amp; tpl);\ntemplate &lt;class... UTypes&gt;\n  tuple (tuple&lt;UTypes...&gt;&amp;&amp; tpl);\ninitialization (4)  \nexplicit tuple (const Types&amp;... elems);\ntemplate &lt;class... UTypes&gt;\n  explicit tuple (UTypes&amp;&amp;... elems);\nconversion from pair (5)    \ntemplate &lt;class U1, class U2&gt;\n  tuple (const pair&lt;U1,U2&gt;&amp; pr);\ntemplate &lt;class U1, class U2&gt;\n  tuple (pair&lt;U1,U2&gt;&amp;&amp; pr);\nallocator (6)   \ntemplate&lt;class Alloc&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc);\ntemplate&lt;class Alloc&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, const tuple&amp; tpl);\ntemplate&lt;class Alloc&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, tuple&amp;&amp; tpl);\ntemplate&lt;class Alloc,class... UTypes&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, const tuple&lt;UTypes...&gt;&amp; tpl);\ntemplate&lt;class Alloc, class... UTypes&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, tuple&lt;UTypes...&gt;&amp;&amp; tpl);\ntemplate&lt;class Alloc&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, const Types&amp;... elems);\ntemplate&lt;class Alloc, class... UTypes&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, UTypes&amp;&amp;... elems);\ntemplate&lt;class Alloc, class U1, class U2&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, const pair&lt;U1,U2&gt;&amp; pr);\ntemplate&lt;class Alloc, class U1, class U2&gt;\n  tuple (allocator_arg_t aa, const Alloc&amp; alloc, pair&lt;U1,U2&gt;&amp;&amp; pr);\n</code></pre> Example <pre><code>#include &lt;iostream&gt;     // std::cout\n#include &lt;utility&gt;      // std::make_pair\n#include &lt;tuple&gt;        // std::tuple, std::make_tuple, std::get\n\nint main ()\n{\n  std::tuple&lt;int,char&gt; first;                             // default\n  std::tuple&lt;int,char&gt; second (first);                    // copy\n  std::tuple&lt;int,char&gt; third (std::make_tuple(20,'b'));   // move\n  std::tuple&lt;long,char&gt; fourth (third);                   // implicit conversion\n  std::tuple&lt;int,char&gt; fifth (10,'a');                    // initialization\n  std::tuple&lt;int,char&gt; sixth (std::make_pair(30,'c'));    // from pair / move\n\n  std::cout &lt;&lt; \"sixth contains: \" &lt;&lt; std::get&lt;0&gt;(sixth);\n  std::cout &lt;&lt; \" and \" &lt;&lt; std::get&lt;1&gt;(sixth) &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> Output <pre><code>sixth contains: 30 and c\n</code></pre></p>","text":""},{"location":"STL/STL/#pair","title":"pair","text":"<p>\u8fd9\u4e2a\u7c7b\u628a\u4e00\u5bf9\u503c\uff08values\uff09\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u4e9b\u503c\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff08T1 \u548c T2\uff09\u3002\u6bcf\u4e2a\u503c\u53ef\u4ee5\u88ab\u516c\u6709\u7684\u6210\u5458\u53d8\u91cffirst\u3001second\u8bbf\u95ee\u3002</p> <p>pair\u662ftuple\uff08\u5143\u7ec4\uff09\u7684\u4e00\u4e2a\u7279\u4f8b\u3002</p> <p>pair\u7684\u5b9e\u73b0\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u4e3b\u8981\u7684\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\u662ffirst second \u56e0\u4e3a\u662f\u4f7f\u7528struct\u4e0d\u662fclass\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528pair\u7684\u6210\u5458\u53d8\u91cf\u3002</p> <p>\u5e94\u7528\uff1a</p> <ul> <li>\u53ef\u4ee5\u5c06\u4e24\u4e2a\u7c7b\u578b\u6570\u636e\u7ec4\u5408\u6210\u4e00\u4e2a\u5982map <li>\u5f53\u67d0\u4e2a\u51fd\u6570\u9700\u8981\u4e24\u4e2a\u8fd4\u56de\u503c\u65f6</li> <pre><code>template &lt;class T1, class T2&gt; struct pair;\n</code></pre>"},{"location":"STL/STL/#pairpair","title":"pair::pair <p>\u6784\u5efa\u4e00\u4e2apair\u5bf9\u8c61\u3002</p> <p>\u8fd9\u6d89\u53ca\u5230\u5355\u72ec\u6784\u5efa\u5b83\u7684\u4e24\u4e2a\u7ec4\u4ef6\u5bf9\u8c61\uff0c\u521d\u59cb\u5316\u4f9d\u8d56\u4e8e\u8c03\u7528\u7684\u6784\u9020\u5668\u5f62\u5f0f\uff1a</p> <p>\uff081\uff09\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570</p> <p>\u6784\u5efa\u4e00\u4e2a \u5bf9\u5bf9\u8c61\u7684\u5143\u7d20\u503c\u521d\u59cb\u5316\u3002</p> <p>\uff082\uff09\u590d\u5236/\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08\u548c\u9690\u5f0f\u8f6c\u6362\uff09</p> <p>\u8be5\u5bf9\u8c61\u88ab\u521d\u59cb\u5316\u4e3apr\u7684\u5185\u5bb9 \u5bf9\u76ee\u7684\u3002pr \u7684\u76f8\u5e94\u6210\u5458\u88ab\u4f20\u9012\u7ed9\u6bcf\u4e2a\u6210\u5458\u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>\uff083\uff09\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570</p> <p>\u4f1a\u5458 \u7b2c\u4e00\u662f\u7531\u4e00\u4e2a\u548c\u6210\u5458\u6784\u5efa\u7684\u7b2c\u4e8c\u4e0eb\u3002</p> <p>\uff084\uff09\u5206\u6bb5\u6784\u9020</p> <p>\u6784\u9020\u6210\u5458 first  \u548c second  \u5230\u4f4d\uff0c\u4f20\u9012\u5143\u7d20first_args \u4f5c\u4e3a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570 first\uff0c\u548c\u5143\u7d20 second_args \u5230\u7684\u6784\u9020\u51fd\u6570 second \u3002</p> <pre><code>default (1) \nconstexpr pair();\ncopy / move (2) \ntemplate&lt;class U, class V&gt; pair (const pair&lt;U,V&gt;&amp; pr);\ntemplate&lt;class U, class V&gt; pair (pair&lt;U,V&gt;&amp;&amp; pr);\npair (const pair&amp; pr) = default;\npair (pair&amp;&amp; pr) = default;\ninitialization (3)  \npair (const first_type&amp; a, const second_type&amp; b);\ntemplate&lt;class U, class V&gt; pair (U&amp;&amp; a, V&amp;&amp; b);\npiecewise (4)   \ntemplate &lt;class... Args1, class... Args2&gt;\n  pair (piecewise_construct_t pwc, tuple&lt;Args1...&gt; first_args,\n                                   tuple&lt;Args2...&gt; second_args);\n</code></pre> <p>Example</p> <p><pre><code>#include &lt;utility&gt;      // std::pair, std::make_pair\n#include &lt;string&gt;       // std::string\n#include &lt;iostream&gt;     // std::cout\n\nint main () {\n  std::pair &lt;std::string,double&gt; product1;                     // default constructor\n  std::pair &lt;std::string,double&gt; product2 (\"tomatoes\",2.30);   // value init\n  std::pair &lt;std::string,double&gt; product3 (product2);          // copy constructor\n\n  product1 = std::make_pair(std::string(\"lightbulbs\"),0.99);   // using make_pair (move)\n\n  product2.first = \"shoes\";                  // the type of first is string\n  product2.second = 39.90;                   // the type of second is double\n\n  std::cout &lt;&lt; \"The price of \" &lt;&lt; product1.first &lt;&lt; \" is $\" &lt;&lt; product1.second &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"The price of \" &lt;&lt; product2.first &lt;&lt; \" is $\" &lt;&lt; product2.second &lt;&lt; '\\n';\n  std::cout &lt;&lt; \"The price of \" &lt;&lt; product3.first &lt;&lt; \" is $\" &lt;&lt; product3.second &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> Output <pre><code>The price of lightbulbs is $0.99\nThe price of shoes is $39.9\nThe price of tomatoes is $2.3\n</code></pre></p>","text":""},{"location":"STL/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/","title":"\u516d\u4e2a\u7ec4\u4ef6","text":"<p>\u5bb9\u5668\u3001\u7b97\u6cd5\u3001\u8fed\u4ee3\u5668\u3001\u4eff\u51fd\u6570\u3001\u9002\u914d\u5668\uff08\u914d\u63a5\u5668\uff09\u3001\u7a7a\u95f4\u914d\u7f6e\u5668\u3002</p> <ul> <li>\u5bb9\u5668\uff1a\u5404\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5982vector,list,deque,set,map\u7b49\uff0c\u7528\u6765\u5b58\u50a8\u6570\u636e</li> <li>\u7b97\u6cd5\uff1a\u5404\u79cd\u7b97\u6cd5\uff0c\u5982sort,find,copy,for_each\u3002</li> <li>\u8fed\u4ee3\u5668\uff1a\u626e\u6f14\u5bb9\u5668\u4e0e\u7b97\u6cd5\u4e4b\u95f4\u7684\u80f6\u5408\u5242\uff0c\u5171\u6709\u4e94\u79cd\u7c7b\u578b\uff0c\u4ece\u5b9e\u73b0\u89d2\u5ea6\u6765\u770b\uff0c\u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u5c06operator*,operator-&gt; , operator++,operator\u2013\u7b49\u6307\u9488\u76f8\u5173\u64cd\u4f5c\u4e88\u4ee5\u91cd\u8f7d\u7684class template. \u6240\u6709STL\u5bb9\u5668\u90fd\u9644\u5e26\u6709\u81ea\u5df1\u4e13\u5c5e\u7684\u8fed\u4ee3\u5668\uff0c\u53ea\u6709\u5bb9\u5668\u7684\u8bbe\u8ba1\u8005\u624d\u77e5\u9053\u5982\u4f55\u904d\u5386\u81ea\u5df1\u7684\u5143\u7d20\u3002\u539f\u751f\u6307\u9488(native pointer)\u4e5f\u662f\u4e00\u79cd\u8fed\u4ee3\u5668\u3002</li> <li>\u4eff\u51fd\u6570\uff1a\u884c\u4e3a\u7c7b\u4f3c\u51fd\u6570\uff0c\u53ef\u4f5c\u4e3a\u7b97\u6cd5\u7684\u67d0\u79cd\u7b56\u7565\u3002\u4ece\u5b9e\u73b0\u89d2\u5ea6\u6765\u770b\uff0c\u4eff\u51fd\u6570\u662f\u4e00\u79cd\u91cd\u8f7d\u4e86operator()\u7684class \u6216\u8005class template</li> <li>\u9002\u914d\u5668\uff08\u914d\u63a5\u5668\uff09\uff1a\u4e00\u79cd\u7528\u6765\u4fee\u9970\u5bb9\u5668\u6216\u8005\u4eff\u51fd\u6570\u6216\u8fed\u4ee3\u5668\u63a5\u53e3\u7684\u4e1c\u897f\u3002</li> <li>\u7a7a\u95f4\u914d\u7f6e\u5668\uff1a\u8d1f\u8d23\u7a7a\u95f4\u7684\u914d\u7f6e\u4e0e\u7ba1\u7406\u3002\u4ece\u5b9e\u73b0\u89d2\u5ea6\u770b\uff0c\u914d\u7f6e\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86\u52a8\u6001\u7a7a\u95f4\u914d\u7f6e\u3001\u7a7a\u95f4\u7ba1\u7406\u3001\u7a7a\u95f4\u91ca\u653e\u7684class tempalte.</li> </ul>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/","title":"Linux\u7684\u6863\u6848\u6743\u9650","text":"<p>Linux\u6700\u4f18\u79c0\u7684\u5730\u65b9\u4e4b\u4e00\u5c31\u5728\u4e8e\u4ed6\u7684\u591a\u4eba\u591a\u5de5\u73af\u5883\u3002\u800c\u4e3a\u4e86\u8ba9\u5404\u4e2a\u4f7f\u7528\u8005\u5177\u6709\u8f83\u4fdd\u5bc6\u7684\u6863\u6848\u8d44\u6599\uff0c\u56e0\u6b64\u6863\u6848\u7684\u6743\u9650\u7ba1\u7406\u5c31\u53d8\u7684\u5f88\u91cd\u8981\u4e86\u3002 Linux\u4e00\u822c\u5c06\u6863\u6848\u53ef\u5b58\u53d6\u7684\u8eab\u4efd\u5206\u4e3a\u4e09\u4e2a\u7c7b\u522b\uff0c\u5206\u522b\u662fowner/group/others\uff0c\u4e14\u4e09\u79cd\u8eab\u4efd\u5404\u6709read/write/execute \u7b49\u6743\u9650\u3002</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#_1","title":"\u4f7f\u7528\u8005\u4e0e\u7fa4\u7ec4","text":""},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#owner","title":"\u6863\u6848\u62e5\u6709\u8005(owner)","text":"<p>Linux\u662f\u4e2a\u591a\u4eba\u591a\u5de5\u7684\u7cfb\u7edf\uff0c\u56e0\u6b64\u53ef\u80fd\u5e38\u5e38\u4f1a\u6709\u591a\u4eba\u540c\u65f6\u4f7f\u7528\u8fd9\u90e8\u4e3b\u673a\u6765\u8fdb\u884c\u5de5\u4f5c\u7684\u60c5\u51b5\u53d1\u751f\uff0c \u4e3a\u4e86\u8003\u8651\u6bcf\u4e2a\u4eba\u7684\u9690\u79c1\u6743\u4ee5\u53ca\u6bcf\u4e2a\u4eba\u559c\u597d\u7684\u5de5\u4f5c\u73af\u5883\uff0c\u56e0\u6b64\uff0c\u8fd9\u4e2a\u300e\u6863\u6848\u62e5\u6709\u8005\u300f\u7684\u89d2\u8272\u5c31\u663e\u7684\u76f8\u5f53\u7684\u91cd\u8981\u4e86\uff01 \u6863\u6848\u62e5\u6709\u8005\u5373\u521b\u5efa\u6863\u6848\u7684\u4eba\u3002</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#group","title":"\u7fa4\u7ec4(group)","text":"<p>\u5728Linux\u5e95\u4e0b\u8fd9\u6837\u7684\u9650\u5236\u662f\u5f88\u7b80\u5355\u5566\uff01\u6211\u53ef\u4ee5\u7ecf\u7531\u7b80\u6613\u7684\u6863\u6848\u6743\u9650\u8bbe\u5b9a\uff0c\u5c31\u80fd\u9650\u5236\u975e\u81ea\u5df1\u56e2\u961f(\u4ea6\u5373\u662f\u7fa4\u7ec4\u5570) \u7684\u5176\u4ed6\u4eba\u4e0d\u80fd\u591f\u9605\u89c8\u5185\u5bb9\u5570\uff01\u800c\u4e14\u4ea6\u53ef\u4ee5\u8ba9\u81ea\u5df1\u7684\u56e2\u961f\u6210\u5458\u53ef\u4ee5\u4fee\u6539\u6211\u6240\u5efa\u7acb\u7684\u6863\u6848\uff01 \u540c\u65f6\uff0c\u5982\u679c\u6211\u81ea\u5df1\u8fd8\u6709\u79c1\u4eba\u9690\u5bc6\u7684\u6587\u4ef6\uff0c\u4ecd\u7136\u53ef\u4ee5\u8bbe\u5b9a\u6210\u8ba9\u81ea\u5df1\u7684\u56e2\u961f\u6210\u5458\u4e5f\u770b\u4e0d\u5230\u6211\u7684\u6863\u6848\u8d44\u6599\u3002 </p> <p>\u53ef\u4ee5\u5c06\u5bb6\u5ead\u7a7a\u95f4\u6bd4\u4f5c\u6863\u6848\uff0c\u6bcf\u4e2a\u5bb6\u5ead\u6210\u5458\u90fd\u662f\u5404\u81ea\u5367\u5ba4\u7684\u6863\u6848\u62e5\u6709\u8005\uff0c\u522b\u7684\u6210\u5458\u4e0d\u80fd\u968f\u610f\u7ffb\u52a8\u81ea\u5df1\u7684\u4e1c\u897f\uff0c\u4f46\u5bb6\u91cc\u9762\u7684\u5ba2\u5385\u5c31\u662f\u516c\u5171\u7a7a\u95f4\uff0c\u5927\u5bb6\u90fd\u80fd\u5728\u5ba2\u5385\u91cc\u6d3b\u52a8\uff0c\u4e5f\u5c31\u662f\u5c5e\u4e8e\u7fa4\u7ec4\u7684\u5185\u5bb9\u3002</p> <p>\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6bcf\u4e2a\u6863\u6848\u7684\u6743\u9650\u6539\u53d8\u4e0a\u9762\u6240\u8bf4\u7684\u5185\u5bb9\u3002</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#others","title":"\u5176\u4ed6\u4eba(others)","text":"<p>\u4e5f\u5c31\u662f\u4e0d\u5c5e\u4e8e\u521a\u521a\u6240\u8bf4\u7684\u5bb6\u5ead\u6210\u5458\u7684\u4eba\uff0c\u662f\u4e0d\u80fd\u591f\u8fdb\u5165\u5ba2\u5385\u66f4\u522b\u8bf4\u623f\u95f4\u4e86\u3002</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#linux_1","title":"Linux \u6863\u6848\u6743\u9650\u6982\u5ff5","text":"<p>\u5207\u6362\u5230\u8d85\u7ea7\u7528\u6237\u67e5\u770b\u5404\u4e2a\u6863\u6848\u7684\u6743\u9650</p> <p><pre><code>zhy_clound@iZ2zefhns847t1cynpxco5Z:~$ su -\nPassword: \nroot@iZ2zefhns847t1cynpxco5Z:~# ls -al\ntotal 64\ndrwx------ 11 root root 4096 Jun  1 22:06 .\ndrwxr-xr-x 19 root root 4096 Jun  1 21:45 ..\n-rw-------  1 root root   68 Jun  1 22:06 .bash_history\n-rw-r--r--  1 root root 3106 Oct 15  2021 .bashrc\ndrwx------  2 root root 4096 May  8 11:27 .cache\ndrwx------  3 root root 4096 Jun  1 21:57 .config\ndrwxr-xr-x  3 root root 4096 Jun  1 21:55 .dotnet\ndrwx------  3 root root 4096 Jun  1 21:57 .local\ndrwxr-xr-x  2 root root 4096 May  8 11:42 .pip\n-rw-r--r--  1 root root  161 Jul  9  2019 .profile\n-rw-r--r--  1 root root   72 May  8 11:42 .pydistutils.cfg\ndrwxr-xr-x  2 root root 4096 May  8 11:42 .rpmdb\ndrwx------  3 root root 4096 May  8 11:26 snap\ndrwx------  2 root root 4096 May  8 11:26 .ssh\ndrwxr-xr-x  5 root root 4096 Jun  1 21:55 .vscode-server\n-rw-r--r--  1 root root  183 Jun  1 21:54 .wget-hsts\nroot@iZ2zefhns847t1cynpxco5Z:~# \n</code></pre> </p> <p><pre><code>-rw-r--r--  1 root root  183 Jun  1 21:54 .wget-hsts\n</code></pre> \u5176\u4e2d\u7b2c\u4e00\u680f\u8868\u793a\u6863\u6848\u7c7b\u578b\u4e0e\u6743\u9650 * \u7b2c\u4e00\u4e2a\u5b57\u5143\u4ee3\u8868\u8fd9\u4e2a\u6863\u6848\u662f\u300e\u76ee\u5f55\u3001\u6863\u6848\u6216\u8fde\u7ed3\u6863\u7b49\u7b49\u300f   \u00b7\u5f53\u4e3a[ d ]\u5219\u662f\u76ee\u5f55   \u00b7\u5f53\u4e3a[ - ]\u5219\u662f\u6863\u6848   \u00b7\u82e5\u662f[ l ]\u5219\u8868\u793a\u4e3a\u8fde\u7ed3\u6863(link file)   \u00b7\u82e5\u662f[ b ]\u5219\u8868\u793a\u4e3a\u88c5\u7f6e\u6863\u91cc\u9762\u7684\u53ef\u4f9b\u50a8\u5b58\u7684\u5468\u8fb9\u8bbe\u5907(\u53ef\u968f\u673a\u5b58\u53d6\u88c5\u7f6e)\uff1b   \u00b7\u82e5\u662f[ c ]\u5219\u8868\u793a\u4e3a\u88c5\u7f6e\u6863\u91cc\u9762\u7684\u5e8f\u5217\u57e0\u8bbe\u5907\uff0c\u4f8b\u5982\u952e\u76d8\u3001\u6ed1\u9f20(\u4e00\u6b21\u6027\u8bfb\u53d6\u88c5\u7f6e)\u3002</p> <ul> <li>\u63a5\u4e0b\u6765\u7684\u5b57\u5143\u4e2d\uff0c\u4ee5\u4e09\u4e2a\u4e3a\u4e00\u7ec4\uff0c\u4e14\u5747\u4e3a\u300erwx\u300f \u7684\u4e09\u4e2a\u53c2\u6570\u7684\u7ec4\u5408\u3002\u5176\u4e2d\uff0c[ r ]\u4ee3\u8868\u53ef\u8bfb(read)\u3001[ w ]\u4ee3\u8868\u53ef\u5199(write)\u3001[ x ]\u4ee3\u8868\u53ef\u6267\u884c(execute)\u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e09\u4e2a\u6743\u9650\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u6539\u53d8\uff0c\u5982\u679c\u6ca1\u6709\u6743\u9650\uff0c\u5c31\u4f1a\u51fa\u73b0\u51cf\u53f7[ - ]\u800c\u5df2\u3002     \u7b2c\u4e00\u7ec4\u4e3a\u300e\u6863\u6848\u62e5\u6709\u8005\u53ef\u5177\u5907\u7684\u6743\u9650\u300f\uff0c\u4ee5\u4e0a\u9762\u6863\u6848\u4e3a\u4f8b\uff0c \u8be5\u6863\u6848\u7684\u62e5\u6709\u8005\u53ef\u4ee5\u8bfb\u5199\uff0c\u4f46\u4e0d\u53ef\u6267\u884c\uff1b     \u7b2c\u4e8c\u7ec4\u4e3a\u300e\u52a0\u5165\u6b64\u7fa4\u7ec4\u4e4b\u5e10\u53f7\u7684\u6743\u9650\u300f\uff1b     \u7b2c\u4e09\u7ec4\u4e3a\u300e\u975e\u672c\u4eba\u4e14\u6ca1\u6709\u52a0\u5165\u672c\u7fa4\u7ec4\u4e4b\u5176\u4ed6\u5e10\u53f7\u7684\u6743\u9650\u300f\u3002</li> </ul> <pre><code>\u4f8b\u9898\uff1a\n    \u82e5\u6709\u4e00\u4e2a\u6863\u6848\u7684\u7c7b\u578b\u4e0e\u6743\u9650\u8d44\u6599\u4e3a\u300e-rwxr-xr--\u300f\uff0c\u8bf7\u8bf4\u660e\u5176\u610f\u4e49\u4e3a\u4f55\uff1f\n\u7b54\uff1a\n    \u5148\u5c06\u6574\u4e2a\u7c7b\u578b\u4e0e\u6743\u9650\u8d44\u6599\u5206\u5f00\u67e5\u9605\uff0c\u5e76\u5c06\u5341\u4e2a\u5b57\u5143\u6574\u7406\u6210\u4e3a\u5982\u4e0b\u6240\u793a\uff1a\n    [-][rwx][rx-][r--]\n    1   234  567 890\n    1 \u4e3a\uff1a\u4ee3\u8868\u8fd9\u4e2a\u6863\u540d\u4e3a\u76ee\u5f55\u6216\u6863\u6848\uff0c\u672c\u4f8b\u4e2d\u4e3a\u6863\u6848(-)\uff1b\n    234\u4e3a\uff1a\u62e5\u6709\u8005\u7684\u6743\u9650\uff0c\u672c\u4f8b\u4e2d\u4e3a\u53ef\u8bfb\u3001\u53ef\u5199\u3001\u53ef\u6267\u884c(rwx)\uff1b\n    567\u4e3a\uff1a\u540c\u7fa4\u7ec4\u4f7f\u7528\u8005\u6743\u9650\uff0c\u672c\u4f8b\u4e2d\u4e3a\u53ef\u8bfb\u53ef\u6267\u884c(rx)\uff1b\n    890\u4e3a\uff1a\u5176\u4ed6\u4f7f\u7528\u8005\u6743\u9650\uff0c\u672c\u4f8b\u4e2d\u4e3a\u53ef\u8bfb(r)\uff0c\u5c31\u662f\u552f\u8bfb\u4e4b\u610f\n\n\u540c\u65f6\u6ce8\u610f\u5230\uff0crwx\u6240\u5728\u7684\u4f4d\u7f6e\u662f\u4e0d\u4f1a\u6539\u53d8\u7684\uff0c\u6709\u8be5\u6743\u9650\u5c31\u4f1a\u663e\u793a\u5b57\u5143\uff0c\u6ca1\u6709\u8be5\u6743\u9650\u5c31\u53d8\u6210\u51cf\u53f7(-)\u5c31\u662f\u4e86\u3002\n</code></pre> <p>\u7b2c\u4e8c\u680f\u8868\u793a\u6709\u591a\u5c11\u6863\u540d\u8fde\u7ed3\u5230\u6b64\u8282\u70b9(i-node)\uff1a \u7b2c\u4e09\u680f\u8868\u793a\u8fd9\u4e2a\u6863\u6848\u7684\u62e5\u6709\u8005 \u7b2c\u56db\u680f\u8868\u793a\u8fd9\u4e2a\u6863\u6848\u7684\u6240\u5c5e\u7fa4\u7ec4 \u7b2c\u4e94\u680f\u8868\u793a\u8fd9\u4e2a\u6863\u6848\u7684\u5927\u5c0f \u7b2c\u516d\u680f\u4e3a\u8fd9\u4e2a\u6863\u6848\u7684\u5efa\u6863\u65e5\u671f\u6216\u8005\u662f\u6700\u8fd1\u7684\u4fee\u6539\u65e5\u671f\uff1a \u7b2c\u4e03\u680f\u4e3a\u8fd9\u4e2a\u6863\u6848\u7684\u6863\u540d     \u5982\u679c\u524d\u9762\u52a0\u4e86\u4e00\u4e2a.\u7684\u8bdd\u8bf4\u660e\u662f\u9690\u85cf\u6863\u6848</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#linux_2","title":"\u5982\u4f55\u6539\u53d8Linux\u7684\u6863\u6848\u6743\u9650","text":"<p>\u901a\u8fc7\u547d\u4ee4 * chgrp \uff1a\u6539\u53d8\u6863\u6848\u6240\u5c5e\u7fa4\u7ec4 * chown \uff1a\u6539\u53d8\u6863\u6848\u62e5\u6709\u8005 * chmod \uff1a\u6539\u53d8\u6863\u6848\u7684\u6743\u9650, SUID, SGID, SBIT\u7b49\u7b49\u7684\u7279\u6027</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#chgrp","title":"\u6539\u53d8\u6240\u5c5e\u7fa4\u7ec4, chgrp","text":"<p>change group\u7684\u7f29\u5199 \u8981\u88ab\u6539\u53d8\u7684\u7fa4\u7ec4\u540d\u79f0\u5fc5\u987b\u8981\u5728/etc/group\u6863\u6848\u5185\u5b58\u5728\u624d\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u663e\u793a\u9519\u8bef\uff01</p> <p>\u5047\u8bbe\u5728/etc/group\u91cc\u9762\u5df2\u7ecf\u5b58\u5728\u4e00\u4e2a\u540d\u4e3ausers\u7684\u7fa4\u7ec4\uff0c \u4f46\u662ftesting\u8fd9\u4e2a\u7fa4\u7ec4\u540d\u5b57\u5c31\u4e0d\u5b58\u5728/etc/group\u5f53\u4e2d</p> <pre><code>[root@study ~]# chgrp [-R] dirname/filename ...\n\u9009\u9879\u4e0e\u53c2\u6570\uff1a\n-R : \u8fdb\u884c\u9012\u56de(recursive)\u7684\u6301\u7eed\u53d8\u66f4\uff0c\u4ea6\u5373\u8fde\u540c\u6b21\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6863\u6848\u3001\u76ee\u5f55\n     \u90fd\u66f4\u65b0\u6210\u4e3a\u8fd9\u4e2a\u7fa4\u7ec4\u4e4b\u610f\u3002\u5e38\u5e38\u7528\u5728\u53d8\u66f4\u67d0\u4e00\u76ee\u5f55\u5185\u6240\u6709\u7684\u6863\u6848\u4e4b\u60c5\u51b5\u3002\n\u8303\u4f8b\uff1a \n[root@study ~]# chgrp users initial-setup-ks.cfg \n[root@study ~]# ls -l \n-rw-r--r--. 1 root users 1864 May 4 18:01 initial-setup -ks.cfg\n[root@study ~]# chgrp testing initial-setup-ks.cfg \nchgrp: invalid group: `testing' &lt;== \u53d1\u751f\u9519\u8bef\u8baf\u606f\u5570\uff5e\u627e\u4e0d\u5230\u8fd9\u4e2a\u7fa4\u7ec4\u540d\uff5e\n</code></pre>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#chown","title":"\u6539\u53d8\u6863\u6848\u62e5\u6709\u8005, chown","text":"<p>change owner\u7684\u7f29\u5199 \u8bed\u6cd5\u5982\u4e0b <pre><code>[root@study ~]# chown [-R] \u5e10\u53f7\u540d\u79f0\u6863\u6848\u6216\u76ee\u5f55\n[root@study ~]# chown [-R] \u5e10\u53f7\u540d\u79f0:\u7fa4\u7ec4\u540d\u79f0\u6863\u6848\u6216\u76ee\u5f55\n\u9009\u9879\u4e0e\u53c2\u6570\uff1a\n-R : \u8fdb\u884c\u9012\u56de(recursive)\u7684\u6301\u7eed\u53d8\u66f4\uff0c\u4ea6\u5373\u8fde\u540c\u6b21\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6863\u6848\u90fd\u53d8\u66f4\n\n\u8303\u4f8b\uff1a\u5c06initial-setup-ks.cfg \u7684\u62e5\u6709\u8005\u6539\u4e3abin\u8fd9\u4e2a\u5e10\u53f7\uff1a \n[root@study ~]# chown bin initial-setup-ks.cfg \n[root@study ~]# ls -l \n-rw-r- -r--. 1 bin   users 1864 May 4 18:01 initial-setup-ks.cfg\n\n\u8303\u4f8b\uff1a\u5c06initial-setup-ks.cfg \u7684\u62e5\u6709\u8005\u4e0e\u7fa4\u7ec4\u6539\u56de\u4e3aroot\uff1a \n[root@study ~]# chown root:root initial-setup-ks.cfg \n[root@study ~]# ls -l \n- rw-r--r--. 1 root root 1864 May 4 18:01 initial-setup-ks.cfg\n</code></pre></p> <p>\u4e00\u4e2a\u5e38\u7528\u7684\u4f7f\u7528\u6539\u53d8\u6743\u9650\u7684\u573a\u666f\u662f\u5728\u590d\u5236\u4f7f\u7528\u522b\u4eba\u7684\u6863\u6848\u65f6\u5019 <pre><code>[root@study ~]# cp .bashrc .bashrc_test \n[root@study ~]# ls -al .bashrc*\n-rw-r--r--. 1 root root 176 Dec 29 2013 .bashrc\n-rw-r--r--. 1 root root 176 Jun 3 00:04 .bashrc_test    &lt;==\u65b0\u6863\u6848\u7684\u5c5e\u6027\u6ca1\u53d8\n</code></pre> \u5148\u628a\u4e24\u4e2a\u9690\u85cf\u7684\u6587\u6863\u7c98\u8d34\u8fc7\u6765\uff0c\u53ef\u4ee5\u770b\u5230\u6863\u6848\u7684\u5c5e\u6027\u8fd8\u662froot\uff0c\u5176\u4ed6\u7528\u6237\u65e0\u6743\u66f4\u6539\uff0c\u6240\u4ee5\u6b64\u65f6\u9700\u8981\u66f4\u6539\u6863\u6848\u7684\u6743\u9650\uff0c\u62e5\u6709\u8005\u2026\u2026\u2026</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#chmod","title":"\u6539\u53d8\u6743\u9650, chmod","text":"<p>\u6539\u53d8\u6743\u9650\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f</p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#_2","title":"\u4f7f\u7528\u6570\u5b57\u6765\u6539\u53d8\u6743\u9650","text":"<p>-rw-r--r-- \u4f8b\u5982\u5bf9\u4e8e\u8fd9\u6bb5\u5b57\u7b26\u6765\u8bf4\uff0c\u4f7f\u7528\u4e8c\u8fdb\u5236\u6765\u89e3\u6790 owner = rw- = 4+2+0 = 6 group = r-- = 4+0+0 = 4 others= r-- = 4+0+0 = 4 \u6b64\u65f6\u7684\u8bed\u6cd5\u662f\u8fd9\u6837\u7684 <pre><code>[root@study ~]# chmod [-R] xyz \u6863\u6848\u6216\u76ee\u5f55\n\u9009\u9879\u4e0e\u53c2\u6570\uff1a\nxyz : \u5c31\u662f\u521a\u521a\u63d0\u5230\u7684\u6570\u5b57\u7c7b\u578b\u7684\u6743\u9650\u5c5e\u6027\uff0c\u4e3arwx \u5c5e\u6027\u6570\u503c\u7684\u76f8\u52a0\u3002\n-R : \u8fdb\u884c\u9012\u56de(recursive)\u7684\u6301\u7eed\u53d8\u66f4\uff0c\u4ea6\u5373\u8fde\u540c\u6b21\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6863\u6848\u90fd\u4f1a\u53d8\u66f4\n</code></pre> \u8303\u4f8b\u5982\u4e0b <pre><code>[root@study ~]# ls -al .bashrc \n-rw-r--r-- . 1 root root 176 Dec 29 2013 .bashrc\n[root@study ~]# chmod 777 .bashrc \n[root@study ~]# ls -al .bashrc \n-rwxrwxrwx . 1 root root 176 Dec 29 2013 .bashrc\n</code></pre></p>"},{"location":"linux/liunx%E7%9A%84%E6%A1%A3%E6%A1%88%E6%9D%83%E9%99%90/#_3","title":"\u4f7f\u7528\u7b26\u53f7\u6765\u6539\u53d8\u6743\u9650","text":"<p>\u57fa\u672c\u4e0a\u5c31\u4e5d\u4e2a\u6743\u9650\u5206\u522b\u662f(1)user (2)group (3)others\u4e09\u79cd\u8eab\u4efd\u5566\uff01\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u85c9\u7531u, g, o\u6765\u4ee3\u8868\u4e09\u79cd\u8eab\u4efd\u7684\u6743\u9650\uff01\u6b64\u5916\uff0ca\u5219\u4ee3\u8868all \u4ea6\u5373\u5168\u90e8\u7684\u8eab\u4efd\uff01\u90a3\u4e48\u8bfb\u5199\u7684\u6743\u9650\u5c31\u53ef\u4ee5\u5199\u6210r, w, x</p> <p>\u5047\u5982\u6211\u4eec\u8981\u300e\u8bbe\u5b9a\u300f\u4e00\u4e2a\u6863\u6848\u7684\u6743\u9650\u6210\u4e3a\u300e-rwxr-xr-x\u300f\u65f6\uff0c\u57fa\u672c\u4e0a\u5c31\u662f\uff1a</p> <p>user (u)\uff1a\u5177\u6709\u53ef\u8bfb\u3001\u53ef\u5199\u3001\u53ef\u6267\u884c\u7684\u6743\u9650\uff1b group \u4e0eothers (g/o)\uff1a\u5177\u6709\u53ef\u8bfb\u4e0e\u6267\u884c\u7684\u6743\u9650\u3002 <pre><code>[root@study ~]# chmod u=rwx,go=rx .bashrc \n# \u6ce8\u610f\u5594\uff01\u90a3\u4e2au=rwx,go=rx \u662f\u8fde\u5728\u4e00\u8d77\u7684\uff0c\u4e2d\u95f4\u5e76\u6ca1\u6709\u4efb\u4f55\u7a7a\u767d\u5b57\u5143\uff01 \n[root@study ~]# ls -al .bashrc \n-rwxr-xr-x . 1 root root 176 Dec 29 2013 .bashrc\n</code></pre> \u5982\u679c\u60f3\u8981\u4eba\u5747\u6dfb\u52a0\u8bfb\u7684\u6743\u9650 <pre><code>[root@study ~]# ls -al .bashrc \n-rwxr-xr-x . 1 root root 176 Dec 29 2013 .bashrc\n[root@study ~]# chmod a+w .bashrc \n[root@study ~]# ls -al .bashrc \n-rwxrwxrwx . 1 root root 176 Dec 29 2013 .bashrc\n</code></pre></p>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/","title":"Bash \u7684\u7b97\u672f\u8fd0\u7b97","text":""},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#_1","title":"\u7b97\u672f\u8868\u8fbe\u5f0f","text":"<p><code>((...))</code>\u8bed\u6cd5\u53ef\u4ee5\u8fdb\u884c\u6574\u6570\u7684\u7b97\u672f\u8fd0\u7b97\u3002</p> <pre><code>$ ((foo = 5 + 5))\n$ echo $foo\n10\n</code></pre> <p><code>((...))</code>\u4f1a\u81ea\u52a8\u5ffd\u7565\u5185\u90e8\u7684\u7a7a\u683c\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u5199\u6cd5\u90fd\u6b63\u786e\uff0c\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002</p> <pre><code>$ ((2+2))\n$ (( 2+2 ))\n$ (( 2 + 2 ))\n</code></pre> <p>\u8fd9\u4e2a\u8bed\u6cd5\u4e0d\u8fd4\u56de\u503c\uff0c\u547d\u4ee4\u6267\u884c\u7684\u7ed3\u679c\u6839\u636e\u7b97\u672f\u8fd0\u7b97\u7684\u7ed3\u679c\u800c\u5b9a\u3002\u53ea\u8981\u7b97\u672f\u7ed3\u679c\u4e0d\u662f<code>0</code>\uff0c\u547d\u4ee4\u5c31\u7b97\u6267\u884c\u6210\u529f\u3002</p> <pre><code>$ (( 3 + 2 ))\n$ echo $?\n0\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c<code>3 + 2</code>\u7684\u7ed3\u679c\u662f5\uff0c\u547d\u4ee4\u5c31\u7b97\u6267\u884c\u6210\u529f\uff0c\u73af\u5883\u53d8\u91cf<code>$?</code>\u4e3a<code>0</code>\u3002</p> <p>\u5982\u679c\u7b97\u672f\u7ed3\u679c\u4e3a<code>0</code>\uff0c\u547d\u4ee4\u5c31\u7b97\u6267\u884c\u5931\u8d25\u3002</p> <pre><code>$ (( 3 - 3 ))\n$ echo $?\n1\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c<code>3 - 3</code>\u7684\u7ed3\u679c\u662f<code>0</code>\uff0c\u73af\u5883\u53d8\u91cf<code>$?</code>\u4e3a<code>1</code>\uff0c\u8868\u793a\u547d\u4ee4\u6267\u884c\u5931\u8d25\u3002</p> <p>\u5982\u679c\u8981\u8bfb\u53d6\u7b97\u672f\u8fd0\u7b97\u7684\u7ed3\u679c\uff0c\u9700\u8981\u5728<code>((...))</code>\u524d\u9762\u52a0\u4e0a\u7f8e\u5143\u7b26\u53f7<code>$((...))</code>\uff0c\u4f7f\u5176\u53d8\u6210\u7b97\u672f\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u7b97\u672f\u8fd0\u7b97\u7684\u503c\u3002</p> <pre><code>$ echo $((2 + 2))\n4\n</code></pre> <p><code>((...))</code>\u8bed\u6cd5\u652f\u6301\u7684\u7b97\u672f\u8fd0\u7b97\u7b26\u5982\u4e0b\u3002</p> <ul> <li><code>+</code>\uff1a\u52a0\u6cd5</li> <li><code>-</code>\uff1a\u51cf\u6cd5</li> <li><code>*</code>\uff1a\u4e58\u6cd5</li> <li><code>/</code>\uff1a\u9664\u6cd5\uff08\u6574\u9664\uff09</li> <li><code>%</code>\uff1a\u4f59\u6570</li> <li><code>**</code>\uff1a\u6307\u6570</li> <li><code>++</code>\uff1a\u81ea\u589e\u8fd0\u7b97\uff08\u524d\u7f00\u6216\u540e\u7f00\uff09</li> <li><code>--</code>\uff1a\u81ea\u51cf\u8fd0\u7b97\uff08\u524d\u7f00\u6216\u540e\u7f00\uff09</li> </ul> <p>\u6ce8\u610f\uff0c\u9664\u6cd5\u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u7ed3\u679c\u603b\u662f\u6574\u6570\uff0c\u6bd4\u5982<code>5</code>\u9664\u4ee5<code>2</code>\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f<code>2</code>\uff0c\u800c\u4e0d\u662f<code>2.5</code>\u3002</p> <pre><code>$ echo $((5 / 2))\n2\n</code></pre> <p><code>++</code>\u548c<code>--</code>\u8fd9\u4e24\u4e2a\u8fd0\u7b97\u7b26\u6709\u524d\u7f00\u548c\u540e\u7f00\u7684\u533a\u522b\u3002\u4f5c\u4e3a\u524d\u7f00\u662f\u5148\u8fd0\u7b97\u540e\u8fd4\u56de\u503c\uff0c\u4f5c\u4e3a\u540e\u7f00\u662f\u5148\u8fd4\u56de\u503c\u540e\u8fd0\u7b97\u3002</p> <pre><code>$ i=0\n$ echo $i\n0\n$ echo $((i++))\n0\n$ echo $i\n1\n$ echo $((++i))\n2\n$ echo $i\n2\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c<code>++</code>\u4f5c\u4e3a\u540e\u7f00\u662f\u5148\u8fd4\u56de\u503c\uff0c\u6267\u884c<code>echo</code>\u547d\u4ee4\uff0c\u518d\u8fdb\u884c\u81ea\u589e\u8fd0\u7b97\uff1b\u4f5c\u4e3a\u524d\u7f00\u5219\u662f\u5148\u8fdb\u884c\u81ea\u589e\u8fd0\u7b97\uff0c\u518d\u8fd4\u56de\u503c\u6267\u884c<code>echo</code>\u547d\u4ee4\u3002</p> <p><code>$((...))</code>\u5185\u90e8\u53ef\u4ee5\u7528\u5706\u62ec\u53f7\u6539\u53d8\u8fd0\u7b97\u987a\u5e8f\u3002</p> <pre><code>$ echo $(( (2 + 3) * 4 ))\n20\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u5185\u90e8\u7684\u5706\u62ec\u53f7\u8ba9\u52a0\u6cd5\u5148\u4e8e\u4e58\u6cd5\u6267\u884c\u3002</p> <p><code>$((...))</code>\u7ed3\u6784\u53ef\u4ee5\u5d4c\u5957\u3002</p> <pre><code>$ echo $(((5**2) * 3))\n75\n# \u7b49\u540c\u4e8e\n$ echo $(($((5**2)) * 3))\n75\n</code></pre> <p>\u8fd9\u4e2a\u8bed\u6cd5\u53ea\u80fd\u8ba1\u7b97\u6574\u6570\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002</p> <pre><code># \u62a5\u9519\n$ echo $((1.5 + 1))\nbash: \u8bed\u6cd5\u9519\u8bef\n</code></pre> <p><code>$((...))</code>\u7684\u5706\u62ec\u53f7\u4e4b\u4e2d\uff0c\u4e0d\u9700\u8981\u5728\u53d8\u91cf\u540d\u4e4b\u524d\u52a0\u4e0a<code>$</code>\uff0c\u4e0d\u8fc7\u52a0\u4e0a\u4e5f\u4e0d\u62a5\u9519\u3002</p> <pre><code>$ number=2\n$ echo $(($number + 1))\n3\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u53d8\u91cf<code>number</code>\u524d\u9762\u6709\u6ca1\u6709\u7f8e\u5143\u7b26\u53f7\uff0c\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u5982\u679c\u5728<code>$((...))</code>\u91cc\u9762\u4f7f\u7528\u5b57\u7b26\u4e32\uff0cBash \u4f1a\u8ba4\u4e3a\u90a3\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\u3002\u5982\u679c\u4e0d\u5b58\u5728\u540c\u540d\u53d8\u91cf\uff0cBash \u5c31\u4f1a\u5c06\u5176\u4f5c\u4e3a\u7a7a\u503c\uff0c\u56e0\u6b64\u4e0d\u4f1a\u62a5\u9519\u3002</p> <pre><code>$ echo $(( \"hello\" + 2))\n2\n$ echo $(( \"hello\" * 2))\n0\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c<code>\"hello\"</code>\u4f1a\u88ab\u5f53\u4f5c\u53d8\u91cf\u540d\uff0c\u8fd4\u56de\u7a7a\u503c\uff0c\u800c<code>$((...))</code>\u4f1a\u5c06\u7a7a\u503c\u5f53\u4f5c<code>0</code>\uff0c\u6240\u4ee5\u4e58\u6cd5\u7684\u8fd0\u7b97\u7ed3\u679c\u5c31\u662f<code>0</code>\u3002\u540c\u7406\uff0c\u5982\u679c<code>$((...))</code>\u91cc\u9762\u4f7f\u7528\u4e0d\u5b58\u5728\u7684\u53d8\u91cf\uff0c\u4e5f\u4f1a\u5f53\u4f5c<code>0</code>\u5904\u7406\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4e3a\u5b57\u7b26\u4e32\uff0c\u8ddf\u4e0a\u9762\u7684\u5904\u7406\u903b\u8f91\u662f\u4e00\u6837\u7684\u3002\u5373\u8be5\u5b57\u7b26\u4e32\u5982\u679c\u4e0d\u5bf9\u5e94\u5df2\u5b58\u5728\u7684\u53d8\u91cf\uff0c\u5728<code>$((...))</code>\u91cc\u9762\u4f1a\u88ab\u5f53\u4f5c\u7a7a\u503c\u3002</p> <pre><code>$ foo=hello\n$ echo $(( foo + 2))\n2\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u53d8\u91cf<code>foo</code>\u7684\u503c\u662f<code>hello</code>\uff0c\u800c<code>hello</code>\u4e5f\u4f1a\u88ab\u770b\u4f5c\u53d8\u91cf\u540d\u3002\u8fd9\u4f7f\u5f97\u6709\u53ef\u80fd\u5199\u51fa\u52a8\u6001\u66ff\u6362\u7684\u4ee3\u7801\u3002</p> <pre><code>$ foo=hello\n$ hello=3\n$ echo $(( foo + 2 ))\n5\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c<code>foo + 2</code>\u53d6\u51b3\u4e8e\u53d8\u91cf<code>hello</code>\u7684\u503c\u3002</p> <p>\u6700\u540e\uff0c<code>$[...]</code>\u662f\u4ee5\u524d\u7684\u8bed\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u505a\u6574\u6570\u8fd0\u7b97\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002</p> <pre><code>$ echo $[2+2]\n4\n</code></pre>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#_2","title":"\u6570\u503c\u7684\u8fdb\u5236","text":"<p>Bash \u7684\u6570\u503c\u9ed8\u8ba4\u90fd\u662f\u5341\u8fdb\u5236\uff0c\u4f46\u662f\u5728\u7b97\u672f\u8868\u8fbe\u5f0f\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u8fdb\u5236\u3002</p> <ul> <li><code>number</code>\uff1a\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u8868\u793a\u6cd5\u7684\u6570\u5b57\u662f\u5341\u8fdb\u5236\u6570\uff08\u4ee510\u4e3a\u5e95\uff09\u3002</li> <li><code>0number</code>\uff1a\u516b\u8fdb\u5236\u6570\u3002</li> <li><code>0xnumber</code>\uff1a\u5341\u516d\u8fdb\u5236\u6570\u3002</li> <li><code>base#number</code>\uff1a<code>base</code>\u8fdb\u5236\u7684\u6570\u3002</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50\u3002</p> <pre><code>$ echo $((0xff))\n255\n$ echo $((2#11111111))\n255\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c<code>0xff</code>\u662f\u5341\u516d\u8fdb\u5236\u6570\uff0c<code>2#11111111</code>\u662f\u4e8c\u8fdb\u5236\u6570\u3002</p>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#_3","title":"\u4f4d\u8fd0\u7b97","text":"<p><code>$((...))</code>\u652f\u6301\u4ee5\u4e0b\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fd0\u7b97\u7b26\u3002</p> <ul> <li><code>&lt;&lt;</code>\uff1a\u4f4d\u5de6\u79fb\u8fd0\u7b97\uff0c\u628a\u4e00\u4e2a\u6570\u5b57\u7684\u6240\u6709\u4f4d\u5411\u5de6\u79fb\u52a8\u6307\u5b9a\u7684\u4f4d\u3002</li> <li><code>&gt;&gt;</code>\uff1a\u4f4d\u53f3\u79fb\u8fd0\u7b97\uff0c\u628a\u4e00\u4e2a\u6570\u5b57\u7684\u6240\u6709\u4f4d\u5411\u53f3\u79fb\u52a8\u6307\u5b9a\u7684\u4f4d\u3002</li> <li><code>&amp;</code>\uff1a\u4f4d\u7684\u201c\u4e0e\u201d\u8fd0\u7b97\uff0c\u5bf9\u4e24\u4e2a\u6570\u5b57\u7684\u6240\u6709\u4f4d\u6267\u884c\u4e00\u4e2a<code>AND</code>\u64cd\u4f5c\u3002</li> <li><code>|</code>\uff1a\u4f4d\u7684\u201c\u6216\u201d\u8fd0\u7b97\uff0c\u5bf9\u4e24\u4e2a\u6570\u5b57\u7684\u6240\u6709\u4f4d\u6267\u884c\u4e00\u4e2a<code>OR</code>\u64cd\u4f5c\u3002</li> <li><code>~</code>\uff1a\u4f4d\u7684\u201c\u5426\u201d\u8fd0\u7b97\uff0c\u5bf9\u4e00\u4e2a\u6570\u5b57\u7684\u6240\u6709\u4f4d\u53d6\u53cd\u3002</li> <li><code>^</code>\uff1a\u4f4d\u7684\u5f02\u6216\u8fd0\u7b97\uff08exclusive or\uff09\uff0c\u5bf9\u4e24\u4e2a\u6570\u5b57\u7684\u6240\u6709\u4f4d\u6267\u884c\u4e00\u4e2a\u5f02\u6216\u64cd\u4f5c\u3002</li> </ul> <p>\u4e0b\u9762\u662f\u53f3\u79fb\u8fd0\u7b97\u7b26<code>&gt;&gt;</code>\u7684\u4f8b\u5b50\u3002</p> <pre><code>$ echo $((16&gt;&gt;2))\n4\n</code></pre> <p>\u4e0b\u9762\u662f\u5de6\u79fb\u8fd0\u7b97\u7b26<code>&lt;&lt;</code>\u7684\u4f8b\u5b50\u3002</p> <pre><code>$ echo $((16&lt;&lt;2))\n64\n</code></pre> <p>\u4e0b\u9762\u662f<code>17</code>\uff08\u4e8c\u8fdb\u5236<code>10001</code>\uff09\u548c<code>3</code>\uff08\u4e8c\u8fdb\u5236<code>11</code>\uff09\u7684\u5404\u79cd\u4e8c\u8fdb\u5236\u8fd0\u7b97\u7684\u7ed3\u679c\u3002</p> <pre><code>$ echo $((17&amp;3))\n1\n$ echo $((17|3))\n19\n$ echo $((17^3))\n18\n</code></pre>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#_4","title":"\u903b\u8f91\u8fd0\u7b97","text":"<p><code>$((...))</code>\u652f\u6301\u4ee5\u4e0b\u7684\u903b\u8f91\u8fd0\u7b97\u7b26\u3002</p> <ul> <li><code>&lt;</code>\uff1a\u5c0f\u4e8e</li> <li><code>&gt;</code>\uff1a\u5927\u4e8e</li> <li><code>&lt;=</code>\uff1a\u5c0f\u4e8e\u6216\u76f8\u7b49</li> <li><code>&gt;=</code>\uff1a\u5927\u4e8e\u6216\u76f8\u7b49</li> <li><code>==</code>\uff1a\u76f8\u7b49</li> <li><code>!=</code>\uff1a\u4e0d\u76f8\u7b49</li> <li><code>&amp;&amp;</code>\uff1a\u903b\u8f91\u4e0e</li> <li><code>||</code>\uff1a\u903b\u8f91\u6216</li> <li><code>!</code>\uff1a\u903b\u8f91\u5426</li> <li><code>expr1?expr2:expr3</code>\uff1a\u4e09\u5143\u6761\u4ef6\u8fd0\u7b97\u7b26\u3002\u82e5\u8868\u8fbe\u5f0f<code>expr1</code>\u7684\u8ba1\u7b97\u7ed3\u679c\u4e3a\u975e\u96f6\u503c\uff08\u7b97\u672f\u771f\uff09\uff0c\u5219\u6267\u884c\u8868\u8fbe\u5f0f<code>expr2</code>\uff0c\u5426\u5219\u6267\u884c\u8868\u8fbe\u5f0f<code>expr3</code>\u3002</li> </ul> <p>\u5982\u679c\u903b\u8f91\u8868\u8fbe\u5f0f\u4e3a\u771f\uff0c\u8fd4\u56de<code>1</code>\uff0c\u5426\u5219\u8fd4\u56de<code>0</code>\u3002</p> <pre><code>$ echo $((3 &gt; 2))\n1\n$ echo $(( (3 &gt; 2) || (4 &lt;= 1) ))\n1\n</code></pre> <p>\u4e09\u5143\u8fd0\u7b97\u7b26\u6267\u884c\u4e00\u4e2a\u5355\u72ec\u7684\u903b\u8f91\u6d4b\u8bd5\u3002\u5b83\u7528\u8d77\u6765\u7c7b\u4f3c\u4e8e<code>if/then/else</code>\u8bed\u53e5\u3002</p> <pre><code>$ a=0\n$ echo $((a&lt;1 ? 1 : 0))\n1\n$ echo $((a&gt;1 ? 1 : 0))\n0\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a\u771f\u65f6\uff0c\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7b2c\u4e09\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#_5","title":"\u8d4b\u503c\u8fd0\u7b97","text":"<p>\u7b97\u672f\u8868\u8fbe\u5f0f<code>$((...))</code>\u53ef\u4ee5\u6267\u884c\u8d4b\u503c\u8fd0\u7b97\u3002</p> <pre><code>$ echo $((a=1))\n1\n$ echo $a\n1\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c<code>a=1</code>\u5bf9\u53d8\u91cf<code>a</code>\u8fdb\u884c\u8d4b\u503c\u3002\u8fd9\u4e2a\u5f0f\u5b50\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u503c\u5c31\u662f\u7b49\u53f7\u53f3\u8fb9\u7684\u503c\u3002</p> <p><code>$((...))</code>\u652f\u6301\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u6709\u4ee5\u4e0b\u8fd9\u4e9b\u3002</p> <ul> <li><code>parameter = value</code>\uff1a\u7b80\u5355\u8d4b\u503c\u3002</li> <li><code>parameter += value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter + value</code>\u3002</li> <li><code>parameter -= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter \u2013 value</code>\u3002</li> <li><code>parameter *= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter * value</code>\u3002</li> <li><code>parameter /= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter / value</code>\u3002</li> <li><code>parameter %= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter % value</code>\u3002</li> <li><code>parameter &lt;&lt;= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter &lt;&lt; value</code>\u3002</li> <li><code>parameter &gt;&gt;= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter &gt;&gt; value</code>\u3002</li> <li><code>parameter &amp;= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter &amp; value</code>\u3002</li> <li><code>parameter |= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter | value</code>\u3002</li> <li><code>parameter ^= value</code>\uff1a\u7b49\u4ef7\u4e8e<code>parameter = parameter ^ value</code>\u3002</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>$ foo=5\n$ echo $((foo*=2))\n10\n</code></pre> <p>\u5982\u679c\u5728\u8868\u8fbe\u5f0f\u5185\u90e8\u8d4b\u503c\uff0c\u53ef\u4ee5\u653e\u5728\u5706\u62ec\u53f7\u4e2d\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002</p> <pre><code>$ echo $(( a&lt;1 ? (a+=1) : (a-=1) ))\n</code></pre>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#_6","title":"\u6c42\u503c\u8fd0\u7b97","text":"<p>\u9017\u53f7<code>,</code>\u5728<code>$((...))</code>\u5185\u90e8\u662f\u6c42\u503c\u8fd0\u7b97\u7b26\uff0c\u6267\u884c\u524d\u540e\u4e24\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5e76\u8fd4\u56de\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p> <pre><code>$ echo $((foo = 1 + 2, 3 * 4))\n12\n$ echo $foo\n3\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u9017\u53f7\u524d\u540e\u4e24\u4e2a\u8868\u8fbe\u5f0f\u90fd\u4f1a\u6267\u884c\uff0c\u7136\u540e\u8fd4\u56de\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c<code>12</code>\u3002</p>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#expr","title":"expr \u547d\u4ee4","text":"<p><code>expr</code>\u547d\u4ee4\u652f\u6301\u7b97\u672f\u8fd0\u7b97\uff0c\u53ef\u4ee5\u4e0d\u4f7f\u7528<code>((...))</code>\u8bed\u6cd5\u3002</p> <pre><code>$ expr 3 + 2\n5\n</code></pre> <p><code>expr</code>\u547d\u4ee4\u652f\u6301\u53d8\u91cf\u66ff\u6362\u3002</p> <pre><code>$ foo=3\n$ expr $foo + 2\n5\n</code></pre> <p><code>expr</code>\u547d\u4ee4\u4e5f\u4e0d\u652f\u6301\u975e\u6574\u6570\u53c2\u6570\u3002</p> <pre><code>$ expr 3.5 + 2\nexpr: \u975e\u6574\u6570\u53c2\u6570\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u6709\u975e\u6574\u6570\u7684\u8fd0\u7b97\uff0c<code>expr</code>\u547d\u4ee4\u5c31\u62a5\u9519\u4e86\u3002</p>"},{"location":"linux/Bash/Bash%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/#let","title":"let \u547d\u4ee4","text":"<p><code>let</code>\u547d\u4ee4\u7528\u4e8e\u5c06\u7b97\u672f\u8fd0\u7b97\u7684\u7ed3\u679c\uff0c\u8d4b\u4e88\u4e00\u4e2a\u53d8\u91cf\u3002</p> <pre><code>$ let x=2+3\n$ echo $x\n5\n</code></pre> <p>\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u53d8\u91cf<code>x</code>\u7b49\u4e8e<code>2+3</code>\u7684\u8fd0\u7b97\u7ed3\u679c\u3002</p> <p>\u6ce8\u610f\uff0c<code>x=2+3</code>\u8fd9\u4e2a\u5f0f\u5b50\u91cc\u9762\u4e0d\u80fd\u6709\u7a7a\u683c\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002<code>let</code>\u547d\u4ee4\u7684\u8be6\u7ec6\u7528\u6cd5\u53c2\u89c1\u300a\u53d8\u91cf\u300b\u4e00\u7ae0\u3002</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/","title":"\u7b2c\u4e00\u4e2ashell\u8bed\u53e5","text":"<pre><code>#!/bin/bash\necho \"hello world\"\n</code></pre>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_1","title":"!\u4ee5\u4e00\u4e2a\u6807\u8bb0\uff0c\u544a\u8bc9\u7cfb\u7edf\u8be5\u811a\u672c\u7528\u4ec0\u4e48\u89e3\u91ca\u5668\u8fd0\u884c","text":"<p>\u8fd0\u884c\u6539\u811a\u672c\u7684\u65b9\u6cd5 <pre><code>chmod +x hello world.sh\n./hello world.sh\n</code></pre></p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#shell_1","title":"shell\u53d8\u91cf","text":"<p>\u5b9a\u4e49shell\u53d8\u91cf\uff0c\u524d\u9762\u4e0d\u7528\u52a0$</p> <p>\u4f8b\u5982 <pre><code>name=\"z\"\necho $name\necho ${name}\n</code></pre> {}\u662f\u53ef\u52a0\u53ef\u4e0d\u52a0\u7684\uff0c\u662f\u7528\u6765\u5e2e\u52a9\u89e3\u91ca\u5668\u8bc6\u522b\u53d8\u91cf\u7684\u8fb9\u754c \u8fd0\u884c\u7ed3\u679c\u5c31\u662f z z</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_2","title":"\u53ea\u8bfb\u53d8\u91cf","text":"<p>\u4f7f\u7528readonly\u547d\u4ee4\u53ef\u4ee5\u5c06\u53d8\u91cf\u5b9a\u4e49\u4e3a\u53ea\u8bfb\u53d8\u91cf\uff0c\u53ea\u8bfb\u53d8\u91cf\u4e0d\u80fd\u6539\u53d8 <pre><code>#!/bin/bash\nmyname=\"zhynb\"\nreadonly myname\necho myname\nmyname=\" \"\n</code></pre> \u4f1a\u62a5\u9519\uff0c./helloshell.sh: line 12: myname: readonly variable</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_3","title":"\u5220\u9664\u53d8\u91cf","text":"<p>\u52a0\u4e0aunset\u5220\u9664\u8be5\u53d8\u91cf <pre><code>#!/bin/bash\nmyname=\"zhynb\"\nreadonly myname\nyck=\"yck\"\nunset yck\necho $yck\nunset myname\n</code></pre></p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#shell_2","title":"shell\u5b57\u7b26\u4e32","text":"<p>\u9664\u4e86\u6570\u5b57\u5c31\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5355\u5f15\u53f7\uff0c\u4e5f\u53ef\u4ee5\u7528\u53cc\u5f15\u53f7\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5f15\u53f7</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_4","title":"\u5355\u5f15\u53f7","text":"<p>\u5355\u5f15\u53f7\u4e2d\u7684\u4efb\u4f55\u5b57\u7b26\u90fd\u4f1a\u539f\u6837\u8f93\u51fa\uff0c\u5355\u5f15\u53f7\u4e2d\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u53d8\u91cf\u662f\u65e0\u6548\u7684 \u5355\u5f15\u53f7\u5b50\u4e32\u4e2d\u4e0d\u80fd\u51fa\u73b0\u5355\u72ec\u4e00\u4e2a\u7684\u5355\u5f15\u53f7\uff0c\u4f46\u53ef\u4ee5\u6210\u5bf9\u51fa\u73b0\uff0c\u4f5c\u4e3a\u5b57\u7b26\u4e32\u62fc\u63a5\u4f7f\u7528</p> <pre><code>str='this is a string'\n</code></pre>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_5","title":"\u53cc\u5f15\u53f7","text":"<p><pre><code>#!/bin/bash\nname='nbooo'\nstr=\"Hello,I know you are \"$name\" ! \\n\"\necho -e $str\n</code></pre> \u53cc\u5f15\u53f7\u53ef\u4ee5\u6709\u53d8\u91cf</p> <p>\u53ef\u4ee5\u6709\u8f6c\u4e49\u5b57\u7b26</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_6","title":"\u62fc\u63a5\u5b57\u7b26\u4e32","text":"<pre><code>#!/bin/bash\nname=\"zhy\"\n\ngreeting=\"hello,\"$name\"!\"\ngreeting_1=\"hello,${name}!\"\necho $greeting $greeting_1\n\ngreeting_2='hello,'$name'!'\ngreeting_3='hello,${name}!'\necho $greeting_2 $greeting_3\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c <pre><code>hello,zhy! hello,zhy!\nhello,zhy! hello,${name}!\n</code></pre></p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_7","title":"\u83b7\u5f97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6","text":"<p><pre><code>string=\"abcd\"\necho ${#string}\n</code></pre> \u8f93\u51fa4</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_8","title":"\u63d0\u53d6\u5b50\u5b57\u7b26\u4e32","text":"<pre><code>echo ${string: 0:2}#\u8f93\u51fa\u7684\u65f6ab\n#\u4ece0\u4f4d\u7f6e\u5f00\u59cb\u622a\u53d6\u4e24\u4e2a\u5b57\u7b26\n</code></pre>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_9","title":"\u67e5\u627e\u5b57\u7b26\u4e32","text":"<p><pre><code>echo `expr index \"$string\" c`\n</code></pre> \u5982\u679c\u627e\u4e0d\u5230\u4f1a\u8fd4\u56de0</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#shell_3","title":"Shell\u6570\u7ec4","text":"<p>\u6570\u7ec4\u5143\u7d20\u7684\u4e0b\u6807\u4ece0\u5f00\u59cb\u7f16\u53f7\uff0c\u4e0b\u8868\u53ef\u4ee5\u662f\u8bc1\u4e66\u6216\u8005\u7b97\u672f\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e0d\u9650\u5b9a\u6570\u7ec4\u7684\u5927\u5c0f</p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_10","title":"\u5b9a\u4e49\u6570\u7ec4","text":"<p>\u4e09\u79cd\u65b9\u5f0f <pre><code>array_name=(value0,value1,value2,value3)\n\narray_name1=(\n    value1\n    value2\n    value3\n    value4\n    value5\n)\n\narray_name2[0]=value0\narray_name2[1]=value1\n</code></pre></p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_11","title":"\u8bfb\u53d6\u6570\u7ec4","text":"<p>${\u6570\u7ec4\u540d[\u4e0b\u6807]}</p> <pre><code>valuen=${array_name[n]}\n</code></pre> <p>@\u7b26\u53f7\u53ef\u4ee5\u83b7\u53d6\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20 <pre><code>echo ${array_name[@]}\n</code></pre></p>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_12","title":"\u83b7\u53d6\u6570\u5b57\u7684\u957f\u5ea6","text":"<pre><code>length=${#array_name[@]}\n\nlength=${array_name[*]}\n#\u5355\u4e2a\u5143\u7d20\u7684\u957f\u5ea6\nlengthn=${#array_name[n]}\n</code></pre>"},{"location":"linux/Bash/%E5%9F%BA%E7%A1%80/#_13","title":"\u4f20\u9012\u53c2\u6570","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5728\u6267\u884c Shell \u811a\u672c\u65f6\uff0c\u5411\u811a\u672c\u4f20\u9012\u53c2\u6570\uff0c\u811a\u672c\u5185\u83b7\u53d6\u53c2\u6570\u7684\u683c\u5f0f\u4e3a $n\uff0cn \u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\uff0c1 \u4e3a\u6267\u884c\u811a\u672c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c2 \u4e3a\u6267\u884c\u811a\u672c\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002</p> <p>\u4f8b\u5982\u53ef\u4ee5\u4f7f\u7528 \\(1\u3001\\)2 \u7b49\u6765\u5f15\u7528\u4f20\u9012\u7ed9\u811a\u672c\u7684\u53c2\u6570\uff0c\u5176\u4e2d \\(1 \u8868\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\\)2 \u8868\u793a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u4f8b\u5982 <pre><code>#!/bin/bash\n# author:\u83dc\u9e1f\u6559\u7a0b\n# url:www.runoob.com\n\necho \"Shell \u4f20\u9012\u53c2\u6570\u5b9e\u4f8b\uff01\";\necho \"\u6267\u884c\u7684\u6587\u4ef6\u540d\uff1a$0\";\necho \"\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\uff1a$1\";\necho \"\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\uff1a$2\";\necho \"\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\uff1a$3\";\n\n\n$ chmod +x test.sh \n$ ./test.sh 1 2 3\nShell \u4f20\u9012\u53c2\u6570\u5b9e\u4f8b\uff01\n\u6267\u884c\u7684\u6587\u4ef6\u540d\uff1a./test.sh\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\uff1a1\n\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\uff1a2\n\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\uff1a3\n</code></pre></p> \u53c2\u6570\u5904\u7406 \u8bf4\u660e $# \u4f20\u9012\u5230\u811a\u672c\u7684\u53c2\u6570\u4e2a\u6570 $* \u4ee5\u4e00\u4e2a\u5355\u5b57\u7b26\u4e32\u663e\u793a\u6240\u6709\u5411\u811a\u672c\u4f20\u9012\u7684\u53c2\u6570\u3002 \u5982\"$*\" \u7528\u300c\"\u300d\u62ec\u8d77\u6765\u7684\u60c5\u51b5\u3001\u4ee5\"$1 $2 \u2026 $n\"\u7684\u5f62\u5f0f\u8f93\u51fa\u6240\u6709\u53c2\u6570\u3002 $$ \u811a\u672c\u8fd0\u884c\u7684\u5f53\u524d\u8fdb\u7a0bID\u53f7 $! \u540e\u53f0\u8fd0\u884c\u7684\u6700\u540e\u4e00\u4e2a\u8fdb\u7a0b\u7684ID\u53f7 $@ \u4e0e$*\u76f8\u540c\uff0c\u4f46\u662f\u4f7f\u7528\u65f6\u52a0\u5f15\u53f7\uff0c\u5e76\u5728\u5f15\u53f7\u4e2d\u8fd4\u56de\u6bcf\u4e2a\u53c2\u6570\u3002 \u5982\"$@\" \u7528\u300c\"\u300d\u62ec\u8d77\u6765\u7684\u60c5\u51b5\u3001\u4ee5\"\\(1\" \"\\)2\" \u2026 \"$n\" \u7684\u5f62\u5f0f\u8f93\u51fa\u6240\u6709\u53c2\u6570\u3002 $- \u663e\u793aShell\u4f7f\u7528\u7684\u5f53\u524d\u9009\u9879\uff0c\u4e0eset\u547d\u4ee4\u529f\u80fd\u76f8\u540c\u3002 $? \u663e\u793a\u6700\u540e\u547d\u4ee4\u7684\u9000\u51fa\u72b6\u6001\u30020\u8868\u793a\u6ca1\u6709\u9519\u8bef\uff0c\u5176\u4ed6\u4efb\u4f55\u503c\u8868\u660e\u6709\u9519\u8bef\u3002 <pre><code>#!/bin/bash\n# author:\u83dc\u9e1f\u6559\u7a0b\n# url:www.runoob.com\n\necho \"Shell \u4f20\u9012\u53c2\u6570\u5b9e\u4f8b\uff01\";\necho \"\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\uff1a$1\";\n\necho \"\u53c2\u6570\u4e2a\u6570\u4e3a\uff1a$#\";\necho \"\u4f20\u9012\u7684\u53c2\u6570\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u663e\u793a\uff1a$*\";\n\n$ chmod +x test.sh \n$ ./test.sh 1 2 3\nShell \u4f20\u9012\u53c2\u6570\u5b9e\u4f8b\uff01\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\uff1a1\n\u53c2\u6570\u4e2a\u6570\u4e3a\uff1a3\n\u4f20\u9012\u7684\u53c2\u6570\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u663e\u793a\uff1a1 2 3\n</code></pre> <p>$* \u4e0e $@ \u533a\u522b\uff1a</p> <p>\u76f8\u540c\u70b9\uff1a\u90fd\u662f\u5f15\u7528\u6240\u6709\u53c2\u6570\u3002 \u4e0d\u540c\u70b9\uff1a\u53ea\u6709\u5728\u53cc\u5f15\u53f7\u4e2d\u4f53\u73b0\u51fa\u6765\u3002\u5047\u8bbe\u5728\u811a\u672c\u8fd0\u884c\u65f6\u5199\u4e86\u4e09\u4e2a\u53c2\u6570 1\u30012\u30013\uff0c\u5219 \" * \" \u7b49\u4ef7\u4e8e \"1 2 3\"\uff08\u4f20\u9012\u4e86\u4e00\u4e2a\u53c2\u6570\uff09\uff0c\u800c \"@\" \u7b49\u4ef7\u4e8e \"1\" \"2\" \"3\"\uff08\u4f20\u9012\u4e86\u4e09\u4e2a\u53c2\u6570\uff09\u3002</p> <p>```</p>"},{"location":"linux/Bash/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"test\u547d\u4ee4","text":"<p>Shell\u4e2d\u7684 test \u547d\u4ee4\u7528\u4e8e\u68c0\u67e5\u67d0\u4e2a\u6761\u4ef6\u662f\u5426\u6210\u7acb\uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c\u6570\u503c\u3001\u5b57\u7b26\u548c\u6587\u4ef6\u4e09\u4e2a\u65b9\u9762\u7684\u6d4b\u8bd5</p> \u53c2\u6570 \u8bf4\u660e -eq \u7b49\u4e8e\u5219\u4e3a\u771f -ne \u4e0d\u7b49\u4e8e\u5219\u4e3a\u771f -gt \u5927\u4e8e\u5219\u4e3a\u771f -ge \u5927\u4e8e\u7b49\u4e8e\u5219\u4e3a\u771f -lt \u5c0f\u4e8e\u5219\u4e3a\u771f -le \u5c0f\u4e8e\u7b49\u4e8e\u5219\u4e3a\u771f <p><pre><code>num1=100\nnum2=100\nif test $[num1] -eq $[num2]\nthen\n    echo '\u4e24\u4e2a\u6570\u76f8\u7b49\uff01'\nelse\n    echo '\u4e24\u4e2a\u6570\u4e0d\u76f8\u7b49\uff01'\nfi\n</code></pre> \u4ee3\u7801\u4e2d\u7684 [] \u6267\u884c\u57fa\u672c\u7684\u7b97\u6570\u8fd0\u7b97\uff0c\u5982 <pre><code>a=5\nb=6\n\nresult=$[a+b] # \u6ce8\u610f\u7b49\u53f7\u4e24\u8fb9\u4e0d\u80fd\u6709\u7a7a\u683c\necho \"result \u4e3a\uff1a $result\"\n</code></pre></p> \u53c2\u6570 \u8bf4\u660e = \u7b49\u4e8e\u5219\u4e3a\u771f != \u4e0d\u76f8\u7b49\u5219\u4e3a\u771f -z \u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a\u96f6\u5219\u4e3a\u771f -n \u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4e3a\u96f6\u5219\u4e3a\u771f"},{"location":"linux/Bash/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","title":"if-else","text":"<p><pre><code>if condition\nthen\n    command1 \n    command2\n    ...\n    commandN \nfi\n</code></pre> \u5199\u6210\u4e00\u884c <pre><code>if [ $(ps -ef | grep -c \"ssh\") -gt 1 ]; then echo \"true\"; fi\n</code></pre></p> <pre><code>if [ \"$a\" -gt \"$b\" ]; then\n    ...\nfi\n</code></pre> <p>``shell</p> <p>```</p>"},{"location":"linux/Bash/%E8%87%AA%E9%94%AE%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F/","title":"\u81ea\u952e\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;assert.h&gt;\n\n#define NUM 1024\n#define OPT_NUM 64\n\nchar lineCommand[NUM];\nchar *myargv[OPT_NUM]; //\u6307\u9488\u6570\u7ec4\nint  lastCode = 0;\nint  lastSig = 0;\n\nint main()\n{\n    while(1)\n    {\n        // \u8f93\u51fa\u63d0\u793a\u7b26\n        printf(\"\u7528\u6237\u540d@\u4e3b\u673a\u540d \u5f53\u524d\u8def\u5f84# \");\n        fflush(stdout);\n\n        // \u83b7\u53d6\u7528\u6237\u8f93\u5165, \u8f93\u5165\u7684\u65f6\u5019\uff0c\u8f93\u5165\\n\n        char *s = fgets(lineCommand, sizeof(lineCommand)-1, stdin);\n        assert(s != NULL);\n        (void)s;\n        // \u6e05\u9664\u6700\u540e\u4e00\u4e2a\\n , abcd\\n\n        lineCommand[strlen(lineCommand)-1] = 0; // ?\n        //printf(\"test : %s\\n\", lineCommand);\n\n        // \"ls -a -l -i\" -&gt; \"ls\" \"-a\" \"-l\" \"-i\" -&gt; 1-&gt;n\n        // \u5b57\u7b26\u4e32\u5207\u5272\n        myargv[0] = strtok(lineCommand, \" \");\n        int i = 1;\n        if(myargv[0] != NULL &amp;&amp; strcmp(myargv[0], \"ls\") == 0)\n        {\n            myargv[i++] = (char*)\"--color=auto\";\n        }\n\n        // \u5982\u679c\u6ca1\u6709\u5b50\u4e32\u4e86\uff0cstrtok-&gt;NULL, myargv[end] = NULL\n        while(myargv[i++] = strtok(NULL, \" \"));\n\n        // \u5982\u679c\u662fcd\u547d\u4ee4\uff0c\u4e0d\u9700\u8981\u521b\u5efa\u5b50\u8fdb\u7a0b,\u8ba9shell\u81ea\u5df1\u6267\u884c\u5bf9\u5e94\u7684\u547d\u4ee4\uff0c\u672c\u8d28\u5c31\u662f\u6267\u884c\u7cfb\u7edf\u63a5\u53e3\n        // \u50cf\u8fd9\u79cd\u4e0d\u9700\u8981\u8ba9\u6211\u4eec\u7684\u5b50\u8fdb\u7a0b\u6765\u6267\u884c\uff0c\u800c\u662f\u8ba9shell\u81ea\u5df1\u6267\u884c\u7684\u547d\u4ee4 --- \u5185\u5efa/\u5185\u7f6e\u547d\u4ee4\n        if(myargv[0] != NULL &amp;&amp; strcmp(myargv[0], \"cd\") == 0)\n        {\n            if(myargv[1] != NULL) chdir(myargv[1]);\n            continue;\n        }\n        if(myargv[0] != NULL &amp;&amp; myargv[1] != NULL &amp;&amp; strcmp(myargv[0], \"echo\") == 0)\n        {\n            if(strcmp(myargv[1], \"$?\") == 0)\n            {\n                printf(\"%d, %d\\n\", lastCode, lastSig);\n            }\n            else\n            {\n                printf(\"%s\\n\", myargv[1]);\n            }\n            continue;\n        }\n        // \u6d4b\u8bd5\u662f\u5426\u6210\u529f, \u6761\u4ef6\u7f16\u8bd1\n#ifdef DEBUG\n        for(int i = 0 ; myargv[i]; i++)\n        {\n            printf(\"myargv[%d]: %s\\n\", i, myargv[i]);\n        }\n#endif\n        // \u5185\u5efa\u547d\u4ee4 --&gt; echo\n\n        // \u6267\u884c\u547d\u4ee4\n        pid_t id = fork();\n        assert(id != -1);\n\n        if(id == 0)\n        {\n            execvp(myargv[0], myargv);\n            exit(1);\n        }\n        int status = 0;\n        pid_t ret = waitpid(id, &amp;status, 0);\n        assert(ret &gt; 0);\n        (void)ret;\n        lastCode = ((status&gt;&gt;8) &amp; 0xFF);\n        lastSig = (status &amp; 0x7F);\n    }\n}\n</code></pre> <p>\u81ea\u5df1\u7684\u6587\u4ef6\u4ee3\u7801 <pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;assert.h&gt;\n\n// \u6211\u6ca1\u6709\u6307\u660e\u8def\u5f84\n#define FILE_NAME(number) \"log.txt\"#number \n\n// \u6bcf\u4e00\u4e2a\u5b8f\uff0c\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u53ea\u6709\u4e00\u4e2a\u6bd4\u7279\u4f4d\u662f1,\u5f7c\u6b64\u4f4d\u7f6e\u4e0d\u91cd\u53e0\n//#define ONE (1&lt;&lt;0)\n//#define TWO (1&lt;&lt;1)\n//#define THREE  (1&lt;&lt;2)\n//#define FOUR (1&lt;&lt;3)\n\n//void show(int flags)\n//{\n//    if(flags &amp; ONE) printf(\"one\\n\");\n//    if(flags &amp; TWO) printf(\"two\\n\");\n//    if(flags &amp; THREE) printf(\"three\\n\");\n//    if(flags &amp; FOUR) printf(\"four\\n\");\n//}\n\n\nint main()\n{\n    printf(\"stdin-&gt;fd: %d\\n\", stdin-&gt;_fileno);\n    printf(\"stdout-&gt;fd: %d\\n\", stdout-&gt;_fileno);\n    printf(\"stderr-&gt;fd: %d\\n\", stderr-&gt;_fileno);\n    umask(0);\n    // \"w\" -&gt; O_WRONLY | O_CREAT | O_TRUNC, 0666, O_APPEND\n    // \"a\"\n    int fd0 = open(FILE_NAME(1), O_WRONLY | O_CREAT | O_APPEND, 0666);\n    int fd1 = open(FILE_NAME(2), O_WRONLY | O_CREAT | O_APPEND, 0666);\n    int fd2 = open(FILE_NAME(3), O_WRONLY | O_CREAT | O_APPEND, 0666);\n    int fd3 = open(FILE_NAME(4), O_WRONLY | O_CREAT | O_APPEND, 0666);\n    int fd4 = open(FILE_NAME(5), O_WRONLY | O_CREAT | O_APPEND, 0666);\n    //int fd = open(FILE_NAME, O_RDONLY);\n   // if(fd &lt; 0)\n   // {\n   //     perror(\"open\");\n   //     return 1;\n   // }\n\n   // char buffer[1024];\n   // ssize_t num = read(fd, buffer, sizeof(buffer)-1);\n   // if(num &gt; 0) buffer[num] = 0; // 0, '\\0', NULL -&gt; 0\n   // printf(\"%s\", buffer);\n\n\n\n   // int cnt = 5;\n   // char outBuffer[64];\n   // while(cnt)\n   // {\n   //     sprintf(outBuffer, \"%s:%d\\n\", \"aaaa\", cnt--);\n   //     // \u4f60\u4ee5\\0\u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\uff0c\u662fC\u8bed\u8a00\u7684\u89c4\u5b9a\uff0c\u548c\u6211\u6587\u4ef6\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\n   //     write(fd, outBuffer, strlen(outBuffer)); //\u5411\u6587\u4ef6\u4e2d\u5199\u5165string\u7684\u65f6\u5019\uff0c\u8981\u4e0d\u8981+1 ? 1 0\n   // }\n\n    printf(\"fd: %d\\n\", fd0);\n    printf(\"fd: %d\\n\", fd1);\n    printf(\"fd: %d\\n\", fd2);\n    printf(\"fd: %d\\n\", fd3);\n    printf(\"fd: %d\\n\", fd4);\n    close(fd0);\n    close(fd1);\n    close(fd2);\n    close(fd3);\n    close(fd4);\n    // \u7ec6\u8282\u95ee\u9898\n    // \u4ee5w\u65b9\u5f0f\u5355\u7eaf\u7684\u6253\u5f00\u6587\u4ef6\uff0cc\u4f1a\u81ea\u52a8\u6e05\u7a7a\u5185\u90e8\u7684\u6570\u636e\n\n//    show(ONE);\n//    printf(\"-----------------------\\n\");\n//    show(TWO);\n//    printf(\"-----------------------\\n\");\n//    show(ONE | TWO);\n//    printf(\"-----------------------\\n\");\n//    show(ONE | TWO | THREE);\n//    printf(\"-----------------------\\n\");\n//    show(ONE | TWO | THREE | FOUR);\n//    printf(\"-----------------------\\n\");\n//\n\n\n    // 0666 &amp; ~umask\n//    FILE *fp = fopen(FILE_NAME, \"w\"); //r,w, r+(\u8bfb\u5199,\u4e0d\u5b58\u5728\u51fa\u9519),w+(\u8bfb\u5199, \u4e0d\u5b58\u5728\u521b\u5efa), a(append, \u8ffd\u52a0), a+()\n//    //FILE *fp = fopen(FILE_NAME, \"r\"); //r,w, r+(\u8bfb\u5199,\u4e0d\u5b58\u5728\u51fa\u9519),w+(\u8bfb\u5199, \u4e0d\u5b58\u5728\u521b\u5efa), a(append, \u8ffd\u52a0), a+()\n//    //FILE *fp = fopen(FILE_NAME, \"a\"); //r,w, r+(\u8bfb\u5199,\u4e0d\u5b58\u5728\u51fa\u9519),w+(\u8bfb\u5199, \u4e0d\u5b58\u5728\u521b\u5efa), a(append, \u8ffd\u52a0), a+()\n//    if(NULL == fp)\n//    {\n//        perror(\"fopen\"); //?\n//        return 1;\n//    }\n//\n//   // char buffer[64];\n//   // while(fgets(buffer, sizeof(buffer) - 1, fp) != NULL)\n//   // {\n//   //     buffer[strlen(buffer) - 1] = 0;\n//   //     puts(buffer);\n//   // }\n//\n//    //int cnt = 5;\n//    //while(cnt)\n//    //{\n//    //    fprintf(fp, \"%s:%d\\n\", \"hello bit\", cnt--);\n//    //}\n//\n//    fclose(fp);\n//\n//    chdir(\"/home/whb\");\n//    while(1)\n//    {\n//        printf(\"\u6211\u662f\u4e00\u4e2a\u8fdb\u7a0b: %d\\n\", getpid());\n//        sleep(1);\n//    }\n}\n</code></pre></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n\n\nint main()\n{\n    //close(0);\n    //close(2);\n    //close(1);\n    umask(0);\n    //int fd = open(\"log.txt\", O_WRONLY | O_CREAT | O_TRUNC, 0666);\n    //int fd = open(\"log.txt\", O_WRONLY | O_CREAT | O_APPEND, 0666);\n    int fd = open(\"log.txt\", O_RDONLY);\n    if(fd &lt; 0)\n    {\n        perror(\"open\");\n        return 1;\n    }\n\n    dup2(fd, 0); //\u8f93\u5165\u91cd\u5b9a\u5411\n\n    char line[64];\n\n    while(1)\n    {\n        printf(\"&gt; \"); \n        if(fgets(line, sizeof(line), stdin) == NULL) break; //stdin-&gt;0\n        printf(\"%s\", line);\n    }\n\n\n    //dup2(fd, 1);\n\n    //printf(\"open fd: %d\\n\", fd); // printf -&gt; stdout\n    //fprintf(stdout, \"open fd: %d\\n\", fd); // printf -&gt; stdout\n\n    //const char *msg= \"hello world\";\n    //write(1, msg, strlen(msg));\n\n    //fflush(stdout);\n    close(fd);\n    return 0;\n}\n</code></pre>"},{"location":"linux/linux%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/","title":"ls","text":"<p>\u7528\u4e8e\u5c55\u793a\u6587\u4ef6\u5939\u91cc\u90fd\u6709\u4ec0\u4e48\u4e1c\u897f \u5728\u6267\u884c<code>whereis ls</code>\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e</p> <p></p> <p>\u7b2c\u4e00\u4e2a     \u770b\u8d77\u6765\u662f\u547d\u4ee4\u7684\u4f4d\u7f6e \u7b2c\u4e8c\u4e2a     \u770b\u8d77\u6765\u662f\u4e00\u4e2a\u6587\u4ef6     \u800c\u4e14\u50cf\u4e00\u4e2aman \u578b\u7684\u5e2e\u52a9\u624b\u518c     \u628a\u4ed6\u5f53\u505aman\u7684\u53c2\u6570</p>"},{"location":"linux/linux%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E9%80%80%E5%87%BA/","title":"\u8fdb\u7a0b\u9000\u51fa\u6709\u4e09\u79cd\u60c5\u51b5","text":"<p>\u4ee3\u7801\u8fd0\u884c\u5b8c\uff0c\u7ed3\u679c\u6b63\u786e--return 0; \u4ee3\u7801\u8fd0\u884c\u5b8c\uff0c\u7ed3\u679c\u4e0d\u6b63\u786e--return !0; \u4ee3\u7801\u6ca1\u8dd1\u5b8c\uff0c\u7a0b\u5e8f\u5f02\u5e38\u4e86\uff0c\u9000\u51fa\u5417\u65e0\u610f\u4e49\u3002</p>"},{"location":"linux/linux%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E9%80%80%E5%87%BA/#_2","title":"\u8fdb\u7a0b\u5982\u4f55\u9000\u51fa","text":"<p>\u5728main\u51fd\u6570\u91ccreturn\u8fd4\u56de \u4efb\u610f\u5730\u65b9\u8c03\u7528exit(code)-\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u4e3b\u52a8\u5237\u65b0\u7f13\u5b58\u533a _exit()\uff1b-\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u4e0d\u4f1a\u5237\u65b0\u7f13\u5b58\u533a</p>"},{"location":"linux/linux%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E9%80%80%E5%87%BA/#_3","title":"\u8fdb\u7a0b\u7b49\u5f85","text":""},{"location":"linux/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85/","title":"\u751f\u4ea7\u8005\u4e0e\u6d88\u8d39\u8005","text":"<p>\u201c\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u201d\u95ee\u9898\u63cf\u8ff0\u5982\u4e0b\u3002 \u6709\u4e00\u4e2a\u6709\u9650\u7f13\u51b2\u533a\u548c\u4e24\u4e2a\u7ebf\u7a0b\uff1a\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u3002 \u4ed6\u4eec\u5206\u522b\u628a\u4ea7\u54c1\u653e\u5165\u7f13\u51b2\u533a\u548c\u4ece\u7f13\u51b2\u533a\u4e2d\u62ff\u8d70\u4ea7\u54c1\u3002 \u5f53\u4e00\u4e2a\u751f\u4ea7\u8005\u5728\u7f13\u51b2\u533a\u6ee1\u65f6\u5fc5\u987b\u7b49\u5f85\uff0c\u5f53\u4e00\u4e2a\u6d88\u8d39\u8005\u5728\u7f13\u51b2\u533a\u7a7a\u65f6\u4e5f\u5fc5\u987b\u7b49\u5f85\u3002 </p>"},{"location":"linux/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/","title":"execve\u51fd\u6570","text":"<p>execve.c <pre><code>#include&lt;stdio.h&gt;\n#include&lt;unistd.h&gt;\n#include&lt;sys/types.h&gt;\nextern char** environ;\nint main(int argc,char* argv[])\n{\n    execve(\"new2\",argv,environ);\n    puts(\"\u6b63\u5e38\u60c5\u51b5\u4e0b\u770b\u4e0d\u89c1\u8be5\u6761\u4fe1\u606f\");\n\n}\n</code></pre> new2.c <pre><code>#include&lt;stdio.h&gt;\n#include&lt;unistd.h&gt;\n#include&lt;sys/types.h&gt;\n\nint main(void){\n    puts(\"\u5e94\u8be5\u770b\u5230\u8fd9\u6761\u6d88\u606f\");\n    return 0;\n}\n</code></pre> \u6700\u540e\u7684\u8fd0\u884c\u7ed3\u679c\u662f:\u5e94\u8be5\u770b\u5230\u8fd9\u6761\u6d88\u606f \u56e0\u4e3aexecve\u4e2d\u5c06\u8fdb\u7a0b\u66ff\u6362\u4e3a\u540e\u8005</p> <p>\u4f7f\u7528execlp\u51fd\u6570\uff0c\u8c03\u7528vim</p> <pre><code>#include&lt;sys/types.h&gt;\n#include&lt;unistd.h&gt;\n#include&lt;stdio.h&gt;\n\nint main(int argc,char*argv[])\n{\n    if(argc&lt;2)\n    {\n        printf(\"vi\u7684\u7b49\u6548\u7528\u6cd5\uff1a  %s filename\\n\",argv[0]);\n        return 1;\n    }\n    execlp(\"/bin/vi\",argv[1],(char*)NULL);\n    return 0;\n}\n</code></pre>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/","title":"\u4fe1\u53f7\u7684\u6982\u5ff5","text":"<ol> <li>\u8fdb\u7a0b\u4e00\u5b9a\u8981\u6709\u8bc6\u522b\u548c\u5904\u7406\u4fe1\u53f7\u7684\u80fd\u529b\uff0c\u4fe1\u53f7\u7684\u5904\u7406\u80fd\u529b\u5c5e\u4e8e\u8fdb\u7a0b\u5185\u7f6e\u529f\u80fd\u3002</li> <li>\u5f53\u8fdb\u7a0b\u63a5\u6536\u5230\u4fe1\u53f7\u6709\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u5904\u7406\u3002</li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#ctrl-c","title":"\u4e3a\u4ec0\u4e48ctrl + c \u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u7ec8\u6b62?","text":"<p>linux\u4e2d\uff0c\u4e00\u6b21\u767b\u5f55\uff0c\u53ea\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u662f\u524d\u53f0\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u591a\u4e2a\u8fdb\u7a0b\u662f\u540e\u53f0\u8fdb\u7a0b\uff0c\uff08\u533a\u522b\u662f\uff0c\u524d\u53f0\u8fdb\u7a0b\u53ef\u4ee5\u83b7\u53d6\u952e\u76d8\u8f93\u5165\uff09 ctrl + c \u4ea7\u751f\u4e00\u4e2a\u4fe1\u53f7\uff0c\u53d1\u9001\u7ed9\u524d\u53f0\u8fdb\u7a0b\uff0c\u524d\u53f0\u8fdb\u7a0b\u6536\u5230\u4fe1\u53f7\u540e\uff0c\u5c31\u4f1a\u7ec8\u6b62\u3002 \u672c\u8d28\u662f\u88ab\u8fdb\u7a0b\u89e3\u91ca\u4e3a\u6536\u5230\u7684\u4fe1\u53f7\uff0c2\u53f7\u4fe1\u53f7\uff08SIGINT\uff09\u3002   </p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#ctrl-c_1","title":"\u952e\u76d8\u6570\u636e\u5982\u4f55\u8f93\u5165\u7ed9\u5185\u6838\uff0cctrl + c \u5982\u4f55\u7ed9\u5185\u6838\u53d1\u9001\u4fe1\u53f7?","text":"<ol> <li>\u5f53\u7528\u6237\u8f93\u5165\u6570\u636e\u65f6\uff0c\u952e\u76d8\u9a71\u52a8\u7a0b\u5e8f\u5c06\u6570\u636e\u5199\u5165\u5230\u7ec8\u7aef\u8bbe\u5907\u6587\u4ef6\u4e2d\uff0c\u5982\uff1a/dev/tty1    \u5199\u5165\u5185\u6838\u76f8\u5e94\u7684\u7f13\u51b2\u533a\uff0c\u5982\u679c\u7f13\u51b2\u533a\u6ee1\u5c31\u7ed9CPU\u53d1\u51fa\u4e2d\u65ad\u7533\u8bf7\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u4e2d\u65ad\u5411\u91cf\u8868\u627e\u5230\u76f8\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c06\u6570\u636e\u4ece\u7f13\u51b2\u533a\u62f7\u8d1d\u5230\u5185\u6838\u7684\u8bfb\u7f13\u51b2\u533a\u4e2d\u3002</li> <li>\u5f53\u7528\u6237\u6309\u4e0bctrl + c\u65f6\uff0c\u952e\u76d8\u9a71\u52a8\u7a0b\u5e8f\u5c06ctrl + c\u89e3\u91ca\u4e3a2\u53f7\u4fe1\u53f7\uff0c\u5199\u5165\u5230\u7ec8\u7aef\u8bbe\u5907\u6587\u4ef6\u4e2d\uff0c\u5982\uff1a/dev/tty1</li> <li>\u5f53\u7ec8\u7aef\u8bbe\u5907\u6587\u4ef6\u6709\u6570\u636e\u53ef\u8bfb\u65f6\uff0c\u5185\u6838\u4f1a\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u5224\u65ad\u6570\u636e\u662f\u5426\u662f\u4fe1\u53f7\uff0c\u5982\u679c\u662f\u4fe1\u53f7\uff0c\u5219\u53d1\u9001\u7ed9\u524d\u53f0\u8fdb\u7a0b\u3002</li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_2","title":"\u4fe1\u53f7\u7684\u4ea7\u751f","text":"<p>\u9996\u5148\u4e0d\u662f\u6240\u6709\u7684\u4fe1\u53f7\u90fd\u53ef\u4ee5\u88absignal\u6355\u6349\uff0cSIGKILL\u548cSIGSTOP\u4fe1\u53f7\u4e0d\u80fd\u88ab\u6355\u6349\uff0c\u4e5f\u4e0d\u80fd\u88ab\u5ffd\u7565\uff0c\u53ea\u80fd\u88ab\u963b\u585e\u3002</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_3","title":"\u5feb\u6377\u952e\u4ea7\u751f\u4fe1\u53f7","text":"<p>ctrl + c \u4ea7\u751f2\u53f7\u4fe1\u53f7\uff08SIGINT\uff09 ctrl +  \u4ea7\u751f3\u53f7\u4fe1\u53f7\uff08SIGQUIT\uff09 ctrl + z \u4ea7\u751f18\u53f7\u4fe1\u53f7\uff08SIGTSTP\uff09 ctrl + d \u4ea7\u751f4\u53f7\u4fe1\u53f7\uff08SIGTERM\uff09</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_4","title":"\u7cfb\u7edf\u8c03\u7528\u4ea7\u751f\u4fe1\u53f7","text":""},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#kill","title":"kill()\u51fd\u6570\u4ea7\u751f\u4fe1\u53f7","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;cstdlib&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nvoid myhandler(int signo) {\n    cout &lt;&lt; \"Process received signal: \" &lt;&lt; signo &lt;&lt; endl;\n    exit(2);\n}\n\nvoid Usage(string proc) {\n    cout &lt;&lt; \"Usage:\\n\\t\" &lt;&lt; proc &lt;&lt; \" signum pid\\n\\n\";\n}\n\nint main(int argc, char *argv[]) {\n\n    signal(2, myhandler); \n\n    if (argc != 3) {\n        Usage(argv[0]);\n        exit(1);\n    }\n\n    int signum = stoi(argv[1]); // \u5b57\u7b26\u4e32\u8f6c\u4e3a INT\n    pid_t pid = stoi(argv[2]);\n\n\n    int n = kill(pid, signum);\n    if (n == -1) {\n        perror(\"kill\");\n        exit(2);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#raise","title":"raise()\u51fd\u6570\u4ea7\u751f\u4fe1\u53f7","text":"<pre><code>SYNOPSIS\n       #include &lt;signal.h&gt;\n\n       int raise(int sig);  \n       //\u672c\u8d28\u662f\n       kill(getpid(), sig);\n</code></pre>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#abort","title":"abort()\u51fd\u6570\u4ea7\u751f\u4fe1\u53f7","text":"<pre><code>SYNOPSIS\n       #include &lt;signal.h&gt;\n\n       void abort(void);\n</code></pre>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_5","title":"\u4fe1\u53f7\u7684\u6355\u6349\u548c\u5904\u7406","text":"<p>\u4fe1\u53f7\u8303\u56f4[1,31]\uff0c\u6bcf\u79cd\u4fe1\u53f7\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u79cd\u5904\u7406\u65b9\u6cd5 \u7c7b\u578b\u662ftypedef void (*handler_t)(int);\u51fd\u6570\u6307\u9488 handler_t handler[31];\u8fd9\u4e2a\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6307\u9488\u90fd\u53ef\u4ee5\u901a\u8fc7\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4fee\u6539\u4e3a\u81ea\u5b9a\u4e49\u5904\u7406\u51fd\u6570</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_6","title":"\u4fe1\u53f7\u5904\u7406\u65b9\u5f0f","text":"<ol> <li>\u5ffd\u7565\u4fe1\u53f7</li> <li>\u6267\u884c\u9ed8\u8ba4\u64cd\u4f5c</li> <li>\u6267\u884c\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570</li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_7","title":"\u4fe1\u53f7\u5904\u7406\u51fd\u6570","text":"<p><pre><code>#include &lt;signal.h&gt;\n\nvoid (*signal(int sig, void (*func)(int)))(int);\n</code></pre> \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4fe1\u53f7\u7f16\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u6307\u9488\u3002</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_8","title":"\u4e09\u5f20\u8868","text":"<p>\u6bcf\u4e2a\u8fdb\u7a0b\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u4e2d\u5bf9\u5e94\u4e09\u4e2a\u8868 \u5206\u522b\u662fblock\u8868\uff0c\u4f5c\u7528\u662f\u8868\u9762\u5f53\u524d\u4fe1\u53f7\u662f\u5426\u88ab\u5c4f\u853d pending\u8868\uff0c\u4f5c\u7528\u662f\u8868\u9762\u5f53\u524d\u4fe1\u53f7\u662f\u5426\u88ab\u6302\u8d77\uff08\u4e5f\u5c31\u662f\u662f\u5426\u5230\u8fbe\uff0c\u5982\u679c\u5230\u8fbe\u5e76\u4e14\u6ca1\u88ab\u5c4f\u853d\uff0c\u5c31\u4f1a\u8fdb\u884c\u4fe1\u53f7\u7684\u5904\u7406\uff09\u3002 handler\u8868\uff0c\u8868\u9762\u5f53\u524d\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u5f0f</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_9","title":"\u63a5\u53e3","text":"<p><pre><code>#include &lt;signal.h&gt;\n\nint sigemptyset(sigset_t *set);\n</code></pre> \u5c06\u4e00\u4e2a\u4fe1\u53f7\u96c6\uff08sigset_t \u7c7b\u578b\uff09\u6e05\u7a7a\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u8be5\u4fe1\u53f7\u96c6\u4e2d\u6240\u6709\u7684\u4fe1\u53f7\u90fd\u8bbe\u7f6e\u4e3a\u4e0d\u5305\u542b\u72b6\u6001\u3002</p> <pre><code>#include &lt;signal.h&gt;\n\nint sigaddset(sigset_t *set, int signum);\n</code></pre> <p>sigaddset \u662f\u4e00\u4e2a\u7528\u4e8e\u5411\u4fe1\u53f7\u96c6\uff08sigset_t \u7c7b\u578b\uff09\u4e2d\u6dfb\u52a0\u7279\u5b9a\u4fe1\u53f7\u7684\u51fd\u6570\u3002</p> <p><pre><code>#include &lt;signal.h&gt;\n\nint sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n</code></pre> sigprocmask \u662f\u4e00\u4e2a\u7528\u4e8e\u4fee\u6539\u5f53\u524d\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5c4f\u853d\u5b57\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u4fe1\u53f7\u5c4f\u853d\u5b57\u5b9a\u4e49\u4e86\u54ea\u4e9b\u4fe1\u53f7\u5728\u8fdb\u7a0b\u6267\u884c\u671f\u95f4\u88ab\u963b\u585e\uff08\u5373\u4e0d\u88ab\u5904\u7406\uff09\u3002 how: \u6307\u5b9a\u5982\u4f55\u4fee\u6539\u4fe1\u53f7\u5c4f\u853d\u5b57\u7684\u64cd\u4f5c\u3002\u53ef\u4ee5\u662f\u4ee5\u4e0b\u503c\u4e4b\u4e00\uff1a     SIG_BLOCK: \u5c06 set \u4e2d\u7684\u4fe1\u53f7\u6dfb\u52a0\u5230\u5f53\u524d\u7684\u4fe1\u53f7\u5c4f\u853d\u5b57\u4e2d\u3002     SIG_UNBLOCK: \u4ece\u5f53\u524d\u7684\u4fe1\u53f7\u5c4f\u853d\u5b57\u4e2d\u5220\u9664 set \u4e2d\u7684\u4fe1\u53f7\u3002     SIG_SETMASK: \u5c06\u5f53\u524d\u7684\u4fe1\u53f7\u5c4f\u853d\u5b57\u8bbe\u7f6e\u4e3a set \u4e2d\u7684\u4fe1\u53f7\u3002 set: \u6307\u5411\u4e00\u4e2a sigset_t \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u8868\u793a\u8981\u6dfb\u52a0\u3001\u5220\u9664\u6216\u8bbe\u7f6e\u7684\u4fe1\u53f7\u96c6\u3002 oldset: \u6307\u5411\u4e00\u4e2a sigset_t \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u4fee\u6539\u524d\u7684\u4fe1\u53f7\u5c4f\u853d\u5b57\uff08\u5982\u679c\u4e0d\u9700\u8981\uff0c\u53ef\u4ee5\u4f20\u9012 NULL\uff09\u3002</p> <p><pre><code>#include &lt;signal.h&gt;\n\nint sigpending(sigset_t *set);\n</code></pre> sigpending \u662f\u4e00\u4e2a\u7528\u4e8e\u68c0\u67e5\u5f53\u524d\u8fdb\u7a0b\u4e2d\u88ab\u963b\u585e\u4f46\u5c1a\u672a\u5904\u7406\u7684\u4fe1\u53f7\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u4e5f\u5c31\u662f\u5f97\u5230pending\u8868\u4e2d\u7684\u5185\u5bb9</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#2","title":"\u5c0f\u6848\u4f8b\uff08\u5148\u5c4f\u853d2\u53f7\u4fe1\u53f7\uff0c\u540e\u91ca\u653e\uff09","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;unistd.h&gt;\n#include&lt;signal.h&gt;\n\nusing namespace std;\n\nvoid handler(int singno){\n    cout&lt;&lt;\"catch a signo: \"&lt;&lt;singno&lt;&lt;endl;\n}\n\nvoid PrintPending(sigset_t &amp;pending){\n    for(int signo=31;signo&gt;=1;signo--){\n        if(sigismember(&amp;pending,signo))\n        {\n            cout&lt;&lt;\"1\";\n        }else{\n            cout&lt;&lt;\"0\";\n        }\n    }\n    cout&lt;&lt;\"\\n\\n\";\n}\n\nint main(){\n    //\u5bf92\u53f7\u65b0\u53f7\u8fdb\u884c\u81ea\u5b9a\u4e49\u5904\u7406\n    signal(2,handler);\n\n    //\u521d\u59cb\u5316\u4e24\u4e2a\u4fe1\u53f7\u96c6\n    sigset_t bset,oset;\n    sigemptyset(&amp;bset);\n    sigemptyset(&amp;oset);\n\n    sigaddset(&amp;bset,2);\n    sigprocmask(SIG_SETMASK,&amp;bset,&amp;oset);\n\n    sigset_t pending;\n    int cnt=10;\n    while(true){\n        int n=sigpending(&amp;pending);\n        if(n&lt;0){\n            continue;\n        }\n\n        PrintPending(pending);\n        sleep(1);\n        cnt--;\n        if(cnt==0){\n            sigprocmask(SIG_SETMASK,&amp;oset,nullptr);\n            cout&lt;&lt;\"unblock 2 signo \"&lt;&lt;endl;\n        }\n    }\n    //\u7ee7\u7eed\u53d1\u90012\u53f7\u4fe1\u53f7\u7ed3\u679c\u5e94\u8be5\u4e3a\n    //\u51680\n}\n</code></pre>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_10","title":"\u4fe1\u53f7\u4ec0\u4e48\u65f6\u5019\u88ab\u5904\u7406","text":"<p>\u5f53\u8fdb\u7a0b\u4ece\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u65f6\u5019\uff0c\u8fdb\u884c\u4fe1\u53f7\u7684\u68c0\u6d4b\u548c\u5904\u7406 \u5185\u6838\u6001\uff1a\u5141\u8bb8\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u5e94\u7684\u4ee3\u7801\u548c\u6570\u636e \u7528\u6237\u6001\uff1a\u5141\u8bb8\u8bbf\u95ee\u81ea\u5df1\u7684\u4ee3\u7801\u548c\u6570\u636e</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_11","title":"\u4fe1\u53f7\u7684\u6355\u6349","text":"<ol> <li>\u7528\u6237\u6001\uff0c\u5728\u4e3b\u63a7\u5236\u6d41\u7a0b\u4e2d\u56e0\u4e3a\u6267\u884c\u67d0\u6761\u6307\u4ee4\u56e0\u4e3a\u4e2d\u65ad\uff0c\u5f02\u5e38\u6216\u8005\u7cfb\u7edf\u8c03\u7528\u8fdb\u5165\u5185\u6838\u3002</li> <li>\u5185\u6838\u6001\uff0c\u5185\u6838\u5904\u7406\u5b8c\u5f02\u5e38\u51c6\u5907\u8fd4\u56de\u7528\u6237\u6a21\u5f0f\u4e4b\u524d\u53ef\u4ee5\u5148\u5904\u7406\u5f53\u524d\u8fdb\u7a0b\u4e2dpending\u7684\u4fe1\u53f7</li> <li>do_signal()\uff0c\u5982\u679c\u51fd\u6570\u7684\u5904\u7406\u52a8\u4f5c\u662f\u81ea\u5b9a\u4e49\u7684\u4fe1\u53f7\uff0c\u5904\u7406\u51fd\u6570\u5219\u8fd4\u56de\u7528\u6237\u6001\u6267\u884c</li> <li>\u7528\u6237\u6001\uff0c\u6267\u884c\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u5f53\u8c03\u7528sigreturn\u8fd4\u56de\u5185\u6838\u6001</li> <li>\u5185\u6838\u6001,sys_sigreturn()\uff0c\u8fd4\u56de\u4e0a\u4e00\u6b21\u88ab\u4e2d\u65ad\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c</li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7/#_12","title":"\u5b50\u8fdb\u7a0b\u9000\u51fa\u4f1a\u53d1\u9001\u4fe1\u53f7","text":"<p>\u5b50\u8fdb\u7a0b\u5728\u7ec8\u6b62\u65f6\u4f1a\u7ed9\u7236\u8fdb\u7a0b\u53d1SIGCHLD\u4fe1\u53f7,\u8be5\u4fe1\u53f7\u7684\u9ed8\u8ba4\u5904\u7406\u52a8\u4f5c\u662f\u5ffd\u7565,\u7236\u8fdb\u7a0b\u53ef\u4ee5\u81ea \u5b9a\u4e49SIGCHLD\u4fe1\u53f7 \u7684\u5904\u7406\u51fd\u6570,\u8fd9\u6837\u7236\u8fdb\u7a0b\u53ea\u9700\u4e13\u5fc3\u5904\u7406\u81ea\u5df1\u7684\u5de5\u4f5c,\u4e0d\u5fc5\u5173\u5fc3\u5b50\u8fdb\u7a0b\u4e86,\u5b50\u8fdb\u7a0b \u7ec8\u6b62\u65f6\u4f1a\u901a\u77e5\u7236\u8fdb\u7a0b,\u7236\u8fdb\u7a0b\u5728\u4fe1\u53f7\u5904\u7406 \u51fd\u6570\u4e2d\u8c03\u7528wait\u6e05\u7406\u5b50\u8fdb\u7a0b\u5373\u53ef\u3002</p> <p><pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;ctime&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\n\nusing namespace std;\nvoid handler(int signo)\n{\n    sleep(5);\n    pid_t rid;\n    while ((rid = waitpid(-1, nullptr, WNOHANG)) &gt; 0)\n    {\n        cout &lt;&lt; \"I am proccess: \" &lt;&lt; getpid() &lt;&lt; \" catch a signo: \" &lt;&lt; signo &lt;&lt; \"child process quit: \" &lt;&lt; rid &lt;&lt; endl;\n    }\n}\n\n\nint main()\n{\n    //signal(17, SIG_IGN); // SIG_DFL -&gt; action -&gt; IGN\n    // \u5982\u679c\u6211\u4eec\u670910\u4e2a\u5b50\u8fdb\u7a0b\u5462\uff1f\uff1f\u5982\u679c\u540c\u65f6\u9000\u51fa\u5462\uff1f\n    signal(17, handler);\n    for (int i = 0; i &lt; 10; i++)\n    {\n        pid_t id = fork();\n        if (id == 0)\n        {\n            while (true)\n            {\n                cout &lt;&lt; \"I am child process: \" &lt;&lt; getpid() &lt;&lt; \", ppid: \" &lt;&lt; getppid() &lt;&lt; endl;\n                sleep(5);\n                break;\n            }\n            cout &lt;&lt; \"child quit!!!\" &lt;&lt; endl;\n            exit(0);\n        }\n         sleep(rand()%5+3);\n        //sleep(1);\n    }\n    // father\n    while (true)\n    {\n        cout &lt;&lt; \"I am father process: \" &lt;&lt; getpid() &lt;&lt; endl;\n        sleep(1);\n    }\n\n    return 0;\n}\n</code></pre> \u5c0617\u53f7\u4fe1\u53f7\u6355\u6349\uff0c\u53ef\u4ee5\u76f4\u89c2\u770b\u51fa\u9000\u51fa\u7684\u65f6\u5019\u5b50\u8fdb\u7a0b\u4e0d\u662f\u6084\u6084\u5730\u9000\u51fa\uff0c\u4f1a\u4e3b\u52a8\u7684\u5411\u7236\u8fdb\u7a0b\u53d1\u900117\u53f7\u4fe1\u53f7\u3002</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/","title":"\u6d88\u606f\u961f\u5217\u539f\u7406\uff08A\u8fdb\u7a0b&lt;--\u4ee5\u6570\u636e\u5757\u5f62\u5f0f\u53d1\u9001\u6570\u636e--&gt;B\u8fdb\u7a0b","text":"<ol> <li>\u5fc5\u987b\u8ba9\u4e0d\u540c\u8fdb\u7a0b\u770b\u5230\u540c\u4e00\u4e2a\u961f\u5217</li> <li>\u5141\u8bb8\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0c\u5411\u5185\u6838\u4e2d\u53d1\u9001\u5e26\u7c7b\u578b\u6570\u636e\u5757\uff08\u533a\u5206\u662f\u90a3\u4e2a\u8fdb\u7a0b\u53d1\u9001\u7684\uff09</li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_1","title":"\u4fe1\u53f7\u91cf","text":"<p>\u5efa\u7acb\u7684\u539f\u56e0\u662f\u4fdd\u8bc1\u8bfb\u5199\u6570\u636e\u4e00\u81f4\u6027\u95ee\u9898 \u89e3\u51b3\u540c\u6b65\u548c\u4e92\u65a5</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_2","title":"\u76f8\u5173\u6982\u5ff5","text":"<p>\u4efb\u4f55\u65f6\u523b\u53ea\u5141\u8bb8\u4e00\u4e2a\u6267\u884c\u6d41\u8bbf\u95ee\u7684\u8d44\u6e90\u53eb\u505a\u4e34\u754c\u8d44\u6e90 \u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\u7684\u4ee3\u7801\u53eb\u505a\u4e34\u754c\u533a \u539f\u5b50\u6027\uff1a\u4e0d\u53ef\u5206\u5272\uff0c\u8981\u4e48\u90fd\u6267\u884c\uff0c\u8981\u4e48\u90fd\u4e0d\u6267\u884c\u3002</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_3","title":"\u57fa\u672c\u539f\u7406","text":"<p>\u4fe1\u53f7\u91cf\u7684\u672c\u8d28\u662f\u8ba1\u6570\u5668\uff0c\u7c7b\u4f3cint cnt=n; \u63cf\u8ff0\u4e34\u754c\u8d44\u6e90\u8d44\u6e90\u6570\u91cf\u7684\u591a\u5c11\u3002</p> <p>mmap\u51fd\u6570--\u4e5f\u662f\u5171\u4eab\u5185\u5b58</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/","title":"\u8fdb\u7a0b\u901a\u4fe1\u7684\u539f\u7406","text":"<p>\u662f\u4e0d\u540c\u7684\u8fdb\u7a0b\u80fd\u770b\u5230\u540c\u4e00\u7247\u5185\u5b58\u7a7a\u95f4</p> <p>\u4e0d\u540c\u8fdb\u7a0b\u76f8\u5e94\u7684\u63cf\u8ff0\u7528\u7684\u7ed3\u6784\u4f53\u7684\u865a\u62df\u5730\u5740\u9996\u5730\u5740\u5efa\u7acb\u5728\u5185\u5b58\u5171\u4eab\u533a\uff0c\u901a\u8fc7\u9875\u8868\u6302\u63a5\u5728\u76f8\u540c\u7269\u7406\u5185\u5b58\u3002</p> <p>\u5171\u4eab\u5185\u5b58\u662f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5b83\u5141\u8bb8\u4e0d\u540c\u7684\u8fdb\u7a0b\u770b\u5230\u540c\u4e00\u7247\u5185\u5b58\u7a7a\u95f4\u3002\u5171\u4eab\u5185\u5b58\u7684\u751f\u547d\u5468\u671f\u662f\u968f\u5185\u6838\u7684\uff0c\u7528\u6237\u4e0d\u4e3b\u52a8\u5173\u95ed\uff0c\u5171\u4eab\u5185\u5b58\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u7cfb\u7edf\u91cd\u542f\u3002\u5173\u95ed\u5171\u4eab\u5185\u5b58\u4f7f\u7528shmid\uff0c\u6307\u4ee4\u4e3a<code>ipcrm -m shmid</code>\u3002</p> <p>\u540c\u65f6\u91ca\u653e\u5171\u4eab\u5185\u5b58\u662f\uff0c\u53bb\u5173\u8054\u91ca\u653e\u4e5f\u5c31\u662f\u786c\u94fe\u63a5\u4e3a0\uff0c\u91ca\u653e\u3002</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/#_2","title":"\u63a5\u53e3","text":""},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/#shmget","title":"shmget","text":"<p><pre><code>#include &lt;sys/ipc.h&gt;\n#include &lt;sys/shm.h&gt;\n\nint shmget(key_t key, size_t size,int shmflg);\n</code></pre> 1. \u600e\u4e48\u4fdd\u8bc1\u4e0d\u540c\u7684\u8fdb\u7a0b\u770b\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\uff1f    \u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u552f\u4e00\u7684key</p> <ol> <li> <p>\u600e\u4e48\u77e5\u9053\u5171\u4eab\u5185\u5b58\u662f\u5b58\u5728\u8fd8\u662f\u4e0d\u5b58\u5728\uff1f    \u901a\u8fc7shmflg,    IPC_CREAT(\u5355\u72ec\u4f7f\u7528)\uff1a\u5982\u679c\u7533\u8bf7\u7684\u5171\u4eab\u5185\u5b58\u4e0d\u5b58\u5728\uff0c\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5c31\u83b7\u53d6\u5e76\u8fd4\u56de    IPC_EXCL(\u4e0d\u5355\u72ec\u4f7f\u7528)    IPC_CREAT | IPC_EXCL\uff1a\u5982\u679c\u7533\u8bf7\u7684\u5171\u4eab\u5185\u5b58\u4e0d\u5b58\u5728\uff0c\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5c31\u62a5\u9519\u3002\u7b2c\u4e00\u6b21\u521b\u5efa\u65f6\u5019\u4f7f\u7528</p> </li> <li> <p>\u63a5\u53e3\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u7684\u662fshmid\uff0c\u5171\u4eab\u5185\u5b58\u6807\u8bc6\u7b26</p> </li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/#key-vs-shmid","title":"key vs shmid","text":"<p>key\u662f\u7528\u6237\u7a0b\u5e8f\u548c\u5185\u6838\u901a\u4fe1\u7684\u51ed\u8bc1\uff0cshmid\u662f\u5185\u6838\u4e3a\u5171\u4eab\u5185\u5b58\u5206\u914d\u7684id key\u662f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6807\u5b9a\u7684\u552f\u4e00\u6027\uff0c\u4e5f\u5c31\u662f\u521b\u5efa\u65f6\u4f7f\u7528\uff0c\u4ece\u6b64\u4e0d\u518d\u7528\u5230key shmid\u53ea\u5728\u8fdb\u7a0b\u5185\u7528\u6765\u8868\u793a\u8d44\u6e90\u7684\u552f\u4e00\u6027</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/#key","title":"key\u7684\u7279\u70b9","text":"<ol> <li>key\u53ea\u9700\u8981\u77e5\u9053\u5728\u5185\u6838\u4e2d\u5177\u6709\u552f\u4e00\u6027\uff0c\u80fd\u8ba9\u4e0d\u540c\u8fdb\u7a0b\u8fdb\u884c\u552f\u4e00\u6027\u6807\u8bc6</li> <li>\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u4f7f\u7528key\u521b\u5efa\u5171\u4eab\u5185\u5b58\uff0c\u4e4b\u540e\u7684\u8fdb\u7a0b\u4f7f\u7528key\u83b7\u53d6\u5171\u4eab\u5185\u5b58</li> <li>key\u5728\u5b58\u5728\u4e8e\u5171\u4eab\u5185\u5b58\u7684\u63cf\u8ff0\u5bf9\u8c61\u4e2d</li> <li>key\u7684\u521b\u5efa    <pre><code>#include&lt;sys/types.h&gt;\n#include&lt;sys/ipc.h&gt;\n\nkey_t ftok(const char *pathname, int proj_id);\n</code></pre></li> <li>pathname\uff1a\u6587\u4ef6\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u5b58\u5728\u7684\u6587\u4ef6</li> <li>proj_id\uff1a\u9879\u76eeid\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u503c\uff0c\u53ea\u8981\u548cpathname\u7ec4\u5408\u8d77\u6765\u662f\u552f\u4e00\u7684\u5373\u53ef</li> <li>\u8fd4\u56de\u503c\uff1akey</li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/#_3","title":"\u8865\u5145\u6307\u4ee4","text":"<pre><code>ipcs -m \u67e5\u770b\u5171\u4eab\u5185\u5b58\n</code></pre>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/#_4","title":"\u5171\u4eab\u5185\u5b58\u7684\u7279\u70b9","text":"<ol> <li>\u5171\u4eab\u5185\u5b58\u7684\u751f\u547d\u5468\u671f\u662f\u968f\u5185\u6838\u7684    \u7528\u6237\u4e0d\u4e3b\u52a8\u5173\u95ed\uff0c\u5171\u4eab\u5185\u5b58\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u7cfb\u7edf\u91cd\u542f    \u5173\u95ed\u5171\u4eab\u5185\u5b58\u4f7f\u7528shmid    <pre><code>ipcrm -m shmid\n</code></pre></li> </ol>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93/","title":"\u4e3a\u4ec0\u4e48\u8981\u901a\u4fe1","text":"<p>\u901a\u4fe1\u662f\u8fdb\u7a0b\u95f4\u4ea4\u4e92\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u5728\u591a\u8fdb\u7a0b\u73af\u5883\u4e2d\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u80fd\u9700\u8981\u5171\u4eab\u6570\u636e\u6216\u534f\u8c03\u5de5\u4f5c\u3002\u901a\u4fe1\u53ef\u4ee5\u4f7f\u5f97\u8fdb\u7a0b\u4e4b\u95f4\u80fd\u591f\u4ea4\u6362\u4fe1\u606f\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u4efb\u52a1\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u901a\u4fe1\u573a\u666f\uff1a 1.\u6570\u636e\u5171\u4eab\uff1a\u591a\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u5171\u4eab\u4e00\u4e9b\u6570\u636e\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u8bfb\u53d6\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u5199\u5165\u7684\u6570\u636e\uff0c\u6216\u8005\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u5411\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e9b\u6570\u636e\u3002 2.\u534f\u8c03\u5de5\u4f5c\uff1a\u591a\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u534f\u540c\u5de5\u4f5c\uff0c\u4f8b\u5982\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u5b8c\u6210\u67d0\u4e9b\u4efb\u52a1\u540e\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u3002 3.\u4e8b\u4ef6\u901a\u77e5\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u901a\u77e5\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u751f\u4e86\u67d0\u4e9b\u4e8b\u4ef6\uff0c\u4f8b\u5982\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u901a\u77e5\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u67d0\u4e2a\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\u3002 4.\u8d44\u6e90\u7ba1\u7406\uff1a\u591a\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u5171\u4eab\u4e00\u4e9b\u8d44\u6e90\uff0c\u4f8b\u5982\u6587\u4ef6\u3001\u7f51\u7edc\u8fde\u63a5\u7b49\u3002\u901a\u4fe1\u53ef\u4ee5\u4f7f\u5f97\u8fdb\u7a0b\u4e4b\u95f4\u80fd\u591f\u534f\u8c03\u5730\u4f7f\u7528\u8fd9\u4e9b\u8d44\u6e90\u3002</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93/#_2","title":"\u533f\u540d\u7ba1\u9053\u662f\u4ec0\u4e48","text":"<p>\u533f\u540d\u7ba1\u9053\u662f\u4e00\u79cd\u6700\u57fa\u672c\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236\uff0c\u5b83\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u5411\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u3002\u533f\u540d\u7ba1\u9053\u53ea\u80fd\u7528\u4e8e\u5177\u6709\u4eb2\u7f18\u5173\u7cfb\u7684\u8fdb\u7a0b\u4e4b\u95f4\uff0c\u5373\u7236\u5b50\u8fdb\u7a0b\u4e4b\u95f4\u3002\u533f\u540d\u7ba1\u9053\u662f\u534a\u53cc\u5de5\u7684\uff0c\u5373\u6570\u636e\u53ea\u80fd\u5728\u4e00\u4e2a\u65b9\u5411\u4e0a\u6d41\u52a8\u3002</p>"},{"location":"linux/%E9%80%9A%E4%BF%A1/%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93/#_3","title":"\u521b\u5efa\u533f\u540d\u7ba1\u9053\u7684\u8fc7\u7a0b","text":"<p>\u533f\u540d\u7ba1\u9053\u7684\u521b\u5efa\u548c\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b8c\u6210\uff1a</p> <p>\u521b\u5efa\u7ba1\u9053\uff1a\u4f7f\u7528pipe()\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u7ba1\u9053\u3002pipe()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5143\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7528\u4e8e\u8bfb\uff0c\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7528\u4e8e\u5199\u3002</p> <p>\u521b\u5efa\u5b50\u8fdb\u7a0b\uff1a\u4f7f\u7528fork()\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u3002\u5b50\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684\u6240\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5305\u62ec\u7ba1\u9053\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p> <p>\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5206\u522b\u5173\u95ed\u4e0d\u9700\u8981\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a\u7236\u8fdb\u7a0b\u5173\u95ed\u7ba1\u9053\u7684\u5199\u7aef\uff0c\u5b50\u8fdb\u7a0b\u5173\u95ed\u7ba1\u9053\u7684\u8bfb\u7aef\u3002</p> <p>\u7236\u8fdb\u7a0b\u5411\u7ba1\u9053\u5199\u5165\u6570\u636e\uff1a\u7236\u8fdb\u7a0b\u901a\u8fc7\u7ba1\u9053\u7684\u5199\u7aef\u5199\u5165\u6570\u636e\u3002</p> <p>\u5b50\u8fdb\u7a0b\u4ece\u7ba1\u9053\u8bfb\u53d6\u6570\u636e\uff1a\u5b50\u8fdb\u7a0b\u901a\u8fc7\u7ba1\u9053\u7684\u8bfb\u7aef\u8bfb\u53d6\u6570\u636e\u3002</p> <p>\u5173\u95ed\u7ba1\u9053\uff1a\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u90fd\u5173\u95ed\u7ba1\u9053\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ee5\u91ca\u653e\u8d44\u6e90 <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;cassert&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;unistd.h&gt;\n\nusing namespace std;\n\n// \u7236\u8fdb\u7a0b\u8fdb\u884c\u8bfb\u53d6\uff0c\u5b50\u8fdb\u7a0b\u8fdb\u884c\u5199\u5165\nint main()\n{\n    // \u7b2c\u4e00\u6b65\uff1a\u521b\u5efa\u7ba1\u9053\u6587\u4ef6\uff0c\u6253\u5f00\u8bfb\u5199\u7aef\n    int fds[2];\n    int n = pipe(fds);\n    assert(n == 0);\n\n    // \u7b2c\u4e8c\u6b65: fork\n    pid_t id = fork();\n    assert(id &gt;= 0);\n    if (id == 0)\n    {\n        // \u5b50\u8fdb\u7a0b\u8fdb\u884c\u5199\u5165\n        close(fds[0]);\n        // \u5b50\u8fdb\u7a0b\u7684\u901a\u4fe1\u4ee3\u7801\n\n        const char *s = \"\u6211\u662f\u5b50\u8fdb\u7a0b,\u6211\u6b63\u5728\u7ed9\u4f60\u53d1\u6d88\u606f\";\n        int cnt = 0;\n        while (true)\n        {\n            cnt++;\n            char buffer[1024]; // \u53ea\u6709\u5b50\u8fdb\u7a0b\u80fd\u770b\u5230\uff01\n            snprintf(buffer, sizeof buffer, \"child-&gt;parent say: %s[%d][%d]\", s, cnt, getpid());\n\n            write(fds[1], buffer, strlen(buffer));\n            cout &lt;&lt; \"count: \" &lt;&lt; cnt &lt;&lt; endl;\n\n\n        }\n\n        // \u5b50\u8fdb\u7a0b\n        close(fds[1]); // \u5b50\u8fdb\u7a0b\u5173\u95ed\u5199\u7aeffd\n        cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\u5173\u95ed\u81ea\u5df1\u7684\u5199\u7aef\" &lt;&lt; endl;\n        // sleep(10000);\n        exit(0);\n    }\n    // \u7236\u8fdb\u7a0b\u8fdb\u884c\u8bfb\u53d6\n    close(fds[1]);\n    // \u7236\u8fdb\u7a0b\u7684\u901a\u4fe1\u4ee3\u7801\n    while (true)\n    {\n        sleep(2);\n        char buffer[1024];\n        ssize_t s = read(fds[0], buffer, sizeof(buffer) - 1);\n\n        if (s &gt; 0)\n        {\n            buffer[s] = 0;\n            cout &lt;&lt; \"Get Message# \" &lt;&lt; buffer &lt;&lt; \" | my pid: \" &lt;&lt; getpid() &lt;&lt; endl;\n        }\n        else if(s == 0)\n        {\n\n            cout &lt;&lt; \"read: \" &lt;&lt; s &lt;&lt; endl;\n            break;\n        }\n        break;\n\n\n    }\n    close(fds[0]);\n    cout &lt;&lt; \"\u7236\u8fdb\u7a0b\u5173\u95ed\u8bfb\u7aef\" &lt;&lt; endl;\n\n    int status = 0;\n    n = waitpid(id, &amp;status, 0);\n    assert(n == id);\n\n    cout &lt;&lt;\"pid-&gt;\"&lt;&lt; n &lt;&lt; \" : \"&lt;&lt; (status &amp; 0x7F) &lt;&lt; endl;\n\n\n\n    return 0;\n}\n</code></pre></p>"},{"location":"mysql/%E7%99%BB%E5%BD%95/","title":"\u767b\u5f55","text":"<p>\u4f7f\u7528\u7684\u662fUbtun\u7cfb\u7edf \u767b\u5f55\u7684\u547d\u4ee4\u662f</p> <pre><code> mysql -uroot -p\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E5%8E%9F%E7%90%86/","title":"\u4e8c\u5206\u67e5\u627e\u7684\u539f\u7406","text":"<p>\u524d\u63d0\u662f\u6709\u5e8f\u5e8f\u5217 \u53cc\u5411\u6307\u9488\uff0c\u6839\u636e\u76ee\u6807\u503c\u548c\u4e2d\u95f4\u503c\u7684\u5173\u7cfb\u66f4\u65b0\u6307\u9488 \u6700\u540e\u5f97\u5230\u76ee\u6807\u4f4d\u7f6e\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E5%8E%9F%E7%90%86/#_2","title":"\u4e0d\u540c\u7684\u5199\u6cd5","text":"<p>\u95ed\u533a\u95f4\u5199\u6cd5 \u4e5f\u5c31\u662f\u5de6\u53f3\u6307\u9488\u5206\u522b\u4ece\u5b9e\u9645\u7684\u4e24\u6bb5\u51fa\u53d1 \u6700\u540e\u7684\u7ed3\u679c\u662fl-1\u533a\u95f4\u5168\u662f\u5c0f\u4e8etarget\u7684\uff0cr+1\u533a\u95f4\u5168\u662f\u5927\u4e8etarget\u7684 \u5224\u65ad\u6761\u4ef6\u4e3al&lt;=r\uff0c\u7ed3\u679c\u662fl</p> <p>\u5de6\u5f00\u53f3\u95ed\u533a\u95f4\u7684\u5199\u6cd5 \u5de6\u6307\u9488\u4ece\u5b9e\u9645\u5de6\u7aef\u51fa\u53d1\uff0c\u53f3\u6307\u9488\u4ece\u5b9e\u9645\u53f3\u7aef+1\u51fa\u53d1 \u6700\u540e\u7684\u7ed3\u679c\u5c31\u662fl-1\u533a\u95f4\u5168\u662f\u5c0f\u4e8etarget\u7684\uff0cr\u533a\u95f4\u5168\u662f\u5927\u4e8etarget\u7684 \u5224\u65ad\u6761\u4ef6\u4e3al&lt;\\r\uff0c\u7ed3\u679c\u662fl</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/73.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/","title":"73. \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e24\u4e2a\u6570\u5b57","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/73.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002\u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002</p> <p>\u6570\u636e\u8303\u56f4 \u6570\u7ec4\u957f\u5ea6 [1,1000] \u3002</p> <p>\u6837\u4f8b \u8f93\u5165\uff1a[1,2,3,3,4,4]</p> <p>\u8f93\u51fa\uff1a[1,2]</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/73.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5f02\u6216\u5f97\u5230 x^y \u53d6 x\u4e0ey\u4e2d\u7b2ck\u4f4d\u4e3a1\u7684\u6570 \u5c06\u6570\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408\uff0c\u7b2ck\u4f4d\u4e3a1\u7684\u96c6\u5408\u548c\u7b2ck\u4f4d\u4e0d\u662f1\u7684\u96c6\u5408 \u5176\u4e2dx y\u5206\u522b\u5728\u8fd9\u4e24\u4e2a\u96c6\u5408\uff0c\u4e14\u76f8\u540c\u7684\u5143\u7d20\u662f\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u9762 \u4e8e\u662f\u5c06\u5176\u8f6c\u5316\u6210\u4e86\u6c42\u91cd\u590d\u6570\u5b57\u4e2d\u7684\u5355\u4e2a\u6570\u503c\u7684\u95ee\u9898</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findNumsAppearOnce(vector&lt;int&gt;&amp; nums) {\n        int sum=0;\n        for(auto x:nums){\n            sum^=x;\n        }\n        int k=0;\n        while(!(sum&gt;&gt;k&amp;1)){\n            k++;\n        }\n        int first=0;\n        for(auto x:nums){\n            if(x&gt;&gt;k&amp;1){\n                first^=x;\n            }\n        }\n        return {first,first^sum};\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/84.%20%E6%B1%821%2B2%2B%E2%80%A6%2Bn/","title":"84. \u6c421+2+\u2026+n","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/84.%20%E6%B1%821%2B2%2B%E2%80%A6%2Bn/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6c421+2+\u2026+n\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case\u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/84.%20%E6%B1%821%2B2%2B%E2%80%A6%2Bn/#_2","title":"\u89e3\u6cd5\u4e00","text":"<p>\u6709\u70b9\u4e8c\u81c2 <pre><code>class Solution {\npublic:\n    int getSum(int n) {\n        char a[n][n+1];\n        return sizeof(a)&gt;&gt;1;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/84.%20%E6%B1%821%2B2%2B%E2%80%A6%2Bn/#_3","title":"\u9012\u5f52\u89e3\u6cd5","text":"<p>sum(n) = n+sum(n-1)\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u7ec8\u6b62\u6761\u4ef6\uff0c\u7531\u4e8e\u6c42\u7684\u662f1+2+\u2026+n\u7684\u548c\uff0c\u6240\u4ee5\u9700\u8981\u5728n=0\u7684\u65f6\u5019\u8df3\u51fa\u9012\u5f52\uff0c\u4f46\u662f\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528if,while\u7b49\u5206\u652f\u5224\u65ad\uff0c\u53ef\u4ee5\u8003\u8651\u5229\u7528&amp;&amp;\u77ed\u8def\u8fd0\u7b97\u6765\u7ec8\u6b62\u5224\u65ad\u3002</p> <pre><code>class Solution {\npublic:\n    int getSum(int n) {\n        int res = n;\n        (n&gt;0) &amp;&amp; (res += getSum(n-1));//\u5229\u7528\u77ed\u8def\u8fd0\u7b97\u7ec8\u6b62\u9012\u5f52\n        return res;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/88.%20%E6%A0%91%E4%B8%AD%E4%B8%A4%E4%B8%AA%E7%BB%93%E7%82%B9%E7%9A%84%E6%9C%80%E4%BD%8E%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","title":"88. \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148","text":"<p>\u9898\u76ee\u63cf\u8ff0\u4e3a\u7ed9\u51fa\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u5165\u4e24\u4e2a\u6811\u8282\u70b9\uff0c\u6c42\u5b83\u4eec\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u3002</p> <p>\u4e00\u4e2a\u6811\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u5305\u62ec\u5b83\u672c\u8eab\u3002</p> <p>\u6ce8\u610f\uff1a</p> <p>\u8f93\u5165\u7684\u4e8c\u53c9\u6811\u4e0d\u4e3a\u7a7a\uff1b \u8f93\u5165\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u662f\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\uff1b \u6570\u636e\u8303\u56f4 \u6811\u4e2d\u8282\u70b9\u6570\u91cf [0,500]</p> <p>\u6837\u4f8b \u4e8c\u53c9\u6811[8, 12, 2, null, null, 6, 4, null, null, null, null]\u5982\u4e0b\u56fe\u6240\u793a\uff1a     8    / \\   12  2      / \\     6   4</p> <ol> <li> <p>\u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a2\u548c12\uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b98\u3002</p> </li> <li> <p>\u5982\u679c\u8f93\u5165\u7684\u6811\u8282\u70b9\u4e3a2\u548c6\uff0c\u5219\u8f93\u51fa\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e3a\u6811\u8282\u70b92\u3002</p> </li> </ol>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/88.%20%E6%A0%91%E4%B8%AD%E4%B8%A4%E4%B8%AA%E7%BB%93%E7%82%B9%E7%9A%84%E6%9C%80%E4%BD%8E%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#_1","title":"\u9012\u5f52\u89e3\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root==NULL){\n            return NULL;\n        }\n        if(root==p||root==q){\n            return root;\n        }\n       TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);\n        if(left&amp;&amp;right){\n            return root;\n        }\n        if(left==NULL){\n            return right;\n        }else{\n            return left;\n        }\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/88.%20%E6%A0%91%E4%B8%AD%E4%B8%A4%E4%B8%AA%E7%BB%93%E7%82%B9%E7%9A%84%E6%9C%80%E4%BD%8E%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#_2","title":"\u67e5\u627e\u8def\u5f84","text":"<p>\u5206\u522b\u627e\u51fa\u6839\u8282\u70b9\u5230\u4e24\u4e2a\u8282\u70b9\u7684\u8def\u5f84\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u516c\u5171\u8282\u70b9\u5c31\u662f\u6700\u4f4e\u516c\u5171\u7956\u5148\u4e86\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\u9700\u8981\u5728\u6811\u4e2d\u67e5\u627e\u8282\u70b9\uff0c\u590d\u6742\u5ea6\u4e3aO(n) <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int findPath(TreeNode*root, TreeNode* p, vector&lt;TreeNode*&gt;&amp;path){\n        if(!root){\n            return 0;\n        }\n        if(root-&gt;val==p-&gt;val){\n            path.push_back(root);\n            return 1;\n        }\n        int l=findPath(root-&gt;left,p,path);\n        int r=findPath(root-&gt;right,p,path);\n        if(r==1||l==1){\n            path.push_back(root);\n        }\n        return r==1||l==1;\n\n    }\n\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n         vector&lt;TreeNode*&gt;path1,path2;\n        findPath(root,p,path1);\n        findPath(root,q,path2);\n        if(path1.empty()||path2.empty())\n            return NULL;\n        TreeNode* res =NULL;\n        for(int i = 0;i&lt;path1.size();i++){\n            if(i&gt;=path1.size()||i&gt;=path2.size())\n                break;\n            if(path1[path1.size()-1-i]==path2[path2.size()-1-i])\n                res = path1[path1.size()-1-i];\n            else\n                break;\n        }\n        return res;\n    }\n\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n+1\u7684\u6570\u7ec4nums\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u5747\u5728 1\u223cn \u7684\u8303\u56f4\u5185\uff0c\u5176\u4e2d n\u22651\u3002</p> <p>\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4\u3002</p> <p>\u6570\u636e\u8303\u56f4 1\u2264n\u22641000</p> <p>\u6837\u4f8b \u7ed9\u5b9a nums = [2, 3, 5, 4, 3, 2, 6, 7]\u3002</p> <p>\u8fd4\u56de 2 \u6216 3\u3002 \u601d\u8003\u9898\uff1a\u5982\u679c\u53ea\u80fd\u4f7f\u7528 O(1)\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/#_2","title":"\u601d\u8def","text":"<p>\u8fd9\u9053\u9898\u76ee\u4e3b\u8981\u5e94\u7528\u4e86\u62bd\u5c49\u539f\u7406\u548c\u5206\u6cbb\u7684\u601d\u60f3\u3002</p> <p>\u62bd\u5c49\u539f\u7406\uff1an+1 \u4e2a\u82f9\u679c\u653e\u5728 n \u4e2a\u62bd\u5c49\u91cc\uff0c\u90a3\u4e48\u81f3\u5c11\u6709\u4e00\u4e2a\u62bd\u5c49\u4e2d\u4f1a\u653e\u4e24\u4e2a\u82f9\u679c\u3002</p> <p>\u7528\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u5c31\u662f\uff0c\u4e00\u5171\u6709 n+1 \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u7684\u53d6\u503c\u8303\u56f4\u662f1\u5230n\uff0c\u6240\u4ee5\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u6570\u51fa\u73b0\u4e24\u6b21\u3002</p> <p>\u7136\u540e\u6211\u4eec\u91c7\u7528\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u5c06\u6bcf\u4e2a\u6570\u7684\u53d6\u503c\u7684\u533a\u95f4[1, n]\u5212\u5206\u6210[1, n/2]\u548c[n/2+1, n]\u4e24\u4e2a\u5b50\u533a\u95f4\uff0c\u7136\u540e\u5206\u522b\u7edf\u8ba1\u4e24\u4e2a\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684\u533a\u95f4\u662f\u6307 \u6570\u7684\u53d6\u503c\u8303\u56f4\uff0c\u800c\u4e0d\u662f \u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u5212\u5206\u4e4b\u540e\uff0c\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\u91cc\u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u533a\u95f4\uff0c\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\u5927\u4e8e\u533a\u95f4\u957f\u5ea6\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u6765\u8bf4\u660e\uff1a\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u533a\u95f4\u957f\u5ea6\uff0c\u90a3\u4e48\u6574\u4e2a\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\u5c31\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u548c\u6709n+1\u4e2a\u6570\u77db\u76fe\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u5212\u5f52\u5230\u5de6\u53f3\u4e24\u4e2a\u5b50\u533a\u95f4\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u4e14\u7531\u4e8e\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\u5927\u4e8e\u533a\u95f4\u957f\u5ea6\uff0c\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c\u5728\u8fd9\u4e2a\u5b50\u533a\u95f4\u4e2d\u4e00\u5b9a\u5b58\u5728\u67d0\u4e2a\u6570\u51fa\u73b0\u4e86\u4e24\u6b21\u3002</p> <p>\u4f9d\u6b21\u7c7b\u63a8\uff0c\u6bcf\u6b21\u6211\u4eec\u53ef\u4ee5\u628a\u533a\u95f4\u957f\u5ea6\u7f29\u5c0f\u4e00\u534a\uff0c\u76f4\u5230\u533a\u95f4\u957f\u5ea6\u4e3a1\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u7b54\u6848\u3002</p> <p>\u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6bcf\u6b21\u4f1a\u5c06\u533a\u95f4\u957f\u5ea6\u7f29\u5c0f\u4e00\u534a\uff0c\u4e00\u5171\u4f1a\u7f29\u5c0f \ud835\udc42(\ud835\udc59\ud835\udc5c\ud835\udc54\ud835\udc5b)\u6b21\u3002 \u6bcf\u6b21\u7edf\u8ba1\u4e24\u4e2a\u5b50\u533a\u95f4\u4e2d\u7684\u6570\u65f6\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)</p> <p>\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlogn)</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4ee3\u7801\u4e2d\u6ca1\u6709\u7528\u5230\u989d\u5916\u7684\u6570\u7ec4\uff0c\u6240\u4ee5\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/#_3","title":"\u4ee3\u7801","text":"<pre><code>class Solution {\npublic:\n    int duplicateInArray(vector&lt;int&gt;&amp; nums) {\n        int l=1,r=nums.size()-1;\n        while(l&lt;r){\n            int mid=(l+r)/2;\n            int s=0;\n            for(auto x:nums)    s+=x&gt;=l&amp;&amp;x&lt;=mid;\n            if(s&gt;mid-l+1)   r=mid;\n            else l=mid+1;\n        }\n        return r;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002</p> <p>\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002</p> <p>\u6570\u636e\u8303\u56f4 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u5143\u7d20\u4e2a\u6570\u8303\u56f4 [0,1000]</p> <p>\u6837\u4f8b \u8f93\u5165\u6570\u7ec4\uff1a</p> <p>[   [1,2,8,9]\uff0c   [2,4,9,12]\uff0c   [4,7,10,13]\uff0c   [6,8,11,15] ]</p> <p>\u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a7\uff0c\u5219\u8fd4\u56detrue\uff0c</p> <p>\u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a5\uff0c\u5219\u8fd4\u56defalse\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6839\u636e\u9898\u76ee\u63cf\u8ff0\uff0c\u53ef\u77e5\uff0c\u5728\u8be5\u4e8c\u7ef4\u6570\u7ec4\u5f53\u4e2d\uff0c\u5de6\u8fb9\u7684\u4efb\u610f\u6570\u90fd\u5c0f\u4e8e\u4ed6\uff0c\u4e0b\u9762\u7684\u4efb\u610f\u6570\u90fd\u5927\u4e8e\u4ed6 \u4e0d\u59a8\u4ece\u77e9\u9635\u7684\u53f3\u4e0a\u89d2\u5f00\u59cb\u67e5\u627e\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\uff0c\u5219\u8fd4\u56detrue \u5982\u679c\u5927\u4e8e\u8981\u67e5\u627e\u7684\u5143\u7d20\uff0c\u5c31\u5411\u4e0b\u79fb\u52a8\u4e00\u884c \u5982\u679c\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u5143\u7d20\uff0c\u5c31\u5411\u5de6\u79fb\u52a8\u4e00\u5217 \u5982\u679c\u8d8a\u754c\u4e86\uff0c\u5219\u8fd4\u56defalse</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/#_3","title":"\u4ee3\u7801","text":"<pre><code>class Solution {\npublic:\n    bool searchArray(vector&lt;vector&lt;int&gt;&gt; array, int target) {\n        if(array.empty()||array[0].empty())   return false;\n        int i=0,j=array[0].size()-1;\n        while(i&lt;array.size()&amp;&amp;j&gt;=0){\n            if(array[i][j]==target) return true;\n            else if(array[i][j]&gt;target) j--;\n            else i++;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728 0\u223cn\u22121\u7684\u8303\u56f4\u5185\u3002</p> <p>\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002</p> <p>\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002</p> <p>\u6ce8\u610f\uff1a\u5982\u679c\u67d0\u4e9b\u6570\u5b57\u4e0d\u5728 0\u223cn\u22121 \u7684\u8303\u56f4\u5185\uff0c\u6216\u6570\u7ec4\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u6570\u5b57\uff0c\u5219\u8fd4\u56de -1\uff1b</p> <p>\u6570\u636e\u8303\u56f4 0\u2264n\u22641000</p> <p>\u6837\u4f8b \u7ed9\u5b9a nums = [2, 3, 5, 4, 3, 2, 6, 7]\u3002</p> <p>\u8fd4\u56de 2 \u6216 3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6570\u7ec4\u904d\u5386 \u5982\u679c\u6570\u4e0d\u57281\u5230n\u4e4b\u95f4\uff0c\u5219\u8fd4\u56de-1\u3002 \u4e0b\u9762\u7684\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3\u662f\u628a\u6bcf\u4e2a\u6570\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5373\u8ba9 nums[i] = i\u3002</p> <p>\u4ece\u524d\u5f80\u540e\u904d\u5386\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\uff0c\u5047\u8bbe\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u662f nums[i]=x\uff0c\u90a3\u4e48\uff1a\u5982\u679cx != i &amp;&amp; nums[x] == x\uff0c\u5219\u8bf4\u660e x \u51fa\u73b0\u4e86\u591a\u6b21\uff0c\u76f4\u63a5\u8fd4\u56de x\u5373\u53ef\uff1b \u5982\u679cnums[x] != x\uff0c\u90a3\u6211\u4eec\u5c31\u628a x\u4ea4\u6362\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5373 swap(nums[x], nums[i])\uff0c\u4ea4\u6362\u5b8c\u4e4b\u540e\u5982\u679cnums[i] != i\uff0c\u5219\u91cd\u590d\u8fdb\u884c\u8be5\u64cd\u4f5c\u3002\u7531\u4e8e\u6bcf\u6b21\u4ea4\u6362\u90fd\u4f1a\u5c06\u4e00\u4e2a\u6570\u653e\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6240\u4ee5swap\u64cd\u4f5c\u6700\u591a\u4f1a\u8fdb\u884c n\u6b21\uff0c\u4e0d\u4f1a\u53d1\u751f\u6b7b\u5faa\u73af\u3002 \u5faa\u73af\u7ed3\u675f\u540e\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u91cd\u590d\u7684\u6570\uff0c\u5219\u8fd4\u56de-1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution {\npublic:\n    int duplicateInArray(vector&lt;int&gt;&amp; nums) {\n        int n=nums.size();\n        for(auto x:nums){\n            if(x&lt;0||x&gt;n){\n                return -1;\n            }\n        }\n        for(int i=0;i&lt;n;i++){\n            while(nums[nums[i]]!=nums[i])   swap(nums[i],nums[nums[i]]);\n            if(nums[i]!=i)  return nums[i];\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%88%97%E6%8E%92%E5%88%97/","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u7ec4\u6570\u5b57\uff08\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff09\uff0c\u8f93\u51fa\u5176\u6240\u6709\u7684\u6392\u5217\u65b9\u5f0f\u3002 \u6837\u4f8b <pre><code>\u8f93\u5165\uff1a[1,2,3]\n\n\u8f93\u51fa\uff1a\n      [\n        [1,2,3],\n        [1,3,2],\n        [2,1,3],\n        [2,3,1],\n        [3,1,2],\n        [3,2,1]\n      ]\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%88%97%E6%8E%92%E5%88%97/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%88%97%E6%8E%92%E5%88%97/#stlnext_permutation","title":"\u76f4\u63a5\u4f7f\u7528stl\u4e2d\u7684next_permutation\u51fd\u6570","text":"<p><pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permutation(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(),nums.end());\n\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        do{\n            ans.push_back(nums);\n        }while(next_permutation(nums.begin(),nums.end()));\n        return ans;\n    }\n};\n</code></pre> next_permutation\u51fd\u6570\u4f1a\u8fd4\u56defalse\uff0c\u4ed6\u662f\u57fa\u4e8e\u67e5\u627e\u6bcf\u6b21\u6392\u5217\u540e\u7684\u66f4\u5927\u4e00\u4e2a\u503c \u6bd4\u59821\uff0c2\uff0c3\u53d8\u4e3a1\uff0c3\uff0c2\uff0c\u7136\u540e\u53d8\u4e3a2\uff0c1\uff0c3\uff0c\u7136\u540e\u53d8\u4e3a2\uff0c3\uff0c1\uff0c\u7136\u540e\u53d8\u4e3a3\uff0c1\uff0c2\uff0c\u7136\u540e\u53d8\u4e3a3\uff0c2\uff0c1\uff0c\u7136\u540e\u8fd4\u56defalse</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%88%97%E6%8E%92%E5%88%97/#_3","title":"\u9898\u76ee\u63cf\u8ff0","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/","title":"275 \u4f20\u7eb8\u6761","text":"<p>\u5c0f\u6e0a\u548c\u5c0f\u8f69\u662f\u597d\u670b\u53cb\u4e5f\u662f\u540c\u73ed\u540c\u5b66\uff0c\u4ed6\u4eec\u5728\u4e00\u8d77\u603b\u6709\u8c08\u4e0d\u5b8c\u7684\u8bdd\u9898\u3002</p> <p>\u4e00\u6b21\u7d20\u8d28\u62d3\u5c55\u6d3b\u52a8\u4e2d\uff0c\u73ed\u4e0a\u540c\u5b66\u5b89\u6392\u5750\u6210\u4e00\u4e2a\u00a0m\u00a0\u884c\u00a0n\u00a0\u5217\u7684\u77e9\u9635\uff0c\u800c\u5c0f\u6e0a\u548c\u5c0f\u8f69\u88ab\u5b89\u6392\u5728\u77e9\u9635\u5bf9\u89d2\u7ebf\u7684\u4e24\u7aef\uff0c\u56e0\u6b64\uff0c\u4ed6\u4eec\u5c31\u65e0\u6cd5\u76f4\u63a5\u4ea4\u8c08\u4e86\u3002</p> <p>\u5e78\u8fd0\u7684\u662f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f20\u7eb8\u6761\u6765\u8fdb\u884c\u4ea4\u6d41\u3002</p> <p>\u7eb8\u6761\u8981\u7ecf\u7531\u8bb8\u591a\u540c\u5b66\u4f20\u5230\u5bf9\u65b9\u624b\u91cc\uff0c\u5c0f\u6e0a\u5750\u5728\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\uff0c\u5750\u6807\u00a0(1,1)\uff0c\u5c0f\u8f69\u5750\u5728\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\uff0c\u5750\u6807\u00a0(m,n)\u3002</p> <p>\u4ece\u5c0f\u6e0a\u4f20\u5230\u5c0f\u8f69\u7684\u7eb8\u6761\u53ea\u53ef\u4ee5\u5411\u4e0b\u6216\u8005\u5411\u53f3\u4f20\u9012\uff0c\u4ece\u5c0f\u8f69\u4f20\u7ed9\u5c0f\u6e0a\u7684\u7eb8\u6761\u53ea\u53ef\u4ee5\u5411\u4e0a\u6216\u8005\u5411\u5de6\u4f20\u9012\u3002\u2002</p> <p>\u5728\u6d3b\u52a8\u8fdb\u884c\u4e2d\uff0c\u5c0f\u6e0a\u5e0c\u671b\u7ed9\u5c0f\u8f69\u4f20\u9012\u4e00\u5f20\u7eb8\u6761\uff0c\u540c\u65f6\u5e0c\u671b\u5c0f\u8f69\u7ed9\u4ed6\u56de\u590d\u3002</p> <p>\u73ed\u91cc\u6bcf\u4e2a\u540c\u5b66\u90fd\u53ef\u4ee5\u5e2e\u4ed6\u4eec\u4f20\u9012\uff0c\u4f46\u53ea\u4f1a\u5e2e\u4ed6\u4eec\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6b64\u4eba\u5728\u5c0f\u6e0a\u9012\u7ed9\u5c0f\u8f69\u7eb8\u6761\u7684\u65f6\u5019\u5e2e\u5fd9\uff0c\u90a3\u4e48\u5728\u5c0f\u8f69\u9012\u7ed9\u5c0f\u6e0a\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u518d\u5e2e\u5fd9\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u2002</p> <p>\u8fd8\u6709\u4e00\u4ef6\u4e8b\u60c5\u9700\u8981\u6ce8\u610f\uff0c\u5168\u73ed\u6bcf\u4e2a\u540c\u5b66\u613f\u610f\u5e2e\u5fd9\u7684\u597d\u611f\u5ea6\u6709\u9ad8\u6709\u4f4e\uff08\u6ce8\u610f\uff1a\u5c0f\u6e0a\u548c\u5c0f\u8f69\u7684\u597d\u5fc3\u7a0b\u5ea6\u6ca1\u6709\u5b9a\u4e49\uff0c\u8f93\u5165\u65f6\u7528\u00a000\u00a0\u8868\u793a\uff09\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u00a00\u223c1000\u223c100\u00a0\u7684\u81ea\u7136\u6570\u6765\u8868\u793a\uff0c\u6570\u8d8a\u5927\u8868\u793a\u8d8a\u597d\u5fc3\u3002</p> <p>\u5c0f\u6e0a\u548c\u5c0f\u8f69\u5e0c\u671b\u5c3d\u53ef\u80fd\u627e\u597d\u5fc3\u7a0b\u5ea6\u9ad8\u7684\u540c\u5b66\u6765\u5e2e\u5fd9\u4f20\u7eb8\u6761\uff0c\u5373\u627e\u5230\u6765\u56de\u4e24\u6761\u4f20\u9012\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e24\u6761\u8def\u5f84\u4e0a\u540c\u5b66\u7684\u597d\u5fc3\u7a0b\u5ea6\u4e4b\u548c\u6700\u5927\u3002</p> <p>\u73b0\u5728\uff0c\u8bf7\u4f60\u5e2e\u52a9\u5c0f\u6e0a\u548c\u5c0f\u8f69\u627e\u5230\u8fd9\u6837\u7684\u4e24\u6761\u8def\u5f84\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_1","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u6709\u00a022\u00a0\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\u00a0m\u00a0\u548c\u00a0n\uff0c\u8868\u793a\u5b66\u751f\u77e9\u9635\u6709\u00a0m\u00a0\u884c\u00a0n\u00a0\u5217\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u00a0m\u00a0\u884c\u662f\u4e00\u4e2a\u00a0m\u00d7n\u00a0\u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7b2c\u00a0i\u884c\u00a0j\u5217\u7684\u6574\u6570\u8868\u793a\u5750\u5728\u7b2c\u00a0i\u884c\u00a0j\u5217\u7684\u5b66\u751f\u7684\u597d\u5fc3\u7a0b\u5ea6\uff0c\u6bcf\u884c\u7684\u00a0n\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_2","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6765\u56de\u4e24\u6761\u8def\u4e0a\u53c2\u4e0e\u4f20\u9012\u7eb8\u6761\u7684\u5b66\u751f\u7684\u597d\u5fc3\u7a0b\u5ea6\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_3","title":"\u6570\u636e\u8303\u56f4","text":"<p>1\u2264n,m\u226450 </p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_4","title":"\u8f93\u5165\u6837\u4f8b\uff1a","text":"<pre><code>3 3\n0 3 9\n2 8 5\n5 7 0\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_5","title":"\u8f93\u51fa\u6837\u4f8b\uff1a","text":"<pre><code>34\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u4ec0\u4e48\u662f\u52a8\u6001\u89c4\u5212","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_1","title":"\u7eb8\u7b14\u95ee\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u67d0\u56fd\u6709 \\(n\\) \u79cd\u7eb8\u5e01\uff0c\u6bcf\u79cd\u7eb8\u5e01\u9762\u989d\u4e3a \\(a_i\\) \u5e76\u4e14\u6709\u65e0\u9650\u5f20\uff0c\u73b0\u5728\u8981\u51d1\u51fa \\(w\\) \u7684\u91d1\u989d\uff0c\u8bd5\u95ee\u6700\u5c11\u7528\u591a\u5c11\u5f20\u7eb8\u5e01\u53ef\u4ee5\u51d1\u51fa\u6765\uff1f</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n,w\\)\uff0c\u5206\u522b\u8868\u793a\u7eb8\u5e01\u7684\u79cd\u6570\u548c\u8981\u51d1\u51fa\u7684\u91d1\u989d\u3002 \u7b2c\u4e8c\u884c\u4e00\u884c \\(n\\) \u4e2a\u4ee5\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 \\(a_1, a_2, a_3, \\dots a_n\\) \u4f9d\u6b21\u8868\u793a\u8fd9 \\(n\\) \u79cd\u7eb8\u5e01\u7684\u9762\u989d\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c11\u4f7f\u7528\u7684\u7eb8\u5e01\u5f20\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>6 15\n1 5 10 20 50 100\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>3 15\n1 5 11\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_5","title":"\u63d0\u793a","text":"<p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(n\\le 10\\)\uff0c\\(w\\le 100\\)\uff1b \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(1\\le n\\le 10^3\\)\uff0c\\(1\\le a_i \\leq w\\le 10^4\\)\u3002</p> <p>\u5bbd\u641c\u89e3\u51b3\u7684\u8bdd\uff0c\u4f1a\u6bd4\u8f83\u7e41\u7410</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int INF = 1e9;\nint dfs(int w)\n{\n    if (w == 0) return 0;\n    if (w &lt; 0) return INF;\n    return min(dfs(w - 1), min(dfs(w - 5), dfs(w - 11))) + 1;\n\n}\nint main()\n{\n    cout &lt;&lt; dfs(15) &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u6bd4\u8d77\u51fd\u6570\uff0cdfs(w)\u7684\u4f5c\u7528\u66f4\u52a0\u503e\u5411\u4e8e\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u503c\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u662f\u6052\u5b9a\u7684\u3002\u5728\u7b2c\u4e00\u6b21\u8fd0\u7b97\u5230dsf(w)\u65f6\u5019\uff0c\u5c06\u8fd0\u7b97\u7ed3\u679c\u56fa\u5b9a\u4e0b\u6765\u3002\u5b58\u50a8\u5230\u6570\u7ec4f\u7684\u539f\u8272fw\u4e2d\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int N = 1e9;\nint f[10010];\n\nint dfs(int w) {\n    if (w &lt; 0) return N;\n    if (f[w] != N) return f[w];\n    if (w == 0) return 0;\n    int x= min(dfs(w - 1), min(dfs(w - 5), dfs(w - 11))) + 1;\n    f[w] = x;\n    return f[w];\n}\nint main()\n{\n    int k = 15;\n    for (int i = 1; i &lt;= k; i++) f[i] = N;\n    cout &lt;&lt; dfs(k);\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_6","title":"\u6570\u5b57\u4e09\u89d2\u5f62","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_7","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u89c2\u5bdf\u4e0b\u9762\u7684\u6570\u5b57\u91d1\u5b57\u5854\u3002</p> <p>\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u67e5\u627e\u4ece\u6700\u9ad8\u70b9\u5230\u5e95\u90e8\u4efb\u610f\u5904\u7ed3\u675f\u7684\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u7ecf\u8fc7\u6570\u5b57\u7684\u548c\u6700\u5927\u3002\u6bcf\u4e00\u6b65\u53ef\u4ee5\u8d70\u5230\u5de6\u4e0b\u65b9\u7684\u70b9\u4e5f\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u65b9\u7684\u70b9\u3002</p> <p></p> <p>\u5728\u4e0a\u9762\u7684\u6837\u4f8b\u4e2d\uff0c\u4ece \\(7 \\to 3 \\to 8 \\to 7 \\to 5\\) \u7684\u8def\u5f84\u4ea7\u751f\u4e86\u6700\u5927\u6743\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_8","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u4e2a\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(r\\) ,\u8868\u793a\u884c\u7684\u6570\u76ee\u3002</p> <p>\u540e\u9762\u6bcf\u884c\u4e3a\u8fd9\u4e2a\u6570\u5b57\u91d1\u5b57\u5854\u7279\u5b9a\u884c\u5305\u542b\u7684\u6574\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_9","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5355\u72ec\u7684\u4e00\u884c,\u5305\u542b\u90a3\u4e2a\u53ef\u80fd\u5f97\u5230\u7684\u6700\u5927\u7684\u548c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_3","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_4","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>5\n7\n3 8\n8 1 0\n2 7 4 4\n4 5 2 6 5\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_5","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>30\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_10","title":"\u63d0\u793a","text":"<p>\u3010\u6570\u636e\u8303\u56f4\u3011 \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le r \\le 1000\\)\uff0c\u6240\u6709\u8f93\u5165\u5728 \\([0,100]\\) \u8303\u56f4\u5185\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_11","title":"\u53ef\u4ee5\u5148\u8003\u8651\u66b4\u529b\u641c\u7d22","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint a[N][N];\nint n;\nint dfs(int x, int y)\n{\n    if (x == n) return a[x][y];\n    return max(dfs(x + 1, y), dfs(x + 1, y + 1)) + a[x][y];\n}\nint main()\n{\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= i; j++)\n            cin &gt;&gt; a[i][j];\n    cout &lt;&lt; dfs(1, 1) &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u4e0e\u4e4b\u524d\u90a3\u4e2a\u9898\u76ee\u7684\u76f8\u4f3c\u70b9\u5728\u4e8e\uff0cdfs(x,y)\u7684\u503c\u5bf9\u4e8ex,y\u6765\u8bb2\u662f\u56fa\u5b9a\u7684\uff0c\u4ecex\u8d70\u5230y\u6700\u5927\u503c\u53ea\u548c\u4e0b\u9762\u7684\u6570\u5b57\u6709\u5173\u7cfb\u4e00\u5f00\u59cb\u5c31\u662f\u56fa\u5b9a\u7684\uff0c\u5c31\u53ef\u4ee5\u4e5f\u662f\u7528\u6570\u7ec4\u6765\u6c42\u89e3</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint a[N][N], n;\nint main()\n{\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= i; j++)\n            cin &gt;&gt; a[i][j];\n\n    for (int i = n; i &gt; 1; i--)\n        for (int j = 1; j &lt;= i - 1; j++)\n            a[i - 1][j] += max(a[i][j], a[i][j + 1]);\n    cout &lt;&lt; a[1][1] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#noip2002","title":"[NOIP2002 \u666e\u53ca\u7ec4] \u8fc7\u6cb3\u5352","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_12","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u68cb\u76d8\u4e0a \\(A\\) \u70b9\u6709\u4e00\u4e2a\u8fc7\u6cb3\u5352\uff0c\u9700\u8981\u8d70\u5230\u76ee\u6807 \\(B\\) \u70b9\u3002\u5352\u884c\u8d70\u7684\u89c4\u5219\uff1a\u53ef\u4ee5\u5411\u4e0b\u3001\u6216\u8005\u5411\u53f3\u3002\u540c\u65f6\u5728\u68cb\u76d8\u4e0a \\(C\\) \u70b9\u6709\u4e00\u4e2a\u5bf9\u65b9\u7684\u9a6c\uff0c\u8be5\u9a6c\u6240\u5728\u7684\u70b9\u548c\u6240\u6709\u8df3\u8dc3\u4e00\u6b65\u53ef\u8fbe\u7684\u70b9\u79f0\u4e3a\u5bf9\u65b9\u9a6c\u7684\u63a7\u5236\u70b9\u3002\u56e0\u6b64\u79f0\u4e4b\u4e3a\u201c\u9a6c\u62e6\u8fc7\u6cb3\u5352\u201d\u3002</p> <p>\u68cb\u76d8\u7528\u5750\u6807\u8868\u793a\uff0c\\(A\\) \u70b9 \\((0, 0)\\)\u3001\\(B\\) \u70b9 \\((n, m)\\)\uff0c\u540c\u6837\u9a6c\u7684\u4f4d\u7f6e\u5750\u6807\u662f\u9700\u8981\u7ed9\u51fa\u7684\u3002</p> <p></p> <p>\u73b0\u5728\u8981\u6c42\u4f60\u8ba1\u7b97\u51fa\u5352\u4ece \\(A\\) \u70b9\u80fd\u591f\u5230\u8fbe \\(B\\) \u70b9\u7684\u8def\u5f84\u7684\u6761\u6570\uff0c\u5047\u8bbe\u9a6c\u7684\u4f4d\u7f6e\u662f\u56fa\u5b9a\u4e0d\u52a8\u7684\uff0c\u5e76\u4e0d\u662f\u5352\u8d70\u4e00\u6b65\u9a6c\u8d70\u4e00\u6b65\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_13","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u4e00\u884c\u56db\u4e2a\u6b63\u6574\u6570\uff0c\u5206\u522b\u8868\u793a \\(B\\) \u70b9\u5750\u6807\u548c\u9a6c\u7684\u5750\u6807\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_14","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6240\u6709\u7684\u8def\u5f84\u6761\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_6","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_7","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>6 6 3 3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_8","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>6\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_15","title":"\u63d0\u793a","text":"<p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n, m \\le 20\\)\uff0c\\(0 \\le\\) \u9a6c\u7684\u5750\u6807 \\(\\le 20\\)\u3002</p> <p>\u3010\u9898\u76ee\u6765\u6e90\u3011</p> <p>NOIP 2002 \u666e\u53ca\u7ec4\u7b2c\u56db\u9898</p> <p>\u8fd9\u9053\u9898\u521d\u59cb\u4f4d\u7f6e\u662f\u4ece 0 \u5f00\u59cb\u7684\uff0c\u8fd9\u6837\u4e0d\u662f\u5f88\u5229\u4e8e\u6211\u4eec\u89e3\u9898\uff0c\u6240\u4ee5\u4e0d\u5982\u6682\u4e14\u628a\u8fd9\u9898\u91cc\u6d89\u53ca\u7684\u5750\u6807\u7edf\u7edf +1\uff0c\u90a3\u4e48\u521d\u59cb\u4f4d\u7f6e\u5c31\u4ece\u00a0(0,0)(0,0)\u00a0\u53d8\u6210\u4e86\u00a0(1,1)(1,1)\u3002</p> <p>\u5148\u8003\u8651\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u9a6c\u7684\u9650\u5236\uff0c\u5352\u5b50\u53ef\u4ee5\u968f\u4fbf\u5411\u53f3\u5411\u4e0b\u8d70\uff0c\u90a3\u4e48\u53ef\u4ee5\u60f3\u5230\uff0c\u4e00\u4e2a\u5352\u5b50\u53ea\u80fd\u4ece \u5f53\u524d\u683c\u5b50\u7684\u5de6\u4fa7\u683c\u5b50 \u548c \u5f53\u524d\u683c\u5b50\u7684\u4e0a\u65b9\u683c\u5b50 \u4e0a\u8d70\u5230\u5f53\u524d\u683c\u5b50\u3002\u90a3\u4e48\u5047\u8bbe\u4ece\u00a0(1,1)(1,1)\u00a0\u8d70\u5230 \u5f53\u524d\u683c\u5b50\u7684\u5de6\u4fa7\u683c\u5b50 \u7684\u8def\u5f84\u6761\u6570\u662f\u00a0\ufffdx\uff0c\u4ece\u00a0(1,1)(1,1)\u00a0\u8d70\u5230 \u5f53\u524d\u683c\u5b50\u7684\u4e0a\u65b9\u683c\u5b50 \u7684\u8def\u5f84\u6761\u6570\u662f\u00a0\ufffdy\uff0c\u90a3\u4e48\u4ece\u00a0(1,1)(1,1)\u00a0\u8d70\u5230\u5f53\u524d\u683c\u5b50\u7684\u8def\u5f84\u6761\u6570\u5c31\u5e94\u8be5\u662f\u00a0\ufffd+\ufffdx+y\u3002</p> <p>\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u8bbe\u00a0\ufffd(\ufffd,\ufffd)f(i,j)\u00a0\u8868\u793a\u4ece\u00a0(1,1)(1,1)\u00a0\u683c\u5b50\u8d70\u5230\u5f53\u524d\u683c\u5b50\u7684\u8def\u5f84\u6761\u6570\uff0c\u90a3\u4e48\u6839\u636e\u4e0a\u4e00\u6bb5\u5f97\u5230\u7684\u7ed3\u8bba\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a</p> <p>\ufffd(\ufffd,\ufffd)=\ufffd(\ufffd\u22121,\ufffd)+\ufffd(\ufffd,\ufffd\u22121)f(i,j)=f(i\u22121,j)+f(i,j\u22121)</p> <p>(\ufffd,\ufffd)(i,j)\u00a0\u662f\u5f53\u524d\u683c\u5b50\uff0c\u90a3\u4e48\u00a0(\ufffd\u22121,\ufffd)(i\u22121,j)\u00a0\u5c31\u662f \u5f53\u524d\u683c\u5b50\u7684\u4e0a\u65b9\u683c\u5b50\uff0c(\ufffd,\ufffd\u22121)(i,j\u22121)\u00a0\u5c31\u662f \u5f53\u524d\u683c\u5b50\u7684\u5de6\u4fa7\u683c\u5b50\u3002\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u679a\u4e3e\u00a0\ufffdi\u00a0\u548c\u00a0\ufffdj\u00a0\u5c31\u80fd\u83b7\u5f97\u6240\u6709\u70b9\u7684\u7b54\u6848\uff0c\u53ef\u4ee5\u60f3\u5230\uff0c\u5728\u8fd9\u9053\u9898\u91cc\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f\u00a0\ufffd(\ufffd,\ufffd)f(n,m)\uff08\u56e0\u4e3a B \u70b9\u7684\u5750\u6807\u662f(\ufffd,\ufffd)(n,m)\uff09\u3002</p> <p>\u5f53\u7136\u5982\u679c\u53ea\u662f\u6309\u7167\u8fd9\u4e2a\u516c\u5f0f\u63a8\u80af\u5b9a\u4e0d\u884c\uff0c\u56e0\u4e3a\u00a0\ufffdf\u00a0\u7684\u521d\u59cb\u6570\u503c\u90fd\u662f 0\uff0c\u518d\u600e\u4e48\u63a8\u4e5f\u90fd\u662f 0\uff0c\u6211\u4eec\u8981\u8ba9\u00a0\ufffd(1,1)f(1,1)\u00a0\u80fd\u6839\u636e\u4e0a\u9762\u5f97\u5230\u7684\u5f0f\u5b50\u63a8\u51fa\u7b54\u6848\u662f 1\uff0c\u8fd9\u6837\u624d\u80fd\u6709\u6709\u610f\u4e49\u7684\u7ed3\u679c\u3002\u6839\u636e\u00a0\ufffd(1,1)=\ufffd(0,1)+\ufffd(1,0)f(1,1)=f(0,1)+f(1,0)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u00a0\ufffd(1,0)=1f(1,0)=1\u00a0\u6216\u8005\u00a0\ufffd(0,1)=1f(0,1)=1\u00a0\u5373\u53ef\u3002</p> <p>\u63a5\u4e0b\u6765\u8003\u8651\u4e00\u4e0b\u52a0\u5165\u4e86 \u9a6c \u8fd9\u9053\u9898\u8be5\u600e\u4e48\u505a\uff0c\u5047\u8bbe\u00a0(\ufffd,\ufffd)(x,y)\u00a0\u8fd9\u4e2a\u70b9\u88ab\u9a6c\u62e6\u4f4f\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u8bf4\u8fd9\u4e2a\u70b9\u4e0d\u80fd\u88ab\u5352\u5b50\u8d70\u5230\uff0c\u90a3\u5f53\u6211\u4eec\u679a\u4e3e\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u4ed6\u88ab\u9a6c\u62e6\u4f4f\u4e86\uff0c\u90a3\u5c31\u76f4\u63a5\u8df3\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u8ba9\u00a0\ufffd(\ufffd,\ufffd)=0f(x,y)=0\u00a0\u5c31\u884c\u4e86\u3002</p> <p>\u5177\u4f53\u5199\u4ee3\u7801\u7684\u65f6\u5019\u6211\u4eec\u6ce8\u610f\u5230\u5728\u5224\u65ad\u4e00\u4e2a\u70b9\u6709\u6ca1\u6709\u88ab\u9a6c\u62e6\u4f4f\u65f6\uff0c\u4f1a\u7528\u5230\u00a0(\ufffd\u22122,\ufffd\u22121)(i\u22122,j\u22121)\u00a0\u548c\u00a0(\ufffd\u22121,\ufffd\u22122)(i\u22121,j\u22122)\u00a0\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u5982\u679c\u4e0d\u628a\u6240\u6709\u7684\u70b9\u7684\u5750\u6807\u90fd\u52a0\u4e0a 2 \uff08\u524d\u9762\u5206\u6790\u7684\u65f6\u5019\u53ea\u628a\u6240\u6709\u7684\u5750\u6807\u52a0\u4e0a 1\uff09\uff0c\u5c31\u4f1a\u56e0\u4e3a\u6570\u7ec4\u8d8a\u754c\u800c WA \u6389\u4e00\u4e2a\u70b9\u3002</p> <p>\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u8bb0\u5f97\u5f00\u00a0<code>long long</code>\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#define ll long long\nusing namespace std;\nconst int fx[] = { 0,-2,-1,1,2,2,1,-1,-2 };\nconst int fy[] = { 0,1,2,2,1,-1,-2,-2,-1 };\nint bx, by, mx, my;\nll f[40][40];\nbool s[40][40];//\u5224\u65ad\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u88ab\u9a6c\u62e6\u4f4f\n\nint main()\n{\n    cin &gt;&gt; bx &gt;&gt; by &gt;&gt; mx &gt;&gt; my;\n    bx += 2, by += 2, mx += 2, my += 2;//\u5750\u6807\u90fd\u52a0\u4e0a2\uff0c\u9632\u6b62\u8d8a\u754c\n    f[2][1] = 1;//\u521d\u59cb\u5316\uff0c\u4ec5\u4ec5\u9012\u5f52\u5f0f\uff0c\u5168\u90e8\u662f0\u63a8\u5bfc\u7684\u6ca1\u6709\u610f\u4e49\n    s[mx][my] = 1;//\u6807\u8bb0\u9a6c\u7684\u4f4d\u7f6e\n    for (int i = 1; i &lt;= 8; i++) s[mx + fx[i]][my + fy[i]] = 1;\n    for (int i = 2; i &lt;= bx; i++)\n        for (int j = 2; j &lt;= by; j++) {\n            if (s[i][j]) continue;//\u88ab\u9a6c\u62e6\u4f4f\uff0c\u526a\u679d\u4e2b\n            f[i][j] = f[i - 1][j] + f[i][j - 1];\n        }\n    cout &lt;&lt; f[bx][by] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#noip2005","title":"[NOIP2005 \u666e\u53ca\u7ec4] \u91c7\u836f","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_16","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8fb0\u8fb0\u662f\u4e2a\u5929\u8d44\u806a\u9896\u7684\u5b69\u5b50\uff0c\u4ed6\u7684\u68a6\u60f3\u662f\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u4f1f\u5927\u7684\u533b\u5e08\u3002\u4e3a\u6b64\uff0c\u4ed6\u60f3\u62dc\u9644\u8fd1\u6700\u6709\u5a01\u671b\u7684\u533b\u5e08\u4e3a\u5e08\u3002\u533b\u5e08\u4e3a\u4e86\u5224\u65ad\u4ed6\u7684\u8d44\u8d28\uff0c\u7ed9\u4ed6\u51fa\u4e86\u4e00\u4e2a\u96be\u9898\u3002\u533b\u5e08\u628a\u4ed6\u5e26\u5230\u4e00\u4e2a\u5230\u5904\u90fd\u662f\u8349\u836f\u7684\u5c71\u6d1e\u91cc\u5bf9\u4ed6\u8bf4\uff1a\u201c\u5b69\u5b50\uff0c\u8fd9\u4e2a\u5c71\u6d1e\u91cc\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u8349\u836f\uff0c\u91c7\u6bcf\u4e00\u682a\u90fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u6bcf\u4e00\u682a\u4e5f\u6709\u5b83\u81ea\u8eab\u7684\u4ef7\u503c\u3002\u6211\u4f1a\u7ed9\u4f60\u4e00\u6bb5\u65f6\u95f4\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u53ef\u4ee5\u91c7\u5230\u4e00\u4e9b\u8349\u836f\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u806a\u660e\u7684\u5b69\u5b50\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u8ba9\u91c7\u5230\u7684\u8349\u836f\u7684\u603b\u4ef7\u503c\u6700\u5927\u3002\u201d</p> <p>\u5982\u679c\u4f60\u662f\u8fb0\u8fb0\uff0c\u4f60\u80fd\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417\uff1f</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_17","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u6709 \\(2\\) \u4e2a\u6574\u6570 \\(T\\)\uff08\\(1 \\le T \\le 1000\\)\uff09\u548c \\(M\\)\uff08\\(1 \\le  M \\le 100\\)\uff09\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\\(T\\) \u4ee3\u8868\u603b\u5171\u80fd\u591f\u7528\u6765\u91c7\u836f\u7684\u65f6\u95f4\uff0c\\(M\\) \u4ee3\u8868\u5c71\u6d1e\u91cc\u7684\u8349\u836f\u7684\u6570\u76ee\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 \\(M\\) \u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u5728 \\(1\\) \u5230 \\(100\\) \u4e4b\u95f4\uff08\u5305\u62ec \\(1\\) \u548c \\(100\\)\uff09\u7684\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u91c7\u6458\u67d0\u682a\u8349\u836f\u7684\u65f6\u95f4\u548c\u8fd9\u682a\u8349\u836f\u7684\u4ef7\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_18","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u53ef\u4ee5\u91c7\u5230\u7684\u8349\u836f\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_9","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_10","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>70 3\n71 100\n69 1\n1 2\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1_11","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_19","title":"\u63d0\u793a","text":"<p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <ul> <li>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\\(M \\le 10\\)\uff1b</li> <li>\u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0c\\(M \\le 100\\)\u3002</li> </ul> <p>\u3010\u9898\u76ee\u6765\u6e90\u3011</p> <p>NOIP 2005 \u666e\u53ca\u7ec4\u7b2c\u4e09\u9898</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8/","title":"\u56de\u6587\u5b50\u4e32","text":"<p>LCR 020. \u56de\u6587\u5b50\u4e32</p> <pre><code>class Solution {\npublic:\n    int countSubstrings(string s) {\n        int n=s.length();\n        vector&lt;vector&lt;bool&gt;&gt; dp(n,vector&lt;bool&gt;(n));\n        for(int i=0;i&lt;n;i++)    dp[i][i]=true;\n        int ans=n;\n        for(int i=n-1;i&gt;=0;i--){\n            for(int j=i+1;j&lt;n;j++){\n                if(s[i]!=s[j])  continue;\n                if(j=i+1||dp[i+1][j-1]){\n                    ans++;\n                    dp[i][j]=true;\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%94%E7%94%A8/#5","title":"5\u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p>\u6700\u957f\u56de\u6587\u5b50\u4e32</p> <p>\u5982\u679c\u5b57\u7b26\u4e32\u5411\u524d\u548c\u5411\u540e\u8bfb\u90fd\u76f8\u540c\uff0c\u5219\u5b83\u6ee1\u8db3 \u56de\u6587\u6027\u3002</p> <p>\u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"babad\" \u8f93\u51fa\uff1a\"bab\" \u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 2\uff1a \u8f93\u5165\uff1as = \"cbbd\" \u8f93\u51fa\uff1a\"bb\"</p> <p>\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5e76\u4e14\u5f80\u5916\u5ef6\u5c55\u7684\u4e24\u4e2a\u5b57\u6bcd\u76f8\u7b49\uff0c\u5219\u52a0\u4e0a\u4e24\u8fb9\u8fd8\u662f\u56de\u6587\u4e32\u3002</p> <p>P(i,j)=P(i+1,j\u22121)\u2227(S[i]S[j]) \u53d8\u91cfl\u7684\u4f5c\u7528\uff1al\u4ee3\u8868\u5f53\u524d\u6b63\u5728\u8003\u8651\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u3002\u5b83\u4ece2\u5f00\u59cb\uff0c\u9010\u6e10\u589e\u52a0\uff0c\u76f4\u5230\u5b57\u7b26\u4e32\u7684\u957f\u5ea6n\u3002l\u7684\u76ee\u7684\u662f\u5e2e\u52a9\u6211\u4eec\u4e00\u5c42\u4e00\u5c42\u5730\u68c0\u67e5\u6240\u6709\u53ef\u80fd\u7684\u56de\u6587\u5b50\u4e32\uff0c\u4ece\u6700\u77ed\u7684\uff08\u957f\u5ea6\u4e3a2\uff09\u5f00\u59cb\uff0c\u76f4\u5230\u6700\u957f\u7684\u3002 = \u52a8\u6001\u89c4\u5212 <pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n=s.size();\n        if(n&lt;2){\n            return s;\n        }\n\n        int maxlen=1;\n        int begin=0;\n        //\u6807\u8bb0\u662f\u5426\u662f\u56de\u6587\u4e32\n        vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(n));\n        for(int i=0;i&lt;n;i++){\n            dp[i][i]=true;\n        }//\u521d\u59cb\u5316\uff0c\u957f\u5ea6\u4e3a1\u7684\u90fd\u662f\u56de\u6587\u4e32\n\n        for(int l=2;l&lt;=n;l++){\n            for(int i=0;i&lt;n;i++){\n                int j=l+i-1;\n                if(j&gt;=n){\n                    break;\n                }\n\n                if(s[i]!=s[j]){\n                    dp[i][j]=false;\n                }else{\n                    if(j-i&lt;3){\n                        dp[i][j]=true;\n                    }else{\n                        dp[i][j]=dp[i+1][j-1];\n                    }\n                }\n                if(dp[i][j]&amp;&amp;j-i+1&gt;maxlen){\n                    maxlen=j-i+1;\n                    begin=i;\n                }\n            }\n        }\n        return s.substr(begin,maxlen);\n    }\n};\n</code></pre> ===\u4e2d\u5fc3\u6269\u5c55\u6cd5 <pre><code>//\u6240\u6709\u7684\u72b6\u6001\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u7684\u53ef\u80fd\u6027\u90fd\u662f\u552f\u4e00\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6bcf\u4e00\u79cd\u8fb9\u754c\u60c5\u51b5\u5f00\u59cb\u300c\u6269\u5c55\u300d\nclass Solution {\npublic:\n    pair&lt;int, int&gt; expandAroundCenter(const string&amp; s, int left, int right) {\n        while (left &gt;= 0 &amp;&amp; right &lt; s.size() &amp;&amp; s[left] == s[right]) {\n            --left;\n            ++right;\n        }\n        return {left + 1, right - 1};\n    }\n\n\n    string longestPalindrome(string s) {\n        int start=0,end=0;\n        for(int i=0;i&lt;s.size();i++){\n            auto [left1, right1] = expandAroundCenter(s, i, i);\n            auto [left2, right2] = expandAroundCenter(s, i, i + 1);\n\n            if(right1-left1&gt;end-start){\n                start=left1;\n                end=right1;\n            }\n            if(right2-left2&gt;end-start){\n                start=left2;\n                end=right2;\n            }\n        }\n        return s.substr(start,end-start+1);\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/","title":"\u72b6\u6001\uff0c\u8f6c\u79fb\u4e0e\u6709\u5411\u65e0\u73af\u56fe","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_1","title":"\u4e00\u4e9b\u672f\u8bed","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_2","title":"\u72b6\u6001","text":"<p>\u72b6\u6001\u53ef\u4ee5\u7b3c\u7edf\u7684\u89e3\u91ca\u4e3a\u95ee\u9898\u6240\u5728\u7684\u5c40\u9762\uff0c\u4f8b\u5982\u8bf4\uff08\u7528\u53d8\u91cf\u6240\u8868\u793a\u7684\uff09\u6240\u5728\u7684\u5c40\u9762\u7684\uff08\u6700\u4f18\uff09\u7b54\u6848\uff0c\u6216\u8005\u6ee1\u8db3\u67d0\u79cd\u6027\u8d28\u7684\u65b9\u6848\u6570\u3002\u201c\u51d1\u591fw\u7684\u91d1\u989d\u201d\u662f\u4e00\u79cd\u5173\u4e8ew\u7684\u5c40\u9762\uff0c\u201c\u4ecex\u8d70\u5230y\u201d\u662f\u4e00\u79cd\u5173\u4e8ex\uff0cy\u7684\u5c40\u9762\u3002\u5982\u679c\u521d\u5b66\u8005\u4e0d\u77e5\u9053\u600e\u4e48\u786e\u5b9a\u72b6\u6001\uff0c\u53ef\u4ee5\u8003\u8651\u5957\u7528\u6700\u4e3a\u6734\u7d20\u7684\u641c\u7d22\u7b97\u6cd5\u91cc\u7684\u72b6\u6001\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_3","title":"\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b","text":"<p>\u7b2c\u4e00\u9898\u7eb8\u7b14\u95ee\u9898\u91cc\u9762\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f f(w)=minf(w-ai)+1; \u7b2c\u4e8c\u9898\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f g(x,y)=max(g(x+1,y),g(x+1,y+1))+a[x][y] \u8f6c\u79fb\u65b9\u7a0b\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u627e\u5230\u6700\u4f18\u89e3\u7684\u524d\u7ee7\u60c5\u51b5\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#2","title":"\u7eb8\u7b14\u95ee\u98982","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_4","title":"\u9898\u76ee\u80cc\u666f","text":"<p>\u4f60\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u94b1\u7684\u5c0f\u670b\u53cb\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_5","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4f60\u6709 \\(n\\) \u79cd\u9762\u989d\u4e92\u4e0d\u76f8\u540c\u7684\u7eb8\u5e01\uff0c\u7b2c \\(i\\) \u79cd\u7eb8\u5e01\u7684\u9762\u989d\u4e3a \\(a_i\\) \u5e76\u4e14\u6709\u65e0\u9650\u5f20\uff0c\u73b0\u5728\u4f60\u9700\u8981\u652f\u4ed8 \\(w\\) \u7684\u91d1\u989d\uff0c\u6c42\u95ee\u6709\u591a\u5c11\u79cd\u65b9\u5f0f\u53ef\u4ee5\u652f\u4ed8\u9762\u989d \\(w\\)\uff0c\u7b54\u6848\u5bf9 \\(10^9+7\\) \u53d6\u6a21\u3002 \u6ce8\u610f\u5728\u8fd9\u91cc\uff0c\u540c\u6837\u7684\u7eb8\u5e01\u7ec4\u5408\u5982\u679c\u652f\u4ed8\u987a\u5e8f\u4e0d\u540c\uff0c\u4f1a\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u65b9\u5f0f\u3002\u4f8b\u5982\u652f\u4ed8 \\(3\\) \u5143\uff0c\u4f7f\u7528\u4e00\u5f20\u9762\u503c \\(1\\) \u7684\u7eb8\u5e01\u548c\u4e00\u5f20\u9762\u503c \\(2\\) \u7684\u7eb8\u5e01\u4f1a\u4ea7\u751f\u4e24\u79cd\u65b9\u5f0f\uff08\\(1+2\\) \u548c \\(2+1\\)\uff09\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_6","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570 \\(n,w\\)\uff0c\u5206\u522b\u8868\u793a\u7eb8\u5e01\u7684\u79cd\u6570\u548c\u8981\u51d1\u51fa\u7684\u91d1\u989d\u3002 \u7b2c\u4e8c\u884c\u4e00\u884c \\(n\\) \u4e2a\u4ee5\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570 $a_1, a_2, \\dots a_n $ \u4f9d\u6b21\u8868\u793a\u8fd9 \\(n\\) \u79cd\u7eb8\u5e01\u7684\u9762\u989d\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_7","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u652f\u4ed8\u65b9\u5f0f\u7684\u6570\u91cf\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>6 15\n1 5 10 20 50 100\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>42\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#2_1","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#2_2","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>3 15\n1 5 11\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#2_3","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>39\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_8","title":"\u63d0\u793a","text":"<p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(n\\le 10\\)\uff0c\\(w\\le 100\\)\uff1b \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u6ee1\u8db3 \\(1\\le n\\le 10^3\\)\uff0c\\(1\\le a_i \\le  w\\le 10^4\\)\u3002  </p> <p>\u5176\u5b9e\u5c0f\u670b\u53cb\u5e76\u4e0d\u6709\u94b1\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N = 10010;\nconst int mod = 10000000007;\nint f[N], a[N];//f[i]\u8868\u793a\u51d1\u591fi\u7684\u91d1\u989d\u7684\u603b\u65b9\u6848\u6570\n\nint main()\n{\n    int n, w;\n    cin &gt;&gt; n &gt;&gt; w;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n\n\n    f[0] = 1;\n    for (int i = 1; i &lt;= w; i++)\n        for (int j = 1; j &lt;= n; j++)\n            if (i &gt;= a[j]) f[i] = (f[i] + f[i - a[j]]) % mod;\n    cout &lt;&lt; f[w] &lt;&lt; endl;\n    return 0;\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#noip2006","title":"[NOIP2006 \u63d0\u9ad8\u7ec4] \u91d1\u660e\u7684\u9884\u7b97\u65b9\u6848","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_9","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u91d1\u660e\u4eca\u5929\u5f88\u5f00\u5fc3\uff0c\u5bb6\u91cc\u8d2d\u7f6e\u7684\u65b0\u623f\u5c31\u8981\u9886\u94a5\u5319\u4e86\uff0c\u65b0\u623f\u91cc\u6709\u4e00\u95f4\u91d1\u660e\u81ea\u5df1\u4e13\u7528\u7684\u5f88\u5bbd\u655e\u7684\u623f\u95f4\u3002\u66f4\u8ba9\u4ed6\u9ad8\u5174\u7684\u662f\uff0c\u5988\u5988\u6628\u5929\u5bf9\u4ed6\u8bf4\uff1a\u201c\u4f60\u7684\u623f\u95f4\u9700\u8981\u8d2d\u4e70\u54ea\u4e9b\u7269\u54c1\uff0c\u600e\u4e48\u5e03\u7f6e\uff0c\u4f60\u8bf4\u4e86\u7b97\uff0c\u53ea\u8981\u4e0d\u8d85\u8fc7 \\(n\\) \u5143\u94b1\u5c31\u884c\u201d\u3002\u4eca\u5929\u4e00\u65e9\uff0c\u91d1\u660e\u5c31\u5f00\u59cb\u505a\u9884\u7b97\u4e86\uff0c\u4ed6\u628a\u60f3\u4e70\u7684\u7269\u54c1\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e3b\u4ef6\u4e0e\u9644\u4ef6\uff0c\u9644\u4ef6\u662f\u4ece\u5c5e\u4e8e\u67d0\u4e2a\u4e3b\u4ef6\u7684\uff0c\u4e0b\u8868\u5c31\u662f\u4e00\u4e9b\u4e3b\u4ef6\u4e0e\u9644\u4ef6\u7684\u4f8b\u5b50\uff1a</p> \u4e3b\u4ef6 \u9644\u4ef6 \u7535\u8111 \u6253\u5370\u673a\uff0c\u626b\u63cf\u4eea \u4e66\u67dc \u56fe\u4e66 \u4e66\u684c \u53f0\u706f\uff0c\u6587\u5177 \u5de5\u4f5c\u6905 \u65e0 <p>\u5982\u679c\u8981\u4e70\u5f52\u7c7b\u4e3a\u9644\u4ef6\u7684\u7269\u54c1\uff0c\u5fc5\u987b\u5148\u4e70\u8be5\u9644\u4ef6\u6240\u5c5e\u7684\u4e3b\u4ef6\u3002\u6bcf\u4e2a\u4e3b\u4ef6\u53ef\u4ee5\u6709 \\(0\\) \u4e2a\u3001\\(1\\) \u4e2a\u6216 \\(2\\) \u4e2a\u9644\u4ef6\u3002\u6bcf\u4e2a\u9644\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u4e3b\u4ef6\uff0c\u9644\u4ef6\u4e0d\u518d\u6709\u4ece\u5c5e\u4e8e\u81ea\u5df1\u7684\u9644\u4ef6\u3002\u91d1\u660e\u60f3\u4e70\u7684\u4e1c\u897f\u5f88\u591a\uff0c\u80af\u5b9a\u4f1a\u8d85\u8fc7\u5988\u5988\u9650\u5b9a\u7684 \\(n\\) \u5143\u3002\u4e8e\u662f\uff0c\u4ed6\u628a\u6bcf\u4ef6\u7269\u54c1\u89c4\u5b9a\u4e86\u4e00\u4e2a\u91cd\u8981\u5ea6\uff0c\u5206\u4e3a \\(5\\) \u7b49\uff1a\u7528\u6574\u6570 \\(1 \\sim 5\\) \u8868\u793a\uff0c\u7b2c \\(5\\) \u7b49\u6700\u91cd\u8981\u3002\u4ed6\u8fd8\u4ece\u56e0\u7279\u7f51\u4e0a\u67e5\u5230\u4e86\u6bcf\u4ef6\u7269\u54c1\u7684\u4ef7\u683c\uff08\u90fd\u662f \\(10\\) \u5143\u7684\u6574\u6570\u500d\uff09\u3002\u4ed6\u5e0c\u671b\u5728\u4e0d\u8d85\u8fc7 \\(n\\) \u5143\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u6bcf\u4ef6\u7269\u54c1\u7684\u4ef7\u683c\u4e0e\u91cd\u8981\u5ea6\u7684\u4e58\u79ef\u7684\u603b\u548c\u6700\u5927\u3002</p> <p>\u8bbe\u7b2c \\(j\\) \u4ef6\u7269\u54c1\u7684\u4ef7\u683c\u4e3a \\(v_j\\)\uff0c\u91cd\u8981\u5ea6\u4e3a\\(w_j\\)\uff0c\u5171\u9009\u4e2d\u4e86 \\(k\\) \u4ef6\u7269\u54c1\uff0c\u7f16\u53f7\u4f9d\u6b21\u4e3a \\(j_1,j_2,\\dots,j_k\\)\uff0c\u5219\u6240\u6c42\u7684\u603b\u548c\u4e3a\uff1a</p> <p>\\(v_{j_1} \\times w_{j_1}+v_{j_2} \\times w_{j_2}+ \\dots +v_{j_k} \\times w_{j_k}\\)\u3002</p> <p>\u8bf7\u4f60\u5e2e\u52a9\u91d1\u660e\u8bbe\u8ba1\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u8d2d\u7269\u5355\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_10","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u603b\u94b1\u6570 \\(n\\) \u548c\u5e0c\u671b\u8d2d\u4e70\u7684\u7269\u54c1\u4e2a\u6570 \\(m\\)\u3002</p> <p>\u7b2c \\(2\\) \u5230\u7b2c \\((m + 1)\\) \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570\uff0c\u7b2c \\((i + 1)\\) \u884c\u7684\u6574\u6570 \\(v_i\\)\uff0c\\(p_i\\)\uff0c\\(q_i\\) \u5206\u522b\u8868\u793a\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u7684\u4ef7\u683c\u3001\u91cd\u8981\u5ea6\u4ee5\u53ca\u5b83\u5bf9\u5e94\u7684\u7684\u4e3b\u4ef6\u3002\u5982\u679c \\(q_i=0\\)\uff0c\u8868\u793a\u8be5\u7269\u54c1\u672c\u8eab\u662f\u4e3b\u4ef6\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_11","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#1_3","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#1_4","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>1000 5\n800 2 0\n400 5 1\n300 5 1\n400 3 0\n500 2 0\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#1_5","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2200\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_12","title":"\u63d0\u793a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%EF%BC%8C%E8%BD%AC%E7%A7%BB%E4%B8%8E%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/#_13","title":"\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a","text":"<p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1 \\(1 \\leq n \\leq 3.2 \\times 10^4\\)\uff0c\\(1 \\leq m \\leq 60\\)\uff0c\\(0 \\leq v_i \\leq 10^4\\)\uff0c\\(1 \\leq p_i \\leq 5\\)\uff0c\\(0 \\leq q_i \\leq m\\)\uff0c\u7b54\u6848\u4e0d\u8d85\u8fc7 \\(2 \\times 10^5\\)\u3002 <pre><code>#include&lt;iostream&gt;  \nusing namespace std;  \nint m,n,mw[33333],mv[33333],fw[33333][3],fv[33333][3],f[33333],v,p,q;  \n//mw\u4e3b\u4ef6\u91cd\u91cf\uff0cmv\u4e3b\u4ef6\u4ef7\u503c\uff0cfw\u4e3b\u4ef6\u5bf9\u5e94\u7684\u9644\u4ef6\u91cd\u91cf\uff0cfv\u4e3b\u526f\u4ef7\u503c\uff0cn\u603b\u91cd\u91cf\uff0cm\u603b\u4e2a\u6570   \nint main()  \n{  \n    cin&gt;&gt;n&gt;&gt;m;  \n    for(int i=1;i&lt;=m;i++){  \n    cin&gt;&gt;v&gt;&gt;p&gt;&gt;q;  \n    if(!q){//\u5982\u679c\u662f\u4e3b\u4ef6   \n        mw[i]=v;//\u4e3b\u4ef6\u91cd\u91cf   \n        mv[i]=v*p;//\u4e3b\u4ef6\u4ef7\u503c\u4e0e\u91cd\u91cf\u4e58\u79ef   \n    }  \n    else{//\u5982\u679c\u662f\u9644\u4ef6   \n        fw[q][0]++;//\u8bb0\u5f55\u4e3b\u4ef6\u7684\u9644\u4ef6\u4e2a\u6570\uff08\u53ea\u8bb0\u5f55\u5728fw\u5c31\u884c\uff0cfv\u90a3\u91cc\u6ca1\u7528   \n        fw[q][fw[q][0]]=v;//\u4e3b\u4ef6\u7684\u4e2a\u6570\u662f\u7528\u6765\u786e\u5b9a\u8be5\u9644\u4ef6\u5e94\u8be5\u586b\u5728\u7b2c\u4e00\u4e2a\u8fd8\u662f\u7b2c\u4e8c\u4e2a\u683c\u5b50\u91cc   \n        fv[q][fw[q][0]]=v*p;//\uff08\u662f\u7b2c\u4e00\u4e2a\u8fd8\u662f\u7b2c\u4e8c\u4e2a\u9644\u4ef6\uff09   \n    }  \n    }  \n    for(int i=1;i&lt;=m;i++)  \n    for(int j=n;j&gt;=mw[i];j--){//01\u80cc\u5305\u6a21\u677f   \n    //\u6bcf\u4e00\u4e2aif\u7684\u524d\u63d0\u662f\u80cc\u5305\u80fd\u4e0d\u80fd\u88c5\u4e0b\u8be5\u7269\u54c1   \n        //\u60c5\u51b51\uff1a\u53ea\u8981\u4e3b\u4ef6 \u548c\u5565\u90fd\u4e0d\u8981\u6bd4\u8f83   \n        f[j]=max(f[j],f[j-mw[i]]+mv[i]);  \n        //\u60c5\u51b52\uff1a\u4e3b\u4ef6\u548c\u9644\u4ef61 \u548c\u4e0a\u9762\u9009\u51fa\u7684\u8f83\u5927\u503c\u6bd4\u8f83   \n        if(j&gt;=mw[i]+fw[i][1])f[j]=max(f[j],f[j-mw[i]-fw[i][1]]+mv[i]+fv[i][1]);  \n        //\u60c5\u51b53\uff1a\u4e3b\u4ef6\u548c\u9644\u4ef62 \u548c\u4e0a\u9762\u9009\u51fa\u7684\u8f83\u5927\u503c\u6bd4\u8f83   \n        if(j&gt;=mw[i]+fw[i][2])f[j]=max(f[j],f[j-mw[i]-fw[i][2]]+mv[i]+fv[i][2]);  \n        //\u60c5\u51b54\uff1a\u90fd\u8981   \n        if(j&gt;=mw[i]+fw[i][1]+fw[i][2])  \n        f[j]=max(f[j],f[j-mw[i]-fw[i][1]-fw[i][2]]+mv[i]+fv[i][1]+fv[i][2]);  \n    }  \n    //\u8f93\u51fa\u5728\u4ef7\u503c\u4e3an\u65f6\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c   \n    cout&lt;&lt;f[n]&lt;&lt;endl;  \n    return 0;  \n}  \n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%8A%B6%E6%80%81/","title":"\u9762\u8bd5\u9898 17.16 \u6309\u6469\u5e08","text":"<p>![[Pasted image 20240412200119.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int massage(vector&lt;int&gt;&amp; nums) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=nums.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;int&gt; dp(n+2);\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=2;i&lt;=n+1;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i]=max(dp[i-2]+nums[i-2],dp[i-1]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 return dp[n+1];\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%8A%B6%E6%80%81/#lcr-090-2","title":"LCR 090 \u6253\u5bb6\u52ab\u820d 2","text":"<p>![[Pasted image 20240412200207.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int rob(vector&lt;int&gt;&amp; nums) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=nums.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(n==1) \u00a0 \u00a0return nums[0];\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;int&gt; dp(n+2);\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;int&gt; dpp(n+2);\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=2;i&lt;=n+1;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i]=max(dp[i-2]+nums[i-2],dp[i-1]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=3;i&lt;=n+1;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dpp[i]=max(dpp[i-2]+nums[i-2],dpp[i-1]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 return max(dp[n],dpp[n+1]);\n\n\u00a0 \u00a0 }\n\n};\n</code></pre> \u73af\u5f62\u7684\u76f8\u7b49\u4e8e 1~n-1 \u548c 2~n \u4e4b\u95f4\u6700\u5927\u503c</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%8A%B6%E6%80%81/#740","title":"740 \u5220\u9664\u5e76\u83b7\u5f97\u70b9\u6570","text":"<p>![[Pasted image 20240412210848.png]] </p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%8A%B6%E6%80%81/#_1","title":"\u80a1\u7968\u51b7\u51bb\u671f","text":"<p>https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/ ![[Pasted image 20240420134431.png]]</p> <p><pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int maxProfit(vector&lt;int&gt;&amp; prices) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=prices.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;vector&lt;int&gt;&gt;dp(n+1,vector&lt;int&gt;(3));\n\n\u00a0 \u00a0 \u00a0 \u00a0 dp[0][0]=-prices[0];//\u7b2c\u4e00\u5929\u4e70\u5165\n\n\u00a0 \u00a0 \u00a0 \u00a0 dp[0][1]=0,dp[0][2]=0;//\u7b2c\u4e00\u5929\u5904\u4e8e\u53ef\u4ea4\u6613\u6216\u8005\u51b7\u51bb\u671f\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=1;i&lt;n;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][0]=max(dp[i-1][0],dp[i-1][1]-prices[i]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][1]=max(dp[i-1][1],dp[i-1][2]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][2]=dp[i-1][0]+prices[i];\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return max(dp[n-1][0],max(dp[n-1][1],dp[n-1][2]));\n\n\u00a0 \u00a0 }\n\n};\n</code></pre> \u603b\u5171\u6807\u8bb0\u4e09\u4e2a\u72b6\u6001\uff0c\u5206\u522b\u662f 0 \u5bf9\u5e94\u7684\u4e70\u5165\u72b6\u6001\uff0c1 \u5bf9\u5e94\u7684\u53ef\u4ea4\u6613\u72b6\u6001\uff0c2 \u5bf9\u5e94\u7684\u51b7\u51bb\u671f \u4e70\u5165\u72b6\u6001\u53ef\u4ee5\u901a\u8fc7\u4e70\u5165\u72b6\u6001\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u53ef\u4ea4\u6613\u72b6\u6001\u4e70\u5165\u7269\u54c1\u5230\u8fbe \u53ef\u4ea4\u6613\u72b6\u6001\u901a\u8fc7\u4e0a\u4e00\u4e2a\u53ef\u4ea4\u6613\u72b6\u6001\u548c\u51b7\u51bb\u671f\u5230\u8fbe \u51b7\u51bb\u671f\u53ea\u80fd\u901a\u8fc7\u4e70\u5165\u72b6\u6001\u540e\u5230\u8fbe ![[Pasted image 20240420134651.png]]</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/","title":"01\u80cc\u5305\u95ee\u9898","text":"<p>\u6709 N\u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V\u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u7b2c i\u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f vi\uff0c\u4ef7\u503c\u662f wi\u3002</p> <p>\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0cN\uff0cV\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u6570\u91cf\u548c\u80cc\u5305\u5bb9\u79ef\u3002</p> <p>\u63a5\u4e0b\u6765\u6709 N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 vi,wi\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c i\u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u6570\u636e\u8303\u56f4 0&lt;N,V\u22641000</p> <p>0&lt;vi,wi\u22641000 \u8f93\u5165\u6837\u4f8b 4 5 1 2 2 4 3 4 4 5 \u8f93\u51fa\u6837\u4f8b\uff1a 8</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nconst int N=1010;\nint f[N][N];//\u8868\u793a\u5728\u524di\u4e2a\u7269\u54c1\uff0c\u4f53\u79ef\u4e0d\u8d85\u8fc7j\uff0c\u6700\u5927\u4ef7\u503c\nint w[N];//\u8868\u793a\u7b2ci\u4ef6\u7269\u54c1\u7684\u4ef7\u503c\nint v[N];//\u8868\u793a\u7b2ci\u4ef6\u7269\u54c1\u7684\u4f53\u79ef\nint n,ve;//\u8868\u793a\u7269\u54c1\u4ef6\u6570\u548c\u4f53\u79ef\n\nint main(){\n    cin&gt;&gt;n&gt;&gt;ve;\n    for(int i=1;i&lt;=n;i++){\n            cin&gt;&gt;v[i]&gt;&gt;w[i];\n    }\n\n    for(int i=1;i&lt;=n;i++){\n        for(int j=0;j&lt;=ve;j++){\n            f[i][j]=f[i-1][j];\n            if(j&gt;=v[i]){\n                f[i][j]=max(f[i][j],f[i-1][j-v[i]]+w[i]);\n            }\n        }\n    }\n    cout&lt;&lt;f[n][ve]&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#3","title":"3. \u5b8c\u5168\u80cc\u5305\u95ee\u9898","text":"<p>\u6709 N\u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V\u7684\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002</p> <p>\u7b2c i\u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f vi\uff0c\u4ef7\u503c\u662f wi\u3002</p> <p>\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0cN\uff0cV\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u79cd\u6570\u548c\u80cc\u5305\u5bb9\u79ef\u3002 \u63a5\u4e0b\u6765\u6709 N \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 vi,wi\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c i\u79cd\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u6570\u636e\u8303\u56f4 0&lt;N,V\u22641000</p> <p>0&lt;vi,wi\u22641000 \u8f93\u5165\u6837\u4f8b 4 5 1 2 2 4 3 4 4 5 \u8f93\u51fa\u6837\u4f8b\uff1a 10</p> <p>01 \u80cc\u5305\u6839\u636e\u662f\u5426\u9009\u62e9\u7b2c i \u4ef6\u7269\u54c1\uff0c\u4e5f\u5c31\u662f\u7b2c i \u4ef6\u7269\u54c1\u9009 0 \u4e2a\u8fd8\u662f 1 \u4e2a\uff0c\u628a g[i][j] \u5212\u5206\u6210\u4e86 A B \u4e24\u90e8\u5206\uff0c\u5206\u522b\u6c42\u51fa\u8fd9\u4e24\u4e2a\u90e8\u5206\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u4e24\u8005\u53d6\u6700\u5927\u503c\u5c31\u662f\u6574\u4f53 g[i][j] \u7684\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u6c42\u51fa\u4e86 f[i][j]\u3002</p> <p>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e5f\u662f\u6839\u636e\u7b2c i \u4ef6\u7269\u54c1\u7684\u9009\u62e9\u6570\u91cf\uff0c\u628a g[i][j] \u5212\u5206\u6210\u4e0d\u540c\u7684\u90e8\u5206\uff0c\u5206\u522b\u6c42\u51fa\u5404\u4e2a\u90e8\u5206\u7684\u6700\u5927\u503c\uff0c\u53d6\u5404\u4e2a\u90e8\u5206\u6700\u5927\u503c\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5c31\u662f\u6574\u4f53 g[i][j] \u7684\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u6c42\u51fa\u4e86 f[i][j]\u3002 </p> <p></p> <p>\u4f18\u5316\u524d <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010;\n\nint n, m;\nint f[N][N], v[N], w[N];\n\nint main(){\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i ++ )\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for(int i = 0; i &lt;= m; i++)//\u521d\u59cb\u5316\n    {\n        f[0][i] = 0;\n    }\n    for(int i = 1; i &lt;= n; i ++ )\n        for(int j = 0; j &lt;= m; j ++ )\n            for(int k = 0; k * v[i] &lt;= j; k ++ )\n                f[i][j] = max(f[i][j], f[i - 1][j - k * v[i]] + k * w[i]);//\u6c42\u51fa\u6bcf\u4e00\u4e2a f[i][j]\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre> <pre><code>f[i][j] = max(f[i][j],f[i-1][j-v[i]]+w[i]);//01\u80cc\u5305\n\nf[i][j] = max(f[i][j],f[i][j-v[i]]+w[i]);//\u5b8c\u5168\u80cc\u5305\u95ee\u9898\n\n//0 1 \u80cc\u5305\u4ee3\u7801\u4f18\u5316\u8fd9\u91cc\u6709\u8be6\u7ec6\u8bf4\u660e\n</code></pre></p> <p> \u4f18\u5316\u540e <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010;\n\nint n, m;\nint f[N][N], v[N], w[N];\n\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i ++ )\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for(int i = 1; i &lt;= n; i ++ )\n    {\n        for(int j = 0; j &lt;= m; j ++ )\n        {\n            if(v[i] &lt;= j)\n                f[i][j] =max(f[i - 1][j], f[i][j - v[i]] + w[i]);\n            else\n                f[i][j] = f[i - 1][j];\n        }\n    }\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#4-i","title":"4. \u591a\u91cd\u80cc\u5305\u95ee\u9898 I","text":"<p>\u6709 N\u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V\u7684\u80cc\u5305\u3002</p> <p>\u7b2c i\u79cd\u7269\u54c1\u6700\u591a\u6709 si\u4ef6\uff0c\u6bcf\u4ef6\u4f53\u79ef\u662f vi\uff0c\u4ef7\u503c\u662f wi\u3002</p> <p>\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u7269\u54c1\u4f53\u79ef\u603b\u548c\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u4ef7\u503c\u603b\u548c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0cN\uff0cV\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u79cd\u6570\u548c\u80cc\u5305\u5bb9\u79ef\u3002</p> <p>\u63a5\u4e0b\u6765\u6709 N \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 vi,wi,si\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c i \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u3001\u4ef7\u503c\u548c\u6570\u91cf\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u6570\u636e\u8303\u56f4 0&lt;N,V\u2264100</p> <p>0&lt;vi,wi,si\u2264100 \u8f93\u5165\u6837\u4f8b 4 5 1 2 3 2 4 1 3 4 3 4 5 2 \u8f93\u51fa\u6837\u4f8b\uff1a 10</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int N = 110;\nint f[N][N];\nint v[N],w[N],s[N];\n\nint main()\n{\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;s[i];\n    }\n\n    for(int i=1;i&lt;=n;i++){\n        for(int j=1;j&lt;=m;j++){\n            for(int k=0;k&lt;=s[i];k++){\n                if(j&gt;=k*v[i]){\n                    f[i][j]=max(f[i][j],f[i-1][j-k*v[i]]+k*w[i]);\n                }\n\n            }\n        }\n    }\n    cout&lt;&lt;f[n][m]&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#5-ii","title":"5. \u591a\u91cd\u80cc\u5305\u95ee\u9898 II","text":"<p>\u6709 N \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V \u7684\u80cc\u5305\u3002</p> <p>\u7b2c i \u79cd\u7269\u54c1\u6700\u591a\u6709 si \u4ef6\uff0c\u6bcf\u4ef6\u4f53\u79ef\u662f vi\uff0c\u4ef7\u503c\u662f wi\u3002</p> <p>\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u7269\u54c1\u4f53\u79ef\u603b\u548c\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u4ef7\u503c\u603b\u548c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0cN\uff0cV \uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u79cd\u6570\u548c\u80cc\u5305\u5bb9\u79ef\u3002</p> <p>\u63a5\u4e0b\u6765\u6709 N  \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 vi,wi,si \uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c i  \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u3001\u4ef7\u503c\u548c\u6570\u91cf\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u6570\u636e\u8303\u56f4 0&lt;N\u22641000</p> <p>0&lt;V\u22642000</p> <p>0&lt;vi,wi,si\u22642000 \u63d0\u793a\uff1a \u672c\u9898\u8003\u67e5\u591a\u91cd\u80cc\u5305\u7684\u4e8c\u8fdb\u5236\u4f18\u5316\u65b9\u6cd5\u3002</p> <p>\u8f93\u5165\u6837\u4f8b 4 5 1 2 3 2 4 1 3 4 3 4 5 2 \u8f93\u51fa\u6837\u4f8b\uff1a 10</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nconst int N = 12010, M = 2010;\n\nint n, m;\nint v[N], w[N]; //\u9010\u4e00\u679a\u4e3e\u6700\u5927\u662fN*logS\nint f[M]; // \u4f53\u79ef&lt;M\n\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    int cnt = 0; //\u5206\u7ec4\u7684\u7ec4\u522b\n    for(int i = 1;i &lt;= n;i ++)\n    {\n        int a,b,s;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;\n        int k = 1; // \u7ec4\u522b\u91cc\u9762\u7684\u4e2a\u6570\n        while(k&lt;=s)\n        {\n            cnt ++ ; //\u7ec4\u522b\u5148\u589e\u52a0\n            v[cnt] = a * k ; //\u6574\u4f53\u4f53\u79ef\n            w[cnt] = b * k; // \u6574\u4f53\u4ef7\u503c\n            s -= k; // s\u8981\u51cf\u5c0f\n            k *= 2; // \u7ec4\u522b\u91cc\u7684\u4e2a\u6570\u589e\u52a0\n        }\n        //\u5269\u4f59\u7684\u4e00\u7ec4\n        if(s&gt;0)\n        {\n            cnt ++ ;\n            v[cnt] = a*s; \n            w[cnt] = b*s;\n        }\n    }\n\n    n = cnt ; //\u679a\u4e3e\u6b21\u6570\u6b63\u5f0f\u7531\u4e2a\u6570\u53d8\u6210\u7ec4\u522b\u6570\n\n    //01\u80cc\u5305\u4e00\u7ef4\u4f18\u5316\n    for(int i = 1;i &lt;= n ;i ++)\n        for(int j = m ;j &gt;= v[i];j --)\n            f[j] = max(f[j],f[j-v[i]] + w[i]);\n\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/","title":"62 \u4e0d\u540c\u8def\u5f84","text":"<p>![[Pasted image 20240412150302.png]]</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int uniquePaths(int m, int n) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector &lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt; (n+1));\n\n\u00a0 \u00a0 \u00a0 \u00a0 dp[0][1]=1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=1;i&lt;=m;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(int j=1;j&lt;=n;j++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][j]=dp[i-1][j]+dp[i][j-1];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return dp[m][n];\n\n\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/#62-2","title":"62 \u4e0d\u540c\u8def\u5f84 2","text":"<p>![[Pasted image 20240412154059.png]]</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int uniquePathsWithObstacles(vector&lt;vector&lt;int&gt;&gt;&amp; obstacleGrid) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int m=obstacleGrid.size(),n=obstacleGrid[0].size();\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1));\n\n\u00a0 \u00a0 \u00a0 \u00a0 dp[0][1]=1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=1;i&lt;=m;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(int j=1;j&lt;=n;j++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(obstacleGrid[i-1][j-1]==0)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][j]=dp[i-1][j]+dp[i][j-1];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return dp[m][n];\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/#_1","title":"\u793c\u7269\u7684\u6700\u5927\u4ef7\u503c","text":"<p>![[Pasted image 20240412155736.png]] <pre><code>class Solution {\npublic:\n    int getMaxValue(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        int m=grid.size(),n=grid[0].size();\n        vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1));\n\n        for(int i=1;i&lt;=m;i++)\n            for(int j=1;j&lt;=n;j++)\n            dp[i][j]=max(dp[i-1][j],dp[i][j-1])+grid[i-1][j-1];\n\n        return dp[m][n];\n    }\n};\n</code></pre> \u8fd9\u6b21\u521d\u59cb\u5316\u4e0d\u9700\u8981\u591a\u6574\u4e00\u884c\u6570\uff0c\u56e0\u4e3a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6bcf\u6b21\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u672c\u8eab\u7684\u503c</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/#931","title":"931 \u4e0b\u964d\u8def\u5f84\u6700\u5c0f\u548c","text":"<p>![[Pasted image 20240412162052.png]]</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int minFallingPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 if (matrix.empty() || matrix[0].empty()) return 0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 int m=matrix.size(),n=matrix[0].size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+2,INT_MAX));\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int j=0;j&lt;n+2;j++) \u00a0dp[0][j]=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=1;i&lt;=m;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(int j=1;j&lt;=n;j++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][j]=min(min(dp[i-1][j-1],dp[i-1][j]),dp[i-1][j+1])+matrix[i-1][j-1];\n\n\u00a0 \u00a0 \u00a0 \u00a0 //return dp[m][n];\u8fd9\u91cc\u4e0d\u80fd\u60ef\u6027\u601d\u7ef4\uff0c\u8fd9\u6837\u4f1a\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u7684\u6700\u5c0f\u503c\n\n\u00a0 \u00a0 \u00a0 \u00a0 int ret=INT_MAX;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=1;i&lt;=n;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ret=min(ret,dp[n][i]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 return ret;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/#1289-2","title":"1289 \u4e0b\u964d\u8def\u5f84\u6700\u5c0f\u548c 2","text":"<p>![[Pasted image 20240412163909.png]] </p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/#lcr-099","title":"LCR 099 \u6700\u5c0f\u8def\u5f84\u548c","text":"<p>![[Pasted image 20240412165110.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int minPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int m=grid.size(),n=grid[0].size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1));\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;=n;i++) \u00a0 dp[0][i]=INT_MAX;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;=m;i++) \u00a0 dp[i][0]=INT_MAX;\n\n\u00a0 \u00a0 \u00a0 \u00a0 dp[0][1]=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=1;i&lt;=m;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(int j=1;j&lt;=n;j++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i-1][j-1];\n\n\u00a0 \u00a0 \u00a0 \u00a0 return dp[m][n];\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p> <p>\u521d\u59cb\u5316\u8bbe\u8ba1\u8fb9\u754c\u6761\u4ef6\u65f6\u5019\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u56e0\u4e3a\u662f\u6c42\u6700\u5c0f\u503c\uff0c\u8fb9\u754c\u503c\u4e0d\u80fd\u518d\u8bbe\u7f6e\u4e3a 0 \u4e86</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/#174","title":"174 \u5730\u4e0b\u57ce\u6e38\u620f","text":"<p>![[Pasted image 20240412170015.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int calculateMinimumHP(vector&lt;vector&lt;int&gt;&gt;&amp; dungeon) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n = dungeon.size(), m = dungeon[0].size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1, INT_MAX));\n\n\u00a0 \u00a0 \u00a0 \u00a0 dp[n][m - 1] = dp[n - 1][m] = 1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for (int i = n - 1; i &gt;= 0; --i) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (int j = m - 1; j &gt;= 0; --j) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int minn = min(dp[i + 1][j], dp[i][j + 1]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dp[i][j] = max(minn - dungeon[i][j], 1);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return dp[0][0];\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/leetcode%E7%9A%84%E5%8A%A8%E6%80%81/%E4%B8%8D%E5%90%8C%E7%9A%84%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u4e0d\u540c\u7684\u641c\u7d22\u4e8c\u53c9\u6811","text":"<p>\u786e\u5b9adp\u6570\u7ec4\uff08dp table\uff09\u4ee5\u53ca\u4e0b\u6807\u7684\u542b\u4e49 dp[i] \uff1a 1\u5230i\u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2a\u6570\u4e3adp[i]\u3002</p> <p>\u4e5f\u53ef\u4ee5\u7406\u89e3\u662fi\u4e2a\u4e0d\u540c\u5143\u7d20\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2a\u6570\u4e3adp[i] \uff0c\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u4ee5\u4e0b\u5206\u6790\u5982\u679c\u60f3\u4e0d\u6e05\u695a\uff0c\u5c31\u6765\u56de\u60f3\u4e00\u4e0bdp[i]\u7684\u5b9a\u4e49</p> <p>\u786e\u5b9a\u9012\u63a8\u516c\u5f0f \u5728\u4e0a\u9762\u7684\u5206\u6790\u4e2d\uff0c\u5176\u5b9e\u5df2\u7ecf\u770b\u51fa\u5176\u9012\u63a8\u5173\u7cfb\uff0c dp[i] += dp[\u4ee5j\u4e3a\u5934\u7ed3\u70b9\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf] * dp[\u4ee5j\u4e3a\u5934\u7ed3\u70b9\u53f3\u5b50\u6811\u8282\u70b9\u6570\u91cf]</p> <p>\u6240\u4ee5\u9012\u63a8\u516c\u5f0f\uff1adp[i] += dp[j - 1] * dp[i - j]; \uff0cj-1 \u4e3aj\u4e3a\u5934\u7ed3\u70b9\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf\uff0ci-j \u4e3a\u4ee5j\u4e3a\u5934\u7ed3\u70b9\u53f3\u5b50\u6811\u8282\u70b9\u6570\u91cf</p> <p>\u521d\u59cb\u5316\uff0c\u53ea\u9700\u8981\u521d\u59cb\u5316dp[0]\u5c31\u53ef\u4ee5\u4e86\uff0c\u63a8\u5bfc\u7684\u57fa\u7840\uff0c\u90fd\u662fdp[0]\u3002</p> <pre><code>class Solution {\npublic:\n    int numTrees(int n) {\n        vector&lt;int&gt;dp(n+1);\n        dp[0]=1;\n\n        for(int i=1;i&lt;=n;i++){\n            for(int j=1;j&lt;=i;j++){\n                dp[i]+=dp[j-1]*dp[i-j\n                ];\n            }\n        }\n\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/leetcode%E7%9A%84%E5%8A%A8%E6%80%81/%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/","title":"\u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<pre><code>class Solution {\npublic:\n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n\n        int sum = 0;\n        for (int i = 0; i &lt; n; i++) {\n            sum += nums[i];\n        }\n\n        if (sum % 2 == 1)\n            return false;\n        int target = sum / 2;\n\n       vector&lt;int&gt; dp(10001, 0);\n        for(int i=0;i&lt;n;i++){\n            for(int j=target;j&gt;=nums[i];j--){\n                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);\n            }\n        }\n        if(target==dp[target]){\n            return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/leetcode%E7%9A%84%E5%8A%A8%E6%80%81/%E6%95%B4%E6%95%B0%E5%88%92%E5%88%86/","title":"\u6574\u6570\u5212\u5206","text":"<p>\u5b9a\u4e49\u52a8\u6001\u6570\u7ec4dp[i]\uff0c\u8868\u793a\u6570\u5b57\u5927\u5c0f\u4e3ai\uff0c\u5dee\u5206\u540e\u7684\u7b54\u6848\u6700\u5927\u503c \u72b6\u6001\u7684\u5212\u5206\uff0c\u4ece1\u5230j(j&lt;\\i)  \u60f3\u8981\u5230\u8fbei\u6709\u4e24\u79cd\u9014\u5f84\uff1a \u4e2a\u662fj * (i - j) \u76f4\u63a5\u76f8\u4e58\u3002 \u4e00\u4e2a\u662fj * dp[i - j]\uff0c\u76f8\u5f53\u4e8e\u662f\u62c6\u5206(i - j)\uff0c \u4e24\u8005\u53d6\u6700\u5927\u503c \u521d\u59cb\u5316\uff1a\u9898\u76ee\u8981\u6c42\u53d6\u503c\u6700\u5c0f\u662f2\uff0c\u6240\u4ee5\u4ece2\u5f00\u59cb\u521d\u59cb\u5316\u5373\u53ef\uff0c 2\u7684\u62c6\u5206\u6700\u5927\u503c\u5c31\u662f1</p> <pre><code>class Solution {\npublic:\n    int integerBreak(int n) {\n        vector&lt;int&gt;dp(n+1);\n        dp[2]=1;\n        for(int i=3;i&lt;=n;i++){\n            for(int j=1;j&lt;=i-1;j++){\n                dp[i]=max(dp[i],max(((i-j)*j),dp[i-j]*j));\n            }\n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/leetcode%E7%9A%84%E5%8A%A8%E6%80%81/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/","title":"\u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf","text":"<pre><code>class Solution {\npublic:\n    int lastStoneWeightII(vector&lt;int&gt;&amp; stones) {\n        vector&lt;int&gt; dp(15001, 0);\n        int sum = 0;\n        for (int i = 0; i &lt; stones.size(); i++) sum += stones[i];\n        int target = sum / 2;\n        for (int i = 0; i &lt; stones.size(); i++) { // \u904d\u5386\u7269\u54c1\n            for (int j = target; j &gt;= stones[i]; j--) { // \u904d\u5386\u80cc\u5305\n                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\n            }\n        }\n        return sum - dp[target] - dp[target];\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/","title":"\u5c0f\u7389\u4e70\u6587\u5177","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u73ed\u4e3b\u4efb\u7ed9\u5c0f\u7389\u4e00\u4e2a\u4efb\u52a1\uff0c\u5230\u6587\u5177\u5e97\u91cc\u4e70\u5c3d\u91cf\u591a\u7684\u7b7e\u5b57\u7b14\u3002\u5df2\u77e5\u4e00\u53ea\u7b7e\u5b57\u7b14\u7684\u4ef7\u683c\u662f \\(1\\) \u5143 \\(9\\) \u89d2\uff0c\u800c\u73ed\u4e3b\u4efb\u7ed9\u5c0f\u7389\u7684\u94b1\u662f \\(a\\) \u5143 \\(b\\) \u89d2\uff0c\u5c0f\u7389\u60f3\u77e5\u9053\uff0c\u5979\u6700\u591a\u80fd\u4e70\u591a\u5c11\u53ea\u7b7e\u5b57\u7b14\u5462\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a \\(a\\) \u548c \\(b\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0f\u7389\u6700\u591a\u80fd\u4e70\u591a\u5c11\u53ea\u7b7e\u5b57\u7b14\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>10 3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>5\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_5","title":"\u63d0\u793a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_6","title":"\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a","text":"<p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1 \\(0 \\leq a \\leq 10^4\\)\uff0c\\(0 \\leq b \\leq 9\\)\u3002 <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nint main()\n{\n    int a,b;\n    cin&gt;&gt;a&gt;&gt;b;\n    int res=a*10+b;\n    cout&lt;&lt;res/19&lt;&lt;endl;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#noip-2016","title":"[NOIP 2016 \u666e\u53ca\u7ec4] \u4e70\u94c5\u7b14","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_7","title":"\u9898\u76ee\u80cc\u666f","text":"<p>NOIP 2016 \u666e\u53ca\u7ec4 T 1</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_8","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>P \u8001\u5e08\u9700\u8981\u53bb\u5546\u5e97\u4e70 \\(n\\) \u652f\u94c5\u7b14\u4f5c\u4e3a\u5c0f\u670b\u53cb\u4eec\u53c2\u52a0 NOIP \u7684\u793c\u7269\u3002\u5979\u53d1\u73b0\u5546\u5e97\u4e00\u5171\u6709 \\(3\\) \u79cd\u5305\u88c5\u7684\u94c5\u7b14\uff0c\u4e0d\u540c\u5305\u88c5\u5185\u7684\u94c5\u7b14\u6570\u91cf\u6709\u53ef\u80fd\u4e0d\u540c\uff0c\u4ef7\u683c\u4e5f\u6709\u53ef\u80fd\u4e0d\u540c\u3002\u4e3a\u4e86\u516c\u5e73\u8d77\u89c1\uff0cP \u8001\u5e08\u51b3\u5b9a\u53ea\u4e70\u540c\u4e00\u79cd\u5305\u88c5\u7684\u94c5\u7b14\u3002</p> <p>\u5546\u5e97\u4e0d\u5141\u8bb8\u5c06\u94c5\u7b14\u7684\u5305\u88c5\u62c6\u5f00\uff0c\u56e0\u6b64 P \u8001\u5e08\u53ef\u80fd\u9700\u8981\u8d2d\u4e70\u8d85\u8fc7 \\(n\\) \u652f\u94c5\u7b14\u624d\u591f\u7ed9\u5c0f\u670b\u53cb\u4eec\u53d1\u793c\u7269\u3002</p> <p>\u73b0\u5728 P \u8001\u5e08\u60f3\u77e5\u9053\uff0c\u5728\u5546\u5e97\u6bcf\u79cd\u5305\u88c5\u7684\u6570\u91cf\u90fd\u8db3\u591f\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u4e70\u591f\u81f3\u5c11 \\(n\\) \u652f\u94c5\u7b14\u6700\u5c11\u9700\u8981\u82b1\u8d39\u591a\u5c11\u94b1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_9","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u9700\u8981\u7684\u94c5\u7b14\u6570\u91cf\u3002</p> <p>\u63a5\u4e0b\u6765\u4e09\u884c\uff0c\u6bcf\u884c\u7528 \\(2\\) \u4e2a\u6b63\u6574\u6570\u63cf\u8ff0\u4e00\u79cd\u5305\u88c5\u7684\u94c5\u7b14\uff1a\u5176\u4e2d\u7b2c \\(1\\) \u4e2a\u6574\u6570\u8868\u793a\u8fd9\u79cd\u5305\u88c5\u5185\u94c5\u7b14\u7684\u6570\u91cf\uff0c\u7b2c \\(2\\) \u4e2a\u6574\u6570\u8868\u793a\u8fd9\u79cd\u5305\u88c5\u7684\u4ef7\u683c\u3002</p> <p>\u4fdd\u8bc1\u6240\u6709\u7684 \\(7\\) \u4e2a\u6570\u90fd\u662f\u4e0d\u8d85\u8fc7 \\(10000\\) \u7684\u6b63\u6574\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_10","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\\(1\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a P \u8001\u5e08\u6700\u5c11\u9700\u8981\u82b1\u8d39\u7684\u94b1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_3","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_4","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>57\n2 2\n50 30\n30 27\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_5","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>54\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>9998\n128 233\n128 2333\n128 666\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>18407\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#3","title":"\u6837\u4f8b #3","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#3_1","title":"\u6837\u4f8b\u8f93\u5165 #3","text":"<pre><code>9999\n101 1111\n1 9999\n1111 9999\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#3_2","title":"\u6837\u4f8b\u8f93\u51fa #3","text":"<pre><code>89991\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_11","title":"\u63d0\u793a","text":"<p>\u94c5\u7b14\u7684\u4e09\u79cd\u5305\u88c5\u5206\u522b\u662f\uff1a</p> <ul> <li>\\(2\\) \u652f\u88c5\uff0c\u4ef7\u683c\u4e3a \\(2\\);</li> <li>\\(50\\) \u652f\u88c5\uff0c\u4ef7\u683c\u4e3a \\(30\\);</li> <li>\\(30\\) \u652f\u88c5\uff0c\u4ef7\u683c\u4e3a \\(27\\)\u3002</li> </ul> <p>P \u8001\u5e08\u9700\u8981\u8d2d\u4e70\u81f3\u5c11 \\(57\\) \u652f\u94c5\u7b14\u3002</p> <p>\u5982\u679c\u5979\u9009\u62e9\u8d2d\u4e70\u7b2c\u4e00\u79cd\u5305\u88c5\uff0c\u90a3\u4e48\u5979\u9700\u8981\u8d2d\u4e70 \\(29\\) \u4efd\uff0c\u5171\u8ba1 \\(2 \\times 29 = 58\\) \u652f\uff0c\u9700\u8981\u82b1\u8d39\u7684\u94b1\u4e3a \\(2 \\times 29 = 58\\)\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0cP \u8001\u5e08\u4f1a\u9009\u62e9\u8d2d\u4e70\u7b2c\u4e09\u79cd\u5305\u88c5\uff0c\u8fd9\u6837\u9700\u8981\u4e70 \\(2\\) \u4efd\u3002\u867d\u7136\u6700\u540e\u4e70\u5230\u7684\u94c5\u7b14\u6570\u91cf\u66f4\u591a\u4e86\uff0c\u4e3a \\(30 \\times 2 = 60\\) \u652f\uff0c\u4f46\u82b1\u8d39\u5374\u51cf\u5c11\u4e3a \\(27 \\times 2 = 54\\)\uff0c\u6bd4\u7b2c\u4e00\u79cd\u5c11\u3002</p> <p>\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u5305\u88c5\uff0c\u867d\u7136\u6bcf\u652f\u94c5\u7b14\u7684\u4ef7\u683c\u662f\u6700\u4f4e\u7684\uff0c\u4f46\u8981\u591f\u53d1\u5fc5\u987b\u4e70 \\(2\\) \u4efd\uff0c\u5b9e\u9645\u7684\u82b1\u8d39\u8fbe\u5230\u4e86 \\(30  \\times 2 = 60\\)\uff0c\u56e0\u6b64 P \u8001\u5e08\u4e5f\u4e0d\u4f1a\u9009\u62e9\u3002</p> <p>\u6240\u4ee5\u6700\u540e\u8f93\u51fa\u7684\u7b54\u6848\u662f \\(54\\)\u3002</p> <p>\u6570\u636e\u8303\u56f4</p> <p>\u4fdd\u8bc1\u6240\u6709\u7684 \\(7\\) \u4e2a\u6570\u90fd\u662f\u4e0d\u8d85\u8fc7 \\(10000\\) \u7684\u6b63\u6574\u6570\u3002</p> <p>\u5b50\u4efb\u52a1</p> <p>\u5b50\u4efb\u52a1\u4f1a\u7ed9\u51fa\u90e8\u5206\u6d4b\u8bd5\u6570\u636e\u7684\u7279\u70b9\u3002\u5982\u679c\u4f60\u5728\u89e3\u51b3\u9898\u76ee\u4e2d\u9047\u5230\u4e86\u56f0\u96be\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u53ea\u89e3\u51b3\u4e00\u90e8\u5206\u6d4b\u8bd5\u6570\u636e\u3002</p> <p>\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u7684\u6570\u636e\u89c4\u6a21\u53ca\u7279\u70b9\u5982\u4e0b\u8868\uff1a</p> <p></p> <p>\u4e0a\u8868\u4e2d\u201c\u6574\u500d\u6570\u201d\u7684\u610f\u4e49\u4e3a\uff1a\u82e5\u4e3a \\(K\\)\uff0c\u8868\u793a\u5bf9\u5e94\u6570\u636e\u6240\u9700\u8981\u7684\u94c5\u7b14\u6570\u91cf \\(n\\) \u2014\u5b9a\u662f\u6bcf\u79cd\u5305\u88c5\u94c5\u7b14\u6570\u91cf\u7684\u6574\u500d\u6570\uff08\u8fd9\u610f\u5473\u7740\u4e00\u5b9a\u53ef\u4ee5\u4e0d\u7528\u591a\u4e70\u94c5\u7b14\uff09\u3002</p> <p>\u4e8e 2022 \u5e74 12 \u6708 23 \u65e5\u65b0\u52a0 Hack \u6570\u636e\u4e09\u7ec4\u3002 <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\ntypedef pair&lt;int,int&gt; PII;\nPII a[3];\nint res[3];\nint main()\n{\n    int n;\n    cin&gt;&gt;n;\n    int ans=0;\n\n    for(int i=0;i&lt;3;i++)\n    {\n        cin&gt;&gt;a[i].first&gt;&gt;a[i].second;\n    }\n    for(int i=0;i&lt;3;i++)\n    {\n        if(n%a[i].first==0)\n        {\n            int t=n/a[i].first;\n            res[i]+=t*a[i].second;\n        }else{\n             int t=n/a[i].first;\n            res[i]+=t*a[i].second;\n            res[i]+=a[i].second;\n        }\n    }\n    ans=min(res[0],min(res[1],res[2]));\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#noip-2004","title":"[NOIP 2004 \u63d0\u9ad8\u7ec4] \u6d25\u6d25\u7684\u50a8\u84c4\u8ba1\u5212","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_12","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6d25\u6d25\u7684\u96f6\u82b1\u94b1\u4e00\u76f4\u90fd\u662f\u81ea\u5df1\u7ba1\u7406\u3002\u6bcf\u4e2a\u6708\u7684\u6708\u521d\u5988\u5988\u7ed9\u6d25\u6d25 \\(300\\) \u5143\u94b1\uff0c\u6d25\u6d25\u4f1a\u9884\u7b97\u8fd9\u4e2a\u6708\u7684\u82b1\u9500\uff0c\u5e76\u4e14\u603b\u80fd\u505a\u5230\u5b9e\u9645\u82b1\u9500\u548c\u9884\u7b97\u7684\u76f8\u540c\u3002</p> <p>\u4e3a\u4e86\u8ba9\u6d25\u6d25\u5b66\u4e60\u5982\u4f55\u50a8\u84c4\uff0c\u5988\u5988\u63d0\u51fa\uff0c\u6d25\u6d25\u53ef\u4ee5\u968f\u65f6\u628a\u6574\u767e\u7684\u94b1\u5b58\u5728\u5979\u90a3\u91cc\uff0c\u5230\u4e86\u5e74\u672b\u5979\u4f1a\u52a0\u4e0a \\(20\\%\\) \u8fd8\u7ed9\u6d25\u6d25\u3002\u56e0\u6b64\u6d25\u6d25\u5236\u5b9a\u4e86\u4e00\u4e2a\u50a8\u84c4\u8ba1\u5212\uff1a\u6bcf\u4e2a\u6708\u7684\u6708\u521d\uff0c\u5728\u5f97\u5230\u5988\u5988\u7ed9\u7684\u96f6\u82b1\u94b1\u540e\uff0c\u5982\u679c\u5979\u9884\u8ba1\u5230\u8fd9\u4e2a\u6708\u7684\u6708\u672b\u624b\u4e2d\u8fd8\u4f1a\u6709\u591a\u4e8e \\(100\\) \u5143\u6216\u6070\u597d \\(100\\) \u5143\uff0c\u5979\u5c31\u4f1a\u628a\u6574\u767e\u7684\u94b1\u5b58\u5728\u5988\u5988\u90a3\u91cc\uff0c\u5269\u4f59\u7684\u94b1\u7559\u5728\u81ea\u5df1\u624b\u4e2d\u3002</p> <p>\u4f8b\u5982 \\(11\\) \u6708\u521d\u6d25\u6d25\u624b\u4e2d\u8fd8\u6709 \\(83\\) \u5143\uff0c\u5988\u5988\u7ed9\u4e86\u6d25\u6d25 \\(300\\) \u5143\u3002\u6d25\u6d25\u9884\u8ba1 \\(11\\) \u6708\u7684\u82b1\u9500\u662f \\(180\\) \u5143\uff0c\u90a3\u4e48\u5979\u5c31\u4f1a\u5728\u5988\u5988\u90a3\u91cc\u5b58 \\(200\\) \u5143\uff0c\u81ea\u5df1\u7559\u4e0b \\(183\\) \u5143\u3002\u5230\u4e86 \\(11\\) \u6708\u6708\u672b\uff0c\u6d25\u6d25\u624b\u4e2d\u4f1a\u5269\u4e0b \\(3\\) \u5143\u94b1\u3002</p> <p>\u6d25\u6d25\u53d1\u73b0\u8fd9\u4e2a\u50a8\u84c4\u8ba1\u5212\u7684\u4e3b\u8981\u98ce\u9669\u662f\uff0c\u5b58\u5728\u5988\u5988\u90a3\u91cc\u7684\u94b1\u5728\u5e74\u672b\u4e4b\u524d\u4e0d\u80fd\u53d6\u51fa\u3002\u6709\u53ef\u80fd\u5728\u67d0\u4e2a\u6708\u7684\u6708\u521d\uff0c\u6d25\u6d25\u624b\u4e2d\u7684\u94b1\u52a0\u4e0a\u8fd9\u4e2a\u6708\u5988\u5988\u7ed9\u7684\u94b1\uff0c\u4e0d\u591f\u8fd9\u4e2a\u6708\u7684\u539f\u5b9a\u9884\u7b97\u3002\u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u6d25\u6d25\u5c06\u4e0d\u5f97\u4e0d\u5728\u8fd9\u4e2a\u6708\u7701\u5403\u4fed\u7528\uff0c\u538b\u7f29\u9884\u7b97\u3002</p> <p>\u73b0\u5728\u8bf7\u4f60\u6839\u636e \\(2004\\) \u5e74 \\(1\\) \u6708\u5230 \\(12\\) \u6708\u6bcf\u4e2a\u6708\u6d25\u6d25\u7684\u9884\u7b97\uff0c\u5224\u65ad\u4f1a\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\u5982\u679c\u4e0d\u4f1a\uff0c\u8ba1\u7b97\u5230 \\(2004\\) \u5e74\u5e74\u672b\uff0c\u5988\u5988\u5c06\u6d25\u6d25\u5e73\u5e38\u5b58\u7684\u94b1\u52a0\u4e0a \\(20\\%\\) \u8fd8\u7ed9\u6d25\u6d25\u4e4b\u540e\uff0c\u6d25\u6d25\u624b\u4e2d\u4f1a\u6709\u591a\u5c11\u94b1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_13","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\\(12\\) \u884c\u6570\u636e\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5c0f\u4e8e \\(350\\) \u7684\u975e\u8d1f\u6574\u6570\uff0c\u5206\u522b\u8868\u793a \\(1\\) \u6708\u5230 \\(12\\) \u6708\u6d25\u6d25\u7684\u9884\u7b97\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_14","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6574\u6570\u3002\u5982\u679c\u50a8\u84c4\u8ba1\u5212\u5b9e\u65bd\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u67d0\u4e2a\u6708\u94b1\u4e0d\u591f\u7528\u7684\u60c5\u51b5\uff0c\u8f93\u51fa \\(-X\\)\uff0c\\(X\\) \u8868\u793a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u7b2c\u4e00\u4e2a\u6708\uff1b\u5426\u5219\u8f93\u51fa\u5230 \\(2004\\) \u5e74\u5e74\u672b\u6d25\u6d25\u624b\u4e2d\u4f1a\u6709\u591a\u5c11\u94b1\u3002</p> <p>\u6ce8\u610f\uff0c\u6d1b\u8c37\u4e0d\u9700\u8981\u8fdb\u884c\u6587\u4ef6\u8f93\u5165\u8f93\u51fa\uff0c\u800c\u662f\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_6","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_7","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>290\n230\n280\n200\n300\n170\n340\n50 \n90 \n80 \n200\n60\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_8","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>-7\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#2_3","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#2_4","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>290 \n230 \n280 \n200 \n300 \n170 \n330 \n50 \n90 \n80 \n200 \n60\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#2_5","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>1580\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint month[13];\n\nint main()\n{\n    int res=0;\n    int tmp=0;\n    int m=0;\n    for(int i=1;i&lt;=12;i++)\n    {\n        cin&gt;&gt;month[i];\n    }\n    for(int i=1;i&lt;=12;i++)\n    {\n        res+=300;\n        if((res-month[i])&gt;=100)\n        {\n            int t=(res-month[i])/100;\n            tmp+=t*100;\n            res=res-(t*100+month[i]);\n        }else if((res-month[i])&gt;=0&amp;&amp;(res-month[i])&lt;100)\n        {\n            res-=month[i];\n        }else if((res-month[i])&lt;0)\n        {\n            m=i;\n            break;\n        }\n    }\n    if(m==0)\n    {\n        cout&lt;&lt;res+tmp*1.2&lt;&lt;endl;\n    }else{\n        cout&lt;&lt;-m&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#noip-2004_1","title":"[NOIP 2004 \u666e\u53ca\u7ec4] \u4e0d\u9ad8\u5174\u7684\u6d25\u6d25","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_15","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6d25\u6d25\u4e0a\u521d\u4e2d\u4e86\u3002\u5988\u5988\u8ba4\u4e3a\u6d25\u6d25\u5e94\u8be5\u66f4\u52a0\u7528\u529f\u5b66\u4e60\uff0c\u6240\u4ee5\u6d25\u6d25\u9664\u4e86\u4e0a\u5b66\u4e4b\u5916\uff0c\u8fd8\u8981\u53c2\u52a0\u5988\u5988\u4e3a\u5979\u62a5\u540d\u7684\u5404\u79d1\u590d\u4e60\u73ed\u3002\u53e6\u5916\u6bcf\u5468\u5988\u5988\u8fd8\u4f1a\u9001\u5979\u53bb\u5b66\u4e60\u6717\u8bf5\u3001\u821e\u8e48\u548c\u94a2\u7434\u3002\u4f46\u662f\u6d25\u6d25\u5982\u679c\u4e00\u5929\u4e0a\u8bfe\u8d85\u8fc7\u516b\u4e2a\u5c0f\u65f6\u5c31\u4f1a\u4e0d\u9ad8\u5174\uff0c\u800c\u4e14\u4e0a\u5f97\u8d8a\u4e45\u5c31\u4f1a\u8d8a\u4e0d\u9ad8\u5174\u3002\u5047\u8bbe\u6d25\u6d25\u4e0d\u4f1a\u56e0\u4e3a\u5176\u5b83\u4e8b\u4e0d\u9ad8\u5174\uff0c\u5e76\u4e14\u5979\u7684\u4e0d\u9ad8\u5174\u4e0d\u4f1a\u6301\u7eed\u5230\u7b2c\u4e8c\u5929\u3002\u8bf7\u4f60\u5e2e\u5fd9\u68c0\u67e5\u4e00\u4e0b\u6d25\u6d25\u4e0b\u5468\u7684\u65e5\u7a0b\u5b89\u6392\uff0c\u770b\u770b\u4e0b\u5468\u5979\u4f1a\u4e0d\u4f1a\u4e0d\u9ad8\u5174\uff1b\u5982\u679c\u4f1a\u7684\u8bdd\uff0c\u54ea\u5929\u6700\u4e0d\u9ad8\u5174\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_16","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u5305\u62ec \\(7\\) \u884c\u6570\u636e\uff0c\u5206\u522b\u8868\u793a\u5468\u4e00\u5230\u5468\u65e5\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u5c0f\u4e8e \\(10\\) \u7684\u975e\u8d1f\u6574\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u6d25\u6d25\u5728\u5b66\u6821\u4e0a\u8bfe\u7684\u65f6\u95f4\u548c\u5988\u5988\u5b89\u6392\u5979\u4e0a\u8bfe\u7684\u65f6\u95f4\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_17","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6570\u5b57\u3002\u5982\u679c\u4e0d\u4f1a\u4e0d\u9ad8\u5174\u5219\u8f93\u51fa \\(0\\)\uff0c\u5982\u679c\u4f1a\u5219\u8f93\u51fa\u6700\u4e0d\u9ad8\u5174\u7684\u662f\u5468\u51e0\uff08\u7528 \\(1, 2, 3, 4, 5, 6, 7\\) \u5206\u522b\u8868\u793a\u5468\u4e00\uff0c\u5468\u4e8c\uff0c\u5468\u4e09\uff0c\u5468\u56db\uff0c\u5468\u4e94\uff0c\u5468\u516d\uff0c\u5468\u65e5\uff09\u3002\u5982\u679c\u6709\u4e24\u5929\u6216\u4e24\u5929\u4ee5\u4e0a\u4e0d\u9ad8\u5174\u7684\u7a0b\u5ea6\u76f8\u5f53\uff0c\u5219\u8f93\u51fa\u65f6\u95f4\u6700\u9760\u524d\u7684\u4e00\u5929\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_9","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_10","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>5 3\n6 2\n7 2\n5 3\n5 4\n0 4\n0 6\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_11","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_18","title":"\u63d0\u793a","text":"<p>NOIP 2004 \u666e\u53ca\u7ec4\u7b2c 1 \u9898</p> <ul> <li>2021-10-27\uff1a\u589e\u52a0\u4e00\u7ec4 hack \u6570\u636e</li> <li>2022-06-05\uff1a\u53c8\u589e\u52a0\u4e00\u7ec4 hack \u6570\u636e</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint a[8],b[8];\n\nint main()\n{\n    int res=0;\n    int ans=0;\n    for(int i=1;i&lt;=7;i++)\n    {\n        cin&gt;&gt;a[i]&gt;&gt;b[i];\n    }\n\n    for(int i=1;i&lt;=7;i++)\n    {\n        if((a[i]+b[i]&gt;res)&amp;&amp;(a[i]+b[i]&gt;8))\n        {\n            res=a[i]+b[i];\n            ans=i;\n        }\n    }\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#noip-2002","title":"[NOIP 2002 \u666e\u53ca\u7ec4] \u7ea7\u6570\u6c42\u548c","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_19","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5df2\u77e5\uff1a\\(S_n= 1+\\dfrac{1}{2}+\\dfrac{1}{3}+\u2026+\\dfrac{1}{n}\\)\u3002\u663e\u7136\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6574\u6570 \\(k\\)\uff0c\u5f53 \\(n\\) \u8db3\u591f\u5927\u7684\u65f6\u5019\uff0c\\(S_n&gt;k\\)\u3002</p> <p>\u73b0\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570 \\(k\\)\uff0c\u8981\u6c42\u8ba1\u7b97\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684 \\(n\\)\uff0c\u4f7f\u5f97 \\(S_n&gt;k\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_20","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6b63\u6574\u6570 \\(k\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_21","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_12","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_13","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#1_14","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BB%8E0%E5%BC%80%E5%A7%8B/#_22","title":"\u63d0\u793a","text":"<p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le k \\le 15\\)\u3002</p> <p>\u3010\u9898\u76ee\u6765\u6e90\u3011</p> <p>NOIP 2002 \u666e\u53ca\u7ec4\u7b2c\u4e00\u9898</p> <pre><code>#include&lt;cstdio&gt;\nint main() {\n    int k,n=0;\n    scanf(\"%d\",&amp;k);\n    for(double Sn=0;Sn&lt;=k;++n,Sn+=1.0/n);\n    printf(\"%d\",n);\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/","title":"\u57fa\u7840\u6982\u5ff5","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","title":"\u57fa\u7840\u4f4d\u8fd0\u7b97","text":"<p>~\u6309\u4f4d\u7f6e\u53d6\u53cd \u6309\u4f4d&amp; \u67090\u5c31\u662f0 \u6309\u4f4d| \u67091\u5c31\u662f1 \u6309\u4f4d^ \u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1 \u65e0\u8fdb\u4f4d\u76f8\u52a0</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#nx01","title":"\u7ed9\u4e00\u4e2a\u6570n\uff0c\u786e\u5b9a\u5b83\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7684\u7b2cx\u4f4d\u662f0\u8fd8\u662f1","text":"<p>\u5728\u7b2cx\u4f4d\u7f6e\u4e0a&amp;1\uff0cn&gt;&gt;x&amp;1 \u7ed3\u679c\u662f1\u5c31\u662f1\uff0c\u7ed3\u679c\u662f0\u5c31\u662f0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#nx1","title":"\u5c06\u4e00\u4e2an\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7b2cx\u4f4d\u4fee\u6539\u62101","text":"<p>n|=(1&lt;&lt;x)\uff0c1\u5de6\u79fbx\u4f4d\u540e\u4e0en\u6216</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#nx0","title":"\u5c06\u4e00\u4e2a\u6570n\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u7b2cx\u4f4d\u4fee\u6539\u62100","text":"<p>n&amp;=(~(1&lt;&lt;x))</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#1","title":"\u63d0\u53d6\u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u53f3\u4fa7\u76841","text":"<p>lowbit n&amp;-n -\u662f\u6309\u4f4d\u53d6\u53cd\u518d\u52a01 </p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#n1","title":"\u5e72\u6389\u4e00\u4e2a\u6570n\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u53f3\u4fa7\u76841","text":"<p>n&amp;(n-1) n-1\u672c\u8d28\u662f\u76f8\u5f53\u4e8e\u4ee5\u6700\u53f3\u4fa71\u4e3a\u5206\u754c\u7ebf\uff0c\u53f3\u4fa7\u6309\u4f4d\u53d6\u53cd\u4e86\uff0c\u5de6\u8fb9\u4e0d\u53d8</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_3","title":"\u5f02\u6216\u8fd0\u7b97\u7684\u8fd0\u7b97\u5f8b","text":"<p>a^0=a; a^a=0;</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_4","title":"\u4f8b\u9898\uff08\u57fa\u7840\u5e94\u7528\uff09","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#119","title":"119","text":"<pre><code>class Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n\n        int ret = 0;\n        while (n)\n        {\n            n &amp;= (n - 1);\n            ret++;\n        }\n        return ret;\n    }\n};\n//\u4e0d\u65ad\u7684\u5220\u53bb\u6700\u53f3\u4fa7\u76841\uff0c\u5220\u53bb\u7684\u4e2a\u6570\u5c31\u662f\u67091\u7684\u4e2a\u6570\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#338","title":"338","text":"<pre><code>class Solution {\npublic:\n    int countOnes(int x)\n    {\n        int ret = 0;\n        while (x)\n        {\n            x &amp;= x - 1;\n            ret++;\n        }\n        return ret;\n    }\n    vector&lt;int&gt; countBits(int n) {\n        vector&lt;int&gt; bits(n + 1);\n        for (int i = 0; i &lt;= n; i++)\n        {\n            bits[i] = countOnes(i);\n        }\n        return bits;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#461","title":"461\u6c49\u660e\u8ddd\u79bb","text":"<p>461.\u00a0\u6c49\u660e\u8ddd\u79bb</p> <p>\u7b80\u5355</p> <p>718</p> <p>\u76f8\u5173\u4f01\u4e1a</p> <p>\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570\u00a0<code>x</code>\u00a0\u548c\u00a0<code>y</code>\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1ax = 1, y = 4 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a 1   (0 0 0 1) 4   (0 1 0 0)        \u2191   \u2191 \u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1ax = 3, y = 1 \u8f93\u51fa\uff1a1</p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;=\u00a0x, y &lt;= 231 - 1</code></li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#260","title":"260","text":"<p>260.\u00a0\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0<code>nums</code>\uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002\u4f60\u53ef\u4ee5\u6309\u00a0\u4efb\u610f\u987a\u5e8f\u00a0\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u4e14\u4ec5\u4f7f\u7528\u5e38\u91cf\u989d\u5916\u7a7a\u95f4\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,1,3,2,5] \u8f93\u51fa\uff1a[3,5] \u89e3\u91ca\uff1a[5, 3] \u4e5f\u662f\u6709\u6548\u7684\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [-1,0] \u8f93\u51fa\uff1a[-1,0]</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1anums = [0,1] \u8f93\u51fa\uff1a[1,0]</p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>2 &lt;= nums.length &lt;= 3 * 104</code></li> <li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li> <li>\u9664\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6574\u6570\u5916\uff0c<code>nums</code>\u00a0\u4e2d\u7684\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e24\u6b21</li> </ul> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 vector&lt;int&gt; singleNumber(vector&lt;int&gt;&amp; nums) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int xorsum=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(auto num:nums)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 xorsum^=num;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 int lsb=(xorsum==INT_MIN?xorsum:xorsum&amp;(-xorsum));\n\n\u00a0 \u00a0 \u00a0 \u00a0 int type1=0,type2=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int num:nums)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(num&amp;lsb)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type1^=num;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else{\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type2^=num;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return {type1,type2};\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_5","title":"\u4e60\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#90-64","title":"90. 64\u4f4d\u6574\u6570\u4e58\u6cd5","text":"<p>\u91c7\u7528\u4e8c\u8fdb\u5236\u7684\u601d\u60f3\uff0c\u5982\u679c\u76f4\u63a5a*b\u4f1a\u8d85\u8fc7long long \u91c7\u7528\u4e8c\u8fdb\u5236\u5982</p> <p>\u4f8b\uff1a\u8ba1\u7b97 37 7\u7684\u4e8c\u8fdb\u5236 111 3(2^0)=3 3(2^1)=6 3(2^2)=12</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define ll long long\nint main()\n{\n    ll a,b,p,res=0;\n    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;\n    while(b){\n        if(b&amp;1)\n           res=(res+a)%p;// \u68c0\u67e5 b \u7684\u6700\u4f4e\u4f4d\u662f\u5426\u4e3a1\u3002\n        b&gt;&gt;=1;\n        a=2*a%p;\n\n    }\n    cout&lt;&lt;res&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C/","title":"\u524d\u7f00\u548c","text":"<p>-# 012 \u5bfb\u627e\u6570\u7ec4\u7684\u4e2d\u5fc3\u4e0b\u6807 ![[Pasted image 20240503191603.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int pivotIndex(vector&lt;int&gt;&amp; nums) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=nums.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(n==0) \u00a0 \u00a0return 0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;int&gt; sum(n+1);\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;n;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum[i+1]=sum[i]+nums[i];\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 int res=-1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;n;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n            //\u5982\u679c\u4e4b\u524d\u7684\u548c\u7b49\u4e8e\u4e4b\u540e\u7684\u548c\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(sum[i]==(sum[n]-sum[i+1]))\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 res=i;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return res;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p> <p>LCR 011. \u8fde\u7eed\u6570\u7ec4 \u7531\u4e8e\u300c0 \u548c 1\u7684\u6570\u91cf\u76f8\u540c\u300d\u7b49\u4ef7\u4e8e\u300c1 \u7684\u6570\u91cf\u51cf\u53bb 0 \u7684\u6570\u91cf\u7b49\u4e8e 0\u300d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e2d\u7684 0 \u89c6\u4f5c \u22121\uff0c\u5219\u539f\u95ee\u9898\u8f6c\u6362\u6210\u300c\u6c42\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u548c\u4e3a 0\u300d\u3002</p> <p>\u4f7f\u7528\u524d\u7f00\u548c\u52a0\u4e0a\u54c8\u5e0c\u8868\uff0c\u6700\u5f00\u59cb\u54c8\u5e0c\u8868\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u6ee1\u8db3\u60c5\u51b5\uff0c\u4f46\u4e0d\u662f\u60f3\u8981\u7684\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a-1\u4e0d\u662f0.</p> <p>\u7531\u4e8e\u54c8\u5e0c\u8868\u5b58\u50a8\u7684\u662f counter \u7684\u6bcf\u4e2a\u53d6\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807\uff0c\u56e0\u6b64\u5f53\u9047\u5230\u91cd\u590d\u7684\u524d\u7f00\u548c\u65f6\uff0c\u6839\u636e\u5f53\u524d\u4e0b\u6807\u548c\u54c8\u5e0c\u8868\u4e2d\u5b58\u50a8\u7684\u4e0b\u6807\u8ba1\u7b97\u5f97\u5230\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u662f\u4ee5\u5f53\u524d\u4e0b\u6807\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u4e2d\u6ee1\u8db3\u6709\u76f8\u540c\u6570\u91cf\u7684 0\u548c 1 \u7684\u6700\u957f\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u904d\u5386\u7ed3\u675f\u65f6\uff0c\u5373\u53ef\u5f97\u5230 nums \u4e2d\u7684\u6709\u76f8\u540c\u6570\u91cf\u7684 0 \u548c 1 \u7684\u6700\u957f\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <pre><code>class Solution {\npublic:\n    int findMaxLength(vector&lt;int&gt;&amp; nums) {\n        int maxlength=0;\n        unordered_map&lt;int,int&gt; mp;\n        int counter=0;\n        mp[counter]=-1;\n        int n=nums.size();\n        for(int i=0;i&lt;n;i++){\n            int num=nums[i];\n            if(num==1){\n                counter++;\n            }else{\n                counter--;\n            }\n            if(mp.count(counter)){//\u503c\u5b58\u5728\n                int prevIndex=mp[counter];\n                maxlength=max(maxlength,i-prevIndex);\n            }else{//\u503c\u4e0d\u5b58\u5728\n                mp[counter]=i;\n            }\n        }\n        return maxlength;\n    }\n};\n</code></pre> <p>1314.\u77e9\u9635\u533a\u57df\u548c</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/","title":"[NOIP 2018 \u666e\u53ca\u7ec4] \u6807\u9898\u7edf\u8ba1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#_1","title":"\u9898\u76ee\u80cc\u666f","text":"<p>NOIP 2018 \u666e\u53ca\u7ec4 T 1</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u51ef\u51ef\u521a\u5199\u4e86\u4e00\u7bc7\u7f8e\u5999\u7684\u4f5c\u6587\uff0c\u8bf7\u95ee\u8fd9\u7bc7\u4f5c\u6587\u7684\u6807\u9898\u4e2d\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\uff1f \u6ce8\u610f\uff1a\u6807\u9898\u4e2d\u53ef\u80fd\u5305\u542b\u5927\u3001\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u5b57\u7b26\u3001\u7a7a\u683c\u548c\u6362\u884c\u7b26\u3002\u7edf\u8ba1\u6807\u9898\u5b57\u7b26\u6570\u65f6\uff0c\u7a7a\u683c\u548c\u6362\u884c\u7b26\u4e0d\u8ba1\u7b97\u5728\u5185\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u6587\u4ef6\u53ea\u6709\u4e00\u884c\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u6587\u4ef6\u53ea\u6709\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u4f5c\u6587\u6807\u9898\u7684\u5b57\u7b26\u6570\uff08\u4e0d\u542b\u7a7a\u683c\u548c\u6362\u884c\u7b26\uff09\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>234\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>Ca 45\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>4\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80/#_5","title":"\u63d0\u793a","text":"<p>\u6837\u4f8b 1 \u8bf4\u660e </p> <p>\u6807\u9898\u4e2d\u5171\u6709 3 \u4e2a\u5b57\u7b26\uff0c\u8fd9 3 \u4e2a\u5b57\u7b26\u90fd\u662f\u6570\u5b57\u5b57\u7b26\u3002   </p> <p>\u6837\u4f8b 2 \u8bf4\u660e</p> <p>\u6807\u9898\u4e2d\u5171\u6709 $ 5$ \u4e2a\u5b57\u7b26\uff0c\u5305\u62ec \\(1\\) \u4e2a\u5927\u5199\u82f1\u6587\u5b57\u6bcd\uff0c \\(1\\) \u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c \\(2\\) \u4e2a\u6570\u5b57\u5b57\u7b26\uff0c\u8fd8\u6709 \\(1\\) \u4e2a\u7a7a\u683c\u3002\u7531\u4e8e\u7a7a\u683c\u4e0d\u8ba1\u5165\u7ed3\u679c\u4e2d\uff0c\u6545\u6807\u9898\u7684\u6709\u6548\u5b57\u7b26\u6570\u4e3a \\(4\\) \u4e2a\u3002 </p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u89c4\u5b9a \\(|s|\\) \u8868\u793a\u5b57\u7b26\u4e32 \\(s\\) \u7684\u957f\u5ea6\uff08\u5373\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u548c\u7a7a\u683c\u6570\uff09\u3002   \u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\\(1 \u2264 |s| \u2264 5\\)\uff0c\u4fdd\u8bc1\u8f93\u5165\u4e3a\u6570\u5b57\u5b57\u7b26\u53ca\u884c\u672b\u6362\u884c\u7b26\u3002  \u5bf9\u4e8e \\(80\\%\\) \u7684\u6570\u636e\uff0c\\(1 \u2264 |s| \u2264 5\\)\uff0c\u8f93\u5165\u53ea\u53ef\u80fd\u5305\u542b\u5927\u3001\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u5b57\u7b26\u53ca\u884c\u672b\u6362\u884c\u7b26\u3002  \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \u2264 |s| \u2264 5\\)\uff0c\u8f93\u5165\u53ef\u80fd\u5305\u542b\u5927\u3001\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u5b57\u7b26\u3001\u7a7a\u683c\u548c\u884c\u672b\u6362\u884c\u7b26\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/","title":"\u5f52\u5e76\u6392\u5e8f","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define N 100010\nint a[N];\nint temp[N];\n\nvoid merge_sort(int a[],int l,int r){\n    if(l&gt;=r){\n        return;\n    }\n    int mid=(l+r)/2;\n    merge_sort(a,l,mid);\n    merge_sort(a,mid+1,r);\n\n    int k=0;\n    int i=l,j=mid+1;\n    while(i &lt;= mid &amp;&amp; j &lt;= r){\n\n        if(a[i] &lt; a[j]) \n\n            temp[k++] = a[i++];\n\n        else temp[k++] = a[j++];\n    }\n    while(i&lt;=mid){\n        temp[k++]=a[i++];\n    }\n    while(j&lt;=r){\n         temp[k++]=a[j++];\n    }\n    k=0;\n    for(int i=l;i&lt;=r;i++){\n        a[i]=temp[k];\n        k++;\n    }\n}\n\nint main()\n{\n    int n;\n    cin&gt;&gt;n;\n    for(int i=0;i&lt;n;i++){\n        cin&gt;&gt;a[i];\n    }\n    merge_sort(a,0,n-1);\n    for(int i=0;i&lt;n;i++){\n        cout&lt;&lt;a[i]&lt;&lt;\" \";\n    }cout&lt;&lt;endl;\n    return 0;\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_2","title":"\u5f52\u5e76\u6392\u5e8f\u7684\u5e94\u7528","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_3","title":"\u9898\u76ee\u8868\u8ff0","text":"<p>\u9006\u5e8f\u5bf9\u7684\u6570\u91cf \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n  \u7684\u6574\u6570\u6570\u5217\uff0c\u8bf7\u4f60\u8ba1\u7b97\u6570\u5217\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u6570\u91cf\u3002</p> <p>\u9006\u5e8f\u5bf9\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u5bf9\u4e8e\u6570\u5217\u7684\u7b2c i\u4e2a\u548c\u7b2c j\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ee1\u8db3 i&lt;\\j\u4e14 a[i]&gt;a[j]\uff0c\u5219\u5176\u4e3a\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff1b\u5426\u5219\u4e0d\u662f\u3002</p> <p>\u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\uff0c\u8868\u793a\u6570\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542b n\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6574\u4e2a\u6570\u5217\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002</p> <p>\u6570\u636e\u8303\u56f4 1\u2264n\u2264100000\uff0c \u6570\u5217\u4e2d\u7684\u5143\u7d20\u7684\u53d6\u503c\u8303\u56f4 [1,109]\u3002</p> <p>\u8f93\u5165\u6837\u4f8b\uff1a 6 2 3 4 5 6 1 \u8f93\u51fa\u6837\u4f8b\uff1a 5</p> <p>\u5f52\u5e76\u6392\u5e8f\u5408\u5e76\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u5bf9\u6570\u91cf \u82e5 a[i] &gt; a[j]\uff0c\u5219a[i] \u548c\u5b83\u540e\u9762\u7684\u5143\u7d20\u90fd\u5927\u4e8e a[j]\uff0ca[i] \u6784\u6210\u9006\u5e8f\u5bf9\u6570\u91cf\uff1ares += mid - i + 1;</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n#define N 100010\nint a[N];\nint temp[N];\n\nlong long find(int a[],int l,int r){\n    if(l&gt;=r) return 0;\n    int mid = l + (r - l &gt;&gt; 1);\n    long long res=0;\n    res += find(a, l, mid);\n    res += find(a, mid + 1, r);\n\n    int i=l,j=mid+1;\n    int k=0;\n    while(i&lt;=mid&amp;&amp;j&lt;=r){\n        if(a[i]&lt;=a[j]){\n            temp[k++]=a[i++];\n        }else{\n            temp[k++]=a[j++];\n            res += mid - i + 1;\n        }\n    }\n\n    while(i&lt;=mid)   temp[k++]=a[i++];\n    while(j&lt;=r) temp[k++]=a[j++];\n    k=0;\n    for(int i=l;i&lt;=r;i++){\n        a[i]=temp[k];\n        k++;\n    }\n    return res;\n\n\n}\nint main()\n{\n    int n;\n    cin&gt;&gt;n;\n    for(int i=0;i&lt;n;i++)    cin&gt;&gt;a[i];\n    long long res=find(a,0,n-1);\n    cout&lt;&lt;res&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/","title":"\u6a21\u62df","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/#_1","title":"\u66ff\u6362\u6240\u6709\u7684\u95ee\u53f7","text":"<p>1576.\u00a0\u66ff\u6362\u6240\u6709\u7684\u95ee\u53f7</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c\u00a0<code>'?'</code>\u00a0\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u00a0<code>s</code>\uff0c\u8bf7\u4f60\u5c06\u6240\u6709\u7684\u00a0<code>'?'</code>\u00a0\u8f6c\u6362\u4e3a\u82e5\u5e72\u5c0f\u5199\u5b57\u6bcd\uff0c\u4f7f\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u4efb\u4f55\u00a0\u8fde\u7eed\u91cd\u590d\u00a0\u7684\u5b57\u7b26\u3002</p> <p>\u6ce8\u610f\uff1a\u4f60\u00a0\u4e0d\u80fd\u00a0\u4fee\u6539\u975e\u00a0<code>'?'</code>\u00a0\u5b57\u7b26\u3002</p> <p>\u9898\u76ee\u6d4b\u8bd5\u7528\u4f8b\u4fdd\u8bc1\u00a0\u9664 <code>'?'</code>\u00a0\u5b57\u7b26\u00a0\u4e4b\u5916\uff0c\u4e0d\u5b58\u5728\u8fde\u7eed\u91cd\u590d\u7684\u5b57\u7b26\u3002</p> <p>\u5728\u5b8c\u6210\u6240\u6709\u8f6c\u6362\uff08\u53ef\u80fd\u65e0\u9700\u8f6c\u6362\uff09\u540e\u8fd4\u56de\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u6709\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728\u7ed9\u5b9a\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u7b54\u6848\u603b\u662f\u5b58\u5728\u7684\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1as = \"?zs\" \u8f93\u51fa\uff1a\"azs\" \u89e3\u91ca\uff1a\u8be5\u793a\u4f8b\u5171\u6709 25 \u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u4ece \"azs\" \u5230 \"yzs\" \u90fd\u662f\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u3002\u53ea\u6709 \"z\" \u662f\u65e0\u6548\u7684\u4fee\u6539\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32 \"zzs\" \u4e2d\u6709\u8fde\u7eed\u91cd\u590d\u7684\u4e24\u4e2a 'z' \u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1as = \"ubv?w\" \u8f93\u51fa\uff1a\"ubvaw\" \u89e3\u91ca\uff1a\u8be5\u793a\u4f8b\u5171\u6709 24 \u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u6709\u66ff\u6362\u6210 \"v\" \u548c \"w\" \u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u3002\u56e0\u4e3a \"ubvvw\" \u548c \"ubvww\" \u90fd\u5305\u542b\u8fde\u7eed\u91cd\u590d\u7684\u5b57\u7b26\u3002</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 string modifyString(string s) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=s.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;n;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(s[i]=='?')\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(char ch='a';ch&lt;='z';ch++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if((i==0||s[i-1]!=ch)&amp;&amp;(i==n-1||s[i+1]!=ch))\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 s[i]=ch;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return s;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/#_2","title":"\u63d0\u83ab\u653b\u51fb","text":"<p>495.\u00a0\u63d0\u83ab\u653b\u51fb</p> <p>\u7b80\u5355</p> <p>399</p> <p>\u76f8\u5173\u4f01\u4e1a</p> <p>\u5728\u300a\u82f1\u96c4\u8054\u76df\u300b\u7684\u4e16\u754c\u4e2d\uff0c\u6709\u4e00\u4e2a\u53eb \u201c\u63d0\u83ab\u201d \u7684\u82f1\u96c4\u3002\u4ed6\u7684\u653b\u51fb\u53ef\u4ee5\u8ba9\u654c\u65b9\u82f1\u96c4\u827e\u5e0c\uff08\u7f16\u8005\u6ce8\uff1a\u5bd2\u51b0\u5c04\u624b\uff09\u8fdb\u5165\u4e2d\u6bd2\u72b6\u6001\u3002</p> <p>\u5f53\u63d0\u83ab\u653b\u51fb\u827e\u5e0c\uff0c\u827e\u5e0c\u7684\u4e2d\u6bd2\u72b6\u6001\u6b63\u597d\u6301\u7eed\u00a0<code>duration</code>\u00a0\u79d2\u3002</p> <p>\u6b63\u5f0f\u5730\u8bb2\uff0c\u63d0\u83ab\u5728\u00a0<code>t</code>\u00a0\u53d1\u8d77\u653b\u51fb\u610f\u5473\u7740\u827e\u5e0c\u5728\u65f6\u95f4\u533a\u95f4\u00a0<code>[t, t + duration - 1]</code>\uff08\u542b\u00a0<code>t</code>\u00a0\u548c\u00a0<code>t + duration - 1</code>\uff09\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u3002\u5982\u679c\u63d0\u83ab\u5728\u4e2d\u6bd2\u5f71\u54cd\u7ed3\u675f\u00a0\u524d\u00a0\u518d\u6b21\u653b\u51fb\uff0c\u4e2d\u6bd2\u72b6\u6001\u8ba1\u65f6\u5668\u5c06\u4f1a\u00a0\u91cd\u7f6e\u00a0\uff0c\u5728\u65b0\u7684\u653b\u51fb\u4e4b\u540e\uff0c\u4e2d\u6bd2\u5f71\u54cd\u5c06\u4f1a\u5728\u00a0<code>duration</code>\u00a0\u79d2\u540e\u7ed3\u675f\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u00a0\u975e\u9012\u51cf\u00a0\u7684\u6574\u6570\u6570\u7ec4\u00a0<code>timeSeries</code>\u00a0\uff0c\u5176\u4e2d\u00a0<code>timeSeries[i]</code>\u00a0\u8868\u793a\u63d0\u83ab\u5728\u00a0<code>timeSeries[i]</code>\u00a0\u79d2\u65f6\u5bf9\u827e\u5e0c\u53d1\u8d77\u653b\u51fb\uff0c\u4ee5\u53ca\u4e00\u4e2a\u8868\u793a\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\u7684\u6574\u6570\u00a0<code>duration</code>\u00a0\u3002</p> <p>\u8fd4\u56de\u827e\u5e0c\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u7684\u00a0\u603b\u00a0\u79d2\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1atimeSeries = [1,4], duration = 2 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u63d0\u83ab\u653b\u51fb\u5bf9\u827e\u5e0c\u7684\u5f71\u54cd\u5982\u4e0b\uff1a - \u7b2c 1 \u79d2\uff0c\u63d0\u83ab\u653b\u51fb\u827e\u5e0c\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\uff0c\u5373\u7b2c 1 \u79d2\u548c\u7b2c 2 \u79d2\u3002 - \u7b2c 4 \u79d2\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u827e\u5e0c\uff0c\u827e\u5e0c\u4e2d\u6bd2\u72b6\u6001\u53c8\u6301\u7eed 2 \u79d2\uff0c\u5373\u7b2c 4 \u79d2\u548c\u7b2c 5 \u79d2\u3002 \u827e\u5e0c\u5728\u7b2c 1\u30012\u30014\u30015 \u79d2\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\uff0c\u6240\u4ee5\u603b\u4e2d\u6bd2\u79d2\u6570\u662f 4 \u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1atimeSeries = [1,2], duration = 2 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u63d0\u83ab\u653b\u51fb\u5bf9\u827e\u5e0c\u7684\u5f71\u54cd\u5982\u4e0b\uff1a - \u7b2c 1 \u79d2\uff0c\u63d0\u83ab\u653b\u51fb\u827e\u5e0c\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\uff0c\u5373\u7b2c 1 \u79d2\u548c\u7b2c 2 \u79d2\u3002 - \u7b2c 2 \u79d2\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u827e\u5e0c\uff0c\u5e76\u91cd\u7f6e\u4e2d\u6bd2\u8ba1\u65f6\u5668\uff0c\u827e\u5e0c\u4e2d\u6bd2\u72b6\u6001\u9700\u8981\u6301\u7eed 2 \u79d2\uff0c\u5373\u7b2c 2 \u79d2\u548c\u7b2c 3 \u79d2\u3002 \u827e\u5e0c\u5728\u7b2c 1\u30012\u30013 \u79d2\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\uff0c\u6240\u4ee5\u603b\u4e2d\u6bd2\u79d2\u6570\u662f 3 \u3002 <pre><code>class Solution {\npublic:\n\n\u00a0 \u00a0 int findPoisonedDuration(vector&lt;int&gt;&amp; timeSeries, int duration) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=timeSeries.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 int sum=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;n-1;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(timeSeries[i+1]-timeSeries[i]&gt;=duration)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum+=duration;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }else{\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum+=timeSeries[i+1]-timeSeries[i];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return sum+duration;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F/#n","title":"N\u5b57\u5f62\u53d8\u6362","text":"<p>N \u5b57\u5f62\u53d8\u6362 \u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u00a0<code>s</code>\u00a0\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\u00a0<code>numRows</code>\u00a0\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c\u00a0Z \u5b57\u5f62\u6392\u5217\u3002</p> <p>\u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a\u00a0<code>\"PAYPALISHIRING\"</code>\u00a0\u884c\u6570\u4e3a\u00a0<code>3</code>\u00a0\u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a</p> <p>P   A   H   N A P L S I I G Y   I   R</p> <p>\u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a<code>\"PAHNAPLSIIGYIR\"</code>\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a</p> <p>string convert(string s, int numRows);</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1as = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa\uff1a\"PAHNAPLSIIGYIR\"</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1as = \"PAYPALISHIRING\", numRows = 4 \u8f93\u51fa\uff1a\"PINALSIGYAHRPI\" \u89e3\u91ca\uff1a P     I    N A   L S  I G Y A   H R P     I</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1as = \"A\", numRows = 1 \u8f93\u51fa\uff1a\"A\" \u627e\u89c4\u5f8b <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 string convert(string s, int numRows) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(numRows==1) return s;\n\n\u00a0 \u00a0 \u00a0 \u00a0 string ret;\n\n\u00a0 \u00a0 \u00a0 \u00a0 int d=2*numRows-2,n=s.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 //1.\u5148\u5904\u7406\u7b2c\u4e00\u884c\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;n;i+=d)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ret+=s[i];\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 //\u5904\u7406\u4e2d\u95f4\u884c\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int k=1;k&lt;numRows-1;k++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(int i=k,j=d-k;i&lt;n||j&lt;n;i+=d,j+=d)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(i&lt;n) ret+=s[i];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(j&lt;n) ret+=s[j];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 //\u5904\u7406\u6700\u540e\u4e00\u884c\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=numRows-1;i&lt;n;i+=d)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ret+=s[i];\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return ret;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/","title":"LCR 016\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<p>![[Pasted image 20240428202557.png]]</p> <p><pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int lengthOfLongestSubstring(string s) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int hash[128]={0};\n\n\u00a0 \u00a0 \u00a0 \u00a0 int left=0,right=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 int ret=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 while(right&lt;s.size())\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 hash[s[right]]++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while(hash[s[right]]&gt;1)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 hash[s[left++]]--;\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ret=max(ret,right-left+1);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 right++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return ret;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre> \u4f7f\u7528\u54c8\u5e0c\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\u5bf9\u8fdb\u7a97\u53e3\u548c\u51fa\u7a97\u53e3\u7684\u5224\u65ad\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#1004-1-3","title":"1004 \u6700\u5927\u8fde\u7eed 1 \u7684\u4e2a\u6570\uff083\uff09","text":"<p>![[Pasted image 20240429095605.png]] ![[Pasted image 20240429102158.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int longestOnes(vector&lt;int&gt;&amp; nums, int k) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int res=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 int zero=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int left=0,right=0;right&lt;nums.size();right++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(nums[right]==0) \u00a0zero++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while(zero&gt;k)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(nums[left++]==0)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 zero--;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 res=max(res,right-left+1);\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return res;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p> <p>\u5e76\u4e0d\u5b9e\u9645\u4e0a\u505a\u53cd\u8f6c\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u53ea\u662f\u8fdb\u884c\u8ba1\u6570\uff0c\u53ea\u8981\u8fd8\u5728\u5408\u6cd5\u533a\u95f4\u5185\u5c31\u53ef\u4ee5\u8fdb\u7a97\u53e3</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#1658-x-0","title":"1658 \u5c06 X \u51cf\u5230 0 \u7684\u6700\u5c0f\u64cd\u4f5c\u6570","text":"<p>![[Pasted image 20240429104619.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int minOperations(vector&lt;int&gt; &amp;nums, int x) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int ret=-1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 int sum=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(auto a:nums) \u00a0 \u00a0sum+=a;\n\n\u00a0 \u00a0 \u00a0 \u00a0 int target=sum-x;\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(target&lt;0) \u00a0 \u00a0return ret;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int left=0,right=0,tmp=0;right&lt;nums.size();right++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp+=nums[right];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while(tmp&gt;target&amp;&amp;left&lt;=right)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp-=nums[left++];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(tmp==target)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ret=max(ret,right-left+1);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(ret==-1) return -1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 else return nums.size()-ret;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p> <p>\u56e0\u4e3a\u627e\u4e24\u8fb9\u7684\u6570\u6bd4\u8f83\u56f0\u54ea\uff0c\u4f46\u662f\u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u627e\u5230\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u5185\uff0c\u4e00\u6bb5\u957f\u5ea6\u7684\u548c\u6bd4\u8f83\u5bb9\u6613\uff0c\u56e0\u6b64\u95ee\u9898\u8f6c\u6362\u4e3a\u6ed1\u52a8\u7a97\u53e3\u6765\u89e3\u51b3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#904","title":"904 \u6c34\u679c\u6210\u7bee","text":"<p>![[Pasted image 20240429110101.png]] \u7ffb\u8bd1\u9898\u76ee\u5c31\u662f\u627e\u5230\uff0c\u4e00\u6bb5\u533a\u95f4\uff0c\u8fd9\u6bb5\u533a\u95f4\u53ea\u80fd\u5305\u542b\u4e24\u4e2a\u79cd\u7c7b\u7684\uff0c\u627e\u5230\u6700\u957f\u7684\u533a\u95f4 \u53ef\u4ee5\u91c7\u7528\u54c8\u5e0c\u7684\u65b9\u5f0f\u6765\u5b58\u50a8 \u8fdb\u7a97\u53e3\u628a\u54c8\u5e0c\u503c\u8bbe\u7f6e\u4e3a 1\uff1b \u4f46\u662f\u54c8\u5e0c\u8868\u6709\u4e14\u53ea\u80fd\u7528\u4e24\u4e2a\u91cf\uff1b ![[Pasted image 20240429110557.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int totalFruit(vector&lt;int&gt;&amp; fruits) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 unordered_map&lt;int,int&gt; hash;\n\n\u00a0 \u00a0 \u00a0 \u00a0 int ans=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int left=0,right=0;right&lt;fruits.size();right++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 hash[fruits[right]]++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while(hash.size()&gt;2)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 hash[fruits[left]]--;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(hash[fruits[left]]==0)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 hash.erase(fruits[left]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 left++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ans=max(ans,right-left+1);\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return ans;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#438","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findAnagrams(string s, string p) {\n        int slen = s.size(), plen = p.size();\n        if (slen &lt; plen) {\n            return vector&lt;int&gt;();\n        }\n\n        vector&lt;int&gt; ans;\n        vector&lt;int&gt; sCount(26);\n        vector&lt;int&gt; pCount(26);\n        for (int i = 0; i &lt; plen; i++) {\n            ++sCount[s[i] - 'a'];\n            ++pCount[s[i] - 'a'];\n        }\n        if (sCount == pCount) {\n            ans.emplace_back(0);\n        }\n        for (int i = 0; i &lt; slen - plen; ++i) {\n            --sCount[s[i] - 'a'];\n            ++sCount[s[i + plen] - 'a'];\n\n            if (sCount == pCount) {\n                ans.emplace_back(i + 1);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/","title":"54\u87ba\u65cb\u77e9\u9635","text":"<p>1.\u5b9a\u4e49\u4e0a\u4e0b\u8fb9\u754c 2.\u5faa\u73af\u7684\u987a\u5e8f\u662f\uff0c\u4e0a\u8fb9\u754c\uff0c\u53f3\u8fb9\u754c\uff0c\u4e0b\u8fb9\u754c\uff0c\u5de6\u8fb9\u754c 3.\u6bcf\u6b21\u8bfb\u5b8c\u5404\u4e2a\u8fb9\u754c\u4e4b\u540e\uff0c\u66f4\u65b0 4.\u5982\u679c\u4e0a\u8fb9\u754c\u7b49\u4e8e\u4e0b\u8fb9\u754c\uff0c\u6216\u8005\u5de6\u8fb9\u754c\u7b49\u4e8e\u53f3\u8fb9\u754c\uff0c\u5224\u65ad\u662f\u5426\u51fa\u754c <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        vector&lt;int&gt; ans;\n        if(matrix.empty())  return ans;\n        //\u4e0a\u4e0b\u5de6\u53f3\n        int u=0;\n        int d=matrix.size()-1;\n        int l=0;\n        int r=matrix[0].size()-1;\n        while(true){\n            for(int i=l;i&lt;=r;i++)   ans.push_back(matrix[u][i]);\n            if(++u&gt;d)   break;//\u5224\u65ad\u4e0a\u8fb9\u754c\u662f\u5426\u5927\u4e8e\u4e0b\u8fb9\u754c\n            for(int i=u;i&lt;=d;i++)   ans.push_back(matrix[i][r]);\n            if(--r&lt;l)   break;\n            for(int i=r;i&gt;=l;i--)   ans.push_back(matrix[d][i]);\n            if(--d&lt;u)   break;\n            for(int i=d;i&gt;=u;i--)   ans.push_back(matrix[i][l]);\n            if(++ l &gt; r) break;\n        }\n        return ans;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E5%8F%8C%E6%8C%87%E9%92%88/","title":"\u4ec0\u4e48\u662f\u53cc\u6307\u9488","text":"<ul> <li>\u53cc\u6307\u9488\u4e3b\u8981\u7528\u4e8e\u904d\u5386\u6570\u7ec4\uff0c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u4ece\u800c\u534f\u540c\u5b8c\u6210\u4efb\u52a1\u3002\u4e5f\u53ef\u4ee5\u5ef6\u4f38\u5230\u591a\u4e2a\u6570\u7ec4\u7684\u591a\u4e2a\u6307\u9488\u3002</li> <li>\u82e5\u4e24\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u6570\u7ec4\uff0c\u904d\u5386\u65b9\u5411\u76f8\u540c\u4e14\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u5219\u4e5f\u79f0\u4e3a\u6ed1\u52a8\u7a97\u53e3\uff08\u4e24\u4e2a\u6307\u9488\u5305\u56f4\u7684\u533a\u57df\u5373\u4e3a\u5f53\u524d\u7684\u7a97\u53e3\uff09\uff0c\u7ecf\u5e38\u7528\u4e8e\u533a\u95f4\u641c\u7d22\u3002</li> <li>\u82e5\u4e24\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u6570\u7ec4\uff0c\u4f46\u662f\u904d\u5386\u65b9\u5411\u76f8\u53cd\uff0c\u5219\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u641c\u7d22\uff0c\u5f85\u641c\u7d22\u7684\u6570\u7ec4\u5f80\u5f80\u662f\u6392\u597d\u5e8f\u7684</li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E5%8F%8C%E6%8C%87%E9%92%88/#_2","title":"\u6307\u9488\u4e0e\u5e38\u91cf","text":"<pre><code>int x;\nint * p1 = &amp;x; // \u6307\u9488\u53ef\u4ee5\u88ab\u4fee\u6539\uff0c\u503c\u4e5f\u53ef\u4ee5\u88ab\u4fee\u6539\nconst int * p2 = &amp;x; // \u6307\u9488\u53ef\u4ee5\u88ab\u4fee\u6539\uff0c\u503c\u4e0d\u53ef\u4ee5\u88ab\u4fee\u6539\uff08const int\uff09\nint * const p3 = &amp;x; // \u6307\u9488\u4e0d\u53ef\u4ee5\u88ab\u4fee\u6539\uff08* const\uff09\uff0c\u503c\u53ef\u4ee5\u88ab\u4fee\u6539\nconst int * const p4 = &amp;x; // \u6307\u9488\u4e0d\u53ef\u4ee5\u88ab\u4fee\u6539\uff0c\u503c\u4e5f\u4e0d\u53ef\u4ee5\u88ab\u4fee\u6539\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E5%8F%8C%E6%8C%87%E9%92%88/#167-ii-","title":"167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 1 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 numbers \uff0c\u8be5\u6570\u7ec4\u5df2\u6309 \u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217  \uff0c\u8bf7\u4f60\u4ece\u6570\u7ec4\u4e2d\u627e\u51fa\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 target \u7684\u4e24\u4e2a\u6570\u3002\u5982\u679c\u8bbe\u8fd9\u4e24\u4e2a\u6570\u5206\u522b\u662f numbers[index1] \u548c numbers[index2] \uff0c\u5219 1 &lt;= index1 &lt; index2 &lt;= numbers.length \u3002</p> <p>\u4ee5\u957f\u5ea6\u4e3a 2 \u7684\u6574\u6570\u6570\u7ec4 [index1, index2] \u7684\u5f62\u5f0f\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6574\u6570\u7684\u4e0b\u6807 index1 \u548c index2\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165 \u53ea\u5bf9\u5e94\u552f\u4e00\u7684\u7b54\u6848 \uff0c\u800c\u4e14\u4f60 \u4e0d\u53ef\u4ee5 \u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u6240\u8bbe\u8ba1\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b\u53ea\u4f7f\u7528\u5e38\u91cf\u7ea7\u7684\u989d\u5916\u7a7a\u95f4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anumbers = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[1,2] \u89e3\u91ca\uff1a2 \u4e0e 7 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 9 \u3002\u56e0\u6b64 index1 = 1, index2 = 2 \u3002\u8fd4\u56de [1, 2] \u3002 \u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anumbers = [2,3,4], target = 6 \u8f93\u51fa\uff1a[1,3] \u89e3\u91ca\uff1a2 \u4e0e 4 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 6 \u3002\u56e0\u6b64 index1 = 1, index2 = 3 \u3002\u8fd4\u56de [1, 3] \u3002 \u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1anumbers = [-1,0], target = -1 \u8f93\u51fa\uff1a[1,2] \u89e3\u91ca\uff1a-1 \u4e0e 0 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 -1 \u3002\u56e0\u6b64 index1 = 1, index2 = 2 \u3002\u8fd4\u56de [1, 2] \u3002</p> <p>\u63d0\u793a\uff1a</p> <p>2 &lt;= numbers.length &lt;= 3 * 104 -1000 &lt;= numbers[i] &lt;= 1000 numbers \u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5217 -1000 &lt;= target &lt;= 1000 \u4ec5\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7b54\u6848</p> <p>\u56e0\u4e3a\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u65b9\u5411\u76f8\u53cd\u7684\u53cc\u6307\u9488\u6765\u5bfb\u627e\u8fd9\u4e24\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u521d\u59cb\u6307\u5411\u6700 \u5c0f\u7684\u5143\u7d20\uff0c\u5373\u6570\u7ec4\u6700\u5de6\u8fb9\uff0c\u5411\u53f3\u904d\u5386\uff1b\u4e00\u4e2a\u521d\u59cb\u6307\u5411\u6700\u5927\u7684\u5143\u7d20\uff0c\u5373\u6570\u7ec4\u6700\u53f3\u8fb9\uff0c\u5411\u5de6\u904d\u5386\u3002 \u5982\u679c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u503c\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u6211\u4eec\u8981\u7684\u7ed3\u679c\u3002\u5982\u679c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5143 \u7d20\u7684\u548c\u5c0f\u4e8e\u7ed9\u5b9a\u503c\uff0c\u6211\u4eec\u628a\u5de6\u8fb9\u7684\u6307\u9488\u53f3\u79fb\u4e00\u4f4d\uff0c\u4f7f\u5f97\u5f53\u524d\u7684\u548c\u589e\u52a0\u4e00\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5143 \u7d20\u7684\u548c\u5927\u4e8e\u7ed9\u5b9a\u503c\uff0c\u6211\u4eec\u628a\u53f3\u8fb9\u7684\u6307\u9488\u5de6\u79fb\u4e00\u4f4d\uff0c\u4f7f\u5f97\u5f53\u524d\u7684\u548c\u51cf\u5c11\u4e00\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) {\n        int l=0, r = numbers.size() - 1, sum;\n        while (l &lt; r) {\n            sum = numbers[l] + numbers[r];\n            if (sum == target)\n                break;\n            if (sum &lt; target)\n                ++l;\n            else\n                --r;\n        }\n        return vector&lt;int&gt;{l + 1, r + 1};\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E5%8F%8C%E6%8C%87%E9%92%88/#88","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2\uff0c\u53e6\u6709\u4e24\u4e2a\u6574\u6570 m \u548c n \uff0c\u5206\u522b\u8868\u793a nums1 \u548c nums2 \u4e2d\u7684\u5143\u7d20\u6570\u76ee\u3002</p> <p>\u8bf7\u4f60 \u5408\u5e76 nums2 \u5230 nums1 \u4e2d\uff0c\u4f7f\u5408\u5e76\u540e\u7684\u6570\u7ec4\u540c\u6837\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5217\u3002</p> <p>\u6ce8\u610f\uff1a\u6700\u7ec8\uff0c\u5408\u5e76\u540e\u6570\u7ec4\u4e0d\u5e94\u7531\u51fd\u6570\u8fd4\u56de\uff0c\u800c\u662f\u5b58\u50a8\u5728\u6570\u7ec4 nums1 \u4e2d\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0cnums1 \u7684\u521d\u59cb\u957f\u5ea6\u4e3a m + n\uff0c\u5176\u4e2d\u524d m \u4e2a\u5143\u7d20\u8868\u793a\u5e94\u5408\u5e76\u7684\u5143\u7d20\uff0c\u540e n \u4e2a\u5143\u7d20\u4e3a 0 \uff0c\u5e94\u5ffd\u7565\u3002nums2 \u7684\u957f\u5ea6\u4e3a n \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 \u8f93\u51fa\uff1a[1,2,2,3,5,6] \u89e3\u91ca\uff1a\u9700\u8981\u5408\u5e76 [1,2,3] \u548c [2,5,6] \u3002 \u5408\u5e76\u7ed3\u679c\u662f [1,2,2,3,5,6] \uff0c\u5176\u4e2d\u659c\u4f53\u52a0\u7c97\u6807\u6ce8\u7684\u4e3a nums1 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums1 = [1], m = 1, nums2 = [], n = 0 \u8f93\u51fa\uff1a[1] \u89e3\u91ca\uff1a\u9700\u8981\u5408\u5e76 [1] \u548c [] \u3002 \u5408\u5e76\u7ed3\u679c\u662f [1] \u3002 \u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1anums1 = [0], m = 0, nums2 = [1], n = 1 \u8f93\u51fa\uff1a[1] \u89e3\u91ca\uff1a\u9700\u8981\u5408\u5e76\u7684\u6570\u7ec4\u662f [] \u548c [1] \u3002 \u5408\u5e76\u7ed3\u679c\u662f [1] \u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a m = 0 \uff0c\u6240\u4ee5 nums1 \u4e2d\u6ca1\u6709\u5143\u7d20\u3002nums1 \u4e2d\u4ec5\u5b58\u7684 0 \u4ec5\u4ec5\u662f\u4e3a\u4e86\u786e\u4fdd\u5408\u5e76\u7ed3\u679c\u53ef\u4ee5\u987a\u5229\u5b58\u653e\u5230 nums1 \u4e2d\u3002</p> <p>\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u4e2a\u6307\u9488\u5206\u522b\u653e\u5728\u4e24\u4e2a\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u5373 nums1 \u7684 m \u2212 1 \u4f4d\u548c nums2 \u7684 n \u2212 1 \u4f4d\u3002\u6bcf\u6b21\u5c06\u8f83\u5927\u7684\u90a3\u4e2a\u6570\u5b57\u590d\u5236\u5230 nums1 \u7684\u540e\u8fb9\uff0c\u7136\u540e\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\u3002 \u56e0\u4e3a\u6211\u4eec\u4e5f\u8981\u5b9a\u4f4d nums1 \u7684\u672b\u5c3e\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u7b2c\u4e09\u4e2a\u6307\u9488\uff0c\u4ee5\u4fbf\u590d\u5236\u3002 \u5728\u4ee5\u4e0b\u7684\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528 m \u548c n \u5f53\u4f5c\u4e24\u4e2a\u6570\u7ec4\u7684\u6307\u9488\uff0c\u518d\u989d\u5916\u521b\u7acb\u4e00\u4e2a pos \u6307\u9488\uff0c\u8d77 \u59cb\u4f4d\u7f6e\u4e3a m +n\u22121\u3002\u6bcf\u6b21\u5411\u524d\u79fb\u52a8 m \u6216 n \u7684\u65f6\u5019\uff0c\u4e5f\u8981\u5411\u524d\u79fb\u52a8 pos\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c nums1 \u7684\u6570\u5b57\u5df2\u7ecf\u590d\u5236\u5b8c\uff0c\u4e0d\u8981\u5fd8\u8bb0\u628a nums2 \u7684\u6570\u5b57\u7ee7\u7eed\u590d\u5236\uff1b\u5982\u679c nums2 \u7684\u6570\u5b57\u5df2\u7ecf\u590d\u5236\u5b8c\uff0c\u5269\u4f59 nums1 \u7684\u6570\u5b57\u4e0d\u9700\u8981\u6539\u53d8\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u88ab\u6392\u597d\u5e8f\u3002</p> <pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        int pos = m-- + n-- - 1;\n        while (m &gt;= 0 &amp;&amp; n &gt;= 0) {\n            nums1[pos--] = nums1[m] &gt; nums2[n] ? nums1[m--] : nums2[n--];\n        }\n        while (n &gt;= 0) {\n            nums1[pos--] = nums2[n--];\n        }\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E5%8F%8C%E6%8C%87%E9%92%88/#26","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u975e\u4e25\u683c\u9012\u589e\u6392\u5217 \u7684\u6570\u7ec4 nums \uff0c\u8bf7\u4f60 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u6bcf\u4e2a\u5143\u7d20 \u53ea\u51fa\u73b0\u4e00\u6b21 \uff0c\u8fd4\u56de\u5220\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002\u5143\u7d20\u7684 \u76f8\u5bf9\u987a\u5e8f \u5e94\u8be5\u4fdd\u6301 \u4e00\u81f4 \u3002\u7136\u540e\u8fd4\u56de nums \u4e2d\u552f\u4e00\u5143\u7d20\u7684\u4e2a\u6570\u3002</p> <p>\u8003\u8651 nums \u7684\u552f\u4e00\u5143\u7d20\u7684\u6570\u91cf\u4e3a k \uff0c\u4f60\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b\u60c5\u786e\u4fdd\u4f60\u7684\u9898\u89e3\u53ef\u4ee5\u88ab\u901a\u8fc7\uff1a</p> <p>\u66f4\u6539\u6570\u7ec4 nums \uff0c\u4f7f nums \u7684\u524d k \u4e2a\u5143\u7d20\u5305\u542b\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u6309\u7167\u5b83\u4eec\u6700\u521d\u5728 nums \u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u6392\u5217\u3002nums \u7684\u5176\u4f59\u5143\u7d20\u4e0e nums \u7684\u5927\u5c0f\u4e0d\u91cd\u8981\u3002 \u8fd4\u56de k \u3002 \u5224\u9898\u6807\u51c6:</p> <p>\u7cfb\u7edf\u4f1a\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u6d4b\u8bd5\u4f60\u7684\u9898\u89e3: <pre><code>int[] nums = [...]; // \u8f93\u5165\u6570\u7ec4\nint[] expectedNums = [...]; // \u957f\u5ea6\u6b63\u786e\u7684\u671f\u671b\u7b54\u6848\n\nint k = removeDuplicates(nums); // \u8c03\u7528\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</code></pre> \u5982\u679c\u6240\u6709\u65ad\u8a00\u90fd\u901a\u8fc7\uff0c\u90a3\u4e48\u60a8\u7684\u9898\u89e3\u5c06\u88ab \u901a\u8fc7\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,1,2] \u8f93\u51fa\uff1a2, nums = [1,2,_] \u89e3\u91ca\uff1a\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2 \uff0c\u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 2 \u3002\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [0,0,1,1,1,2,2,3,3,4] \u8f93\u51fa\uff1a5, nums = [0,1,2,3,4] \u89e3\u91ca\uff1a\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5 \uff0c \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4 \u3002\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</p> <p>\u63d0\u793a\uff1a</p> <p>1 &lt;= nums.length &lt;= 3 * 104 -104 &lt;= nums[i] &lt;= 104 nums \u5df2\u6309 \u975e\u4e25\u683c\u9012\u589e \u6392\u5217</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%A7%BB%E5%8A%A8%E9%9B%B6/","title":"283.\u79fb\u52a8\u96f6","text":"<p><pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        int slowIndex=0;\n        for(int fastIndex=0;fastIndex&lt;nums.size();fastIndex++)\n        {\n            if(nums[fastIndex]!=0)\n            {\n                swap(nums[slowIndex++],nums[fastIndex]);\n            }\n        }\n    }\n};\n</code></pre> \u79fb\u52a8\u96f6 \u5047\u8bbel\u5230r\u5168\u662f\u96f6\uff0c\u9047\u5230r\u6307\u5411\u7684\u975e\u96f6\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5c31\u8ba9\u4e8c\u8005\u4ea4\u6362 \u5426\u5219\u5c31\u4e00\u76f4\u540e\u79fb</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%A7%BB%E5%8A%A8%E9%9B%B6/#1089","title":"1089.\u590d\u5199\u96f6\u00b7","text":"<p><pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nvoid duplicateZeros(vector&lt;int&gt;&amp; arr) {\n    for(int i=0;i&lt;arr.size();i++){\n        if(arr[i]==0){\n            int r=arr.size()-1;\n            while(r&gt;i){\n                arr[r]=arr[r-1];\n                r--;\n            }\n            arr[i + 1] = 0;\n            i++;\n        }\n        cout&lt;&lt;arr[i]&lt;&lt;\" \";\n    }\n\n}\nint main(){\n    vector&lt;int&gt; a={1,0,2,3,0,4,5,0};\n\n    for(int i=0;i&lt;a.size();i++){\n        cout&lt;&lt;a[i]&lt;&lt;\" \";\n    }cout&lt;&lt;endl;\n    duplicateZeros(a);\n    /*for(int i=0;i&lt;a.size();i++){\n        cout&lt;&lt;a[i]&lt;&lt;\" \";\n    }cout&lt;&lt;endl;*/\n    return 0;\n}\n</code></pre> \u590d\u5199\u96f6</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/","title":"Koishi Loves Construction","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>Koishi \u51b3\u5b9a\u8d70\u51fa\u5e7b\u60f3\u4e61\u6210\u4e3a\u6570\u5b66\u5927\u5e08\uff01</p> <p>Flandre \u542c\u8bf4\u5979\u6570\u5b66\u5b66\u7684\u5f88\u597d\uff0c\u5c31\u7ed9 Koishi \u51fa\u4e86\u8fd9\u6837\u4e00\u9053\u6784\u9020\u9898\uff1a</p> <p>Task1\uff1a\u8bd5\u5224\u65ad\u80fd\u5426\u6784\u9020\u5e76\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684 \\(1 \\dots n\\) \u7684\u6392\u5217\uff0c\u6ee1\u8db3\u5176 \\(n\\) \u4e2a\u524d\u7f00\u548c\u5728\u6a21 \\(n\\) \u7684\u610f\u4e49\u4e0b\u4e92\u4e0d\u76f8\u540c\u3002</p> <p>Task2\uff1a\u8bd5\u5224\u65ad\u80fd\u5426\u6784\u9020\u5e76\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684 \\(1 \\dots n\\) \u7684\u6392\u5217\uff0c\u6ee1\u8db3\u5176 \\(n\\) \u4e2a\u524d\u7f00\u79ef\u5728\u6a21 \\(n\\) \u7684\u610f\u4e49\u4e0b\u4e92\u4e0d\u76f8\u540c\u3002</p> <p>\u6309\u7167\u5957\u8def\uff0cKoishi \u5047\u88c5\u81ea\u5df1\u6839\u672c\u4e0d\u4f1a\u505a\uff0c\u5c31\u6765\u627e\u4f60\u5e2e\u5fd9\u8fa3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(X\\) \u548c \\(T\\)\uff0c\u5206\u522b\u8868\u793a Task \u7c7b\u578b\u548c\u6d4b\u8bd5\u70b9\u5185\u7684\u6570\u636e\u7ec4\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(T\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u6bcf\u7ec4\u6570\u636e\u4e2d\u7684 \\(n\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e3a\u4e86\u65b9\u4fbf SPJ \u7684\u7f16\u5199\uff0c\u60a8\u9700\u8981\u9075\u4ece\u4ee5\u4e0b\u683c\u5f0f\u8f93\u51fa\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u4ec5\u5305\u542b\u4e00\u884c\u8f93\u51fa\uff1a</p> <ol> <li>\u5982\u679c\u60a8\u8ba4\u4e3a\u5f53\u524d\u6570\u636e\u4e0d\u5b58\u5728\u7b26\u5408\u9898\u610f\u7684\u6784\u9020\uff0c\u53ea\u9700\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 \\(0\\)\u3002</li> <li>\u5982\u679c\u60a8\u8ba4\u4e3a\u5f53\u524d\u6570\u636e\u5b58\u5728\u7b26\u5408\u9898\u610f\u7684\u6784\u9020\u5374\u4e0d\u4f1a\u6784\u9020\uff0c\u53ea\u9700\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 \\(1\\)\u3002</li> <li>\u5982\u679c\u60a8\u8ba4\u4e3a\u5f53\u524d\u6570\u636e\u5b58\u5728\u7b26\u5408\u9898\u610f\u7684\u6784\u9020\u5e76\u6210\u529f\u6784\u9020\uff0c\u5219\u9700\u8981\u5148\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 \\(2\\)\uff0c\u518d\u8f93\u51fa \\(n\\) \u4e2a\u6574\u6570\u8868\u793a\u6784\u9020\u7684\u65b9\u6848\u3002</li> </ol> <p>\u6bcf\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u9700\u8981\u6709\u7a7a\u683c\u4f5c\u4e3a\u5206\u9694\u7b26\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>1 1\n8\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2 8 7 6 5 4 3 2 1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>2 1\n11\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>2 1 2 3 5 10 6 7 4 9 8 11\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/Koishi%20Loves%20Construction/#_4","title":"\u63d0\u793a","text":"<p>\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff1a</p> <ol> <li>\u5982\u679c\u60a8\u5bf9\u4e8e\u6784\u9020\u7684\u5b58\u5728\u6027\u5224\u65ad\u6b63\u786e\uff0c\u60a8\u5c06\u4f1a\u5f97\u5230 \\(30\\%\\) \u7684\u5206\u6570\uff0c\u82e5\u60a8\u7684\u6784\u9020\u7b26\u5408\u9898\u610f\u6216\u8005\u786e\u5b9e\u4e0d\u5b58\u5728\u7b26\u5408\u9898\u610f\u7684\u6784\u9020\uff0c\u60a8\u5c06\u4f1a\u5f97\u5230\u5269\u4f59\u7684 \\(70\\%\\) \u7684\u5206\u6570\u3002</li> <li>\u5982\u679c\u60a8\u5bf9\u4e8e\u6784\u9020\u7684\u5b58\u5728\u6027\u5224\u65ad\u4e0d\u6b63\u786e\uff0c\u60a8\u5c06\u4e0d\u4f1a\u5f97\u5230\u4efb\u4f55\u5206\u6570\u3002</li> </ol> <p>\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u70b9\uff0c\u60a8\u7684\u5f97\u5206\u5c06\u662f\u672c\u7ec4\u6570\u636e\u70b9\u4e2d\u5f97\u5206\u7684\u6700\u5c0f\u503c\u3002</p> <p>\u6d4b\u8bd5\u70b9\u7c7b\u578b \\(1\\)\uff1a\\(10\\) \u5206\uff0c\u6ee1\u8db3 \\(X = 1\\)\uff0c\\(1 \\leq n \\leq 10\\)\u3002 \u6d4b\u8bd5\u70b9\u7c7b\u578b \\(2\\)\uff1a\\(40\\) \u5206\uff0c\u6ee1\u8db3 \\(X = 1\\)\uff0c\\(1 \\leq n \\leq {10}^5\\)\u3002 \u6d4b\u8bd5\u70b9\u7c7b\u578b \\(3\\)\uff1a\\(10\\) \u5206\uff0c\u6ee1\u8db3 \\(X = 2\\)\uff0c\\(1 \\leq n \\leq 10\\)\u3002 \u6d4b\u8bd5\u70b9\u7c7b\u578b \\(4\\)\uff1a\\(40\\) \u5206\uff0c\u6ee1\u8db3 \\(X = 2\\)\uff0c\\(1 \\leq n \\leq {10}^5\\)\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u6d4b\u8bd5\u70b9\uff0c\u6ee1\u8db3 \\(1 \\leq T \\leq 10\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/","title":"\u6b4c\u5531\u6bd4\u8d5b","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#_1","title":"\u9898\u76ee\u80cc\u666f","text":"<p>\u8d5b\u65f6\u63d0\u9192\uff1a\u672c\u9898\u4e0d\u63d0\u4f9b\u4efb\u4f55\u5173\u4e8e\u6837\u4f8b 4 \u4ee5\u53ca\u65e0\u89e3\u7684\u89e3\u91ca\u3002</p> <p>\u8d5b\u65f6\u63d0\u9192\uff1a\u672c\u9898\u4e0d\u63d0\u4f9b\u4efb\u4f55\u5173\u4e8e\u8f93\u51fa\u683c\u5f0f\u4ee5\u53ca Special Judge \u7684\u89e3\u91ca\u3002</p> <p>\u8d5b\u65f6\u63d0\u9192\uff1a\u62b1\u6b49\uff0c\u672c\u9898\u7684 Special Judge \u4e0d\u5ffd\u7565\u884c\u672b\u7a7a\u683c\uff0c\u8bf7\u4fdd\u8bc1\u4e24\u884c\u4e2d\u6ca1\u6709\u591a\u4f59\u5b57\u7b26\u3002</p> <p>\u8d5b\u65f6\u63d0\u9192\uff1a\u975e\u5e38\u62b1\u6b49\uff0c\u672c\u9898\u8f93\u5165\u6570\u636e\u662f Windows \u683c\u5f0f\uff0c\u800c\u975e Linux \u683c\u5f0f\uff0c\u6240\u4ee5\u5728\u672b\u5c3e\u7684 <code>\\n</code> \u4e4b\u524d\u6709\u4e00\u4e2a\u591a\u4f59\u7684 <code>\\r</code> \u5b57\u7b26\u3002\u8bf7\u4f7f\u7528 <code>scanf</code> \u6216 <code>cin</code> \u8bfb\u5165\u6570\u636e\uff0c\u800c\u975e <code>getline</code>\uff0c\u56e0\u4e3a\u540e\u8005\u4f1a\u591a\u8bfb\u5165\u4e00\u4e2a <code>\\r</code>\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c0f X \u53c2\u52a0\u4e86\u4e00\u573a\u6b4c\u5531\u6bd4\u8d5b\u3002</p> <p>\u7ecf\u8fc7\u4e00\u8def\u93d6\u6218\uff0c\u5c0f X \u7ec8\u4e8e\u633a\u8fdb\u4e86\u51b3\u8d5b\uff0c\u4ed6\u7684\u5bf9\u624b\u662f\u5c0f Y\u3002</p> <p>\u8fd9\u573a\u6b4c\u5531\u6bd4\u8d5b\u7684\u51a0\u519b\u662f\u7531\u70b9\u8d5e\u6570\u51b3\u5b9a\u7684\uff0c\u8c01\u7684\u70b9\u8d5e\u6570\u9ad8\uff0c\u8c01\u5c31\u80fd\u593a\u51a0\u3002</p> <p>\u5c0f X \u548c\u5c0f Y \u4f9d\u6b21\u6f14\u5531\u5b8c\u81ea\u5df1\u7684\u6700\u540e\u4e00\u9996\u6b4c\u66f2\u540e\uff0c\u4ed6\u4eec\u6700\u7ec8\u7684\u70b9\u8d5e\u6570\u786e\u5b9a\u4e86\u4e0b\u6765\u3002</p> <p>\u63ed\u6653\u51a0\u519b\u7684\u65f6\u523b\u7ec8\u4e8e\u5230\u6765\u4e86\uff0c\u4e3b\u6301\u4eba\u4e3a\u4e86\u589e\u52a0\u60ac\u5ff5\uff0c\u51b3\u5b9a\u4ece\u5c0f X \u4e0e\u5c0f Y \u7684\u70b9\u8d5e\u6570\u7684\u6700\u540e\u4e00\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u6bd4\u8f83\u3002</p> <p>\u6bd4\u5982\uff0c\u5c0f X \u7684\u70b9\u8d5e\u6570\u662f \\(37\\)\uff0c\u5c0f Y \u7684\u70b9\u8d5e\u6570\u662f \\(28\\)\u3002\u9996\u5148\u6bd4\u8f83\u6700\u540e\u4e00\u4f4d\uff0c\u5c0f X \u662f \\(7\\)\uff0c\u5c0f Y \u662f \\(8\\)\uff0c\u6b64\u65f6\u5c0f Y \u6682\u65f6\u9886\u5148\u3002\u518d\u52a0\u4e0a\u524d\u4e00\u4f4d\uff0c\u5c0f X \u662f \\(37\\)\uff0c\u5c0f Y \u662f \\(28\\)\uff0c\u6b64\u65f6\u5c0f X \u6682\u65f6\u9886\u5148\u3002\u6bd4\u8f83\u7ed3\u675f\uff0c\u5982\u679c\u6211\u4eec\u7528 <code>X</code> \u4ee3\u8868\u5c0f X \u6682\u65f6\u9886\u5148\uff0c<code>Y</code> \u4ee3\u8868\u5c0f Y \u6682\u65f6\u9886\u5148\uff0c\u90a3\u4e48\u53ef\u4ee5\u5199\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>XY</code>\u3002</p> <p>\u518d\u6bd4\u5982\uff0c\u5c0f X \u7684\u70b9\u8d5e\u6570\u662f \\(137\\)\uff0c\u5c0f Y \u7684\u70b9\u8d5e\u6570\u662f \\(47\\)\u3002\u5982\u679c\u6211\u4eec\u518d\u7528 <code>Z</code> \u8868\u793a\u5c0f X \u4e0e\u5c0f Y \u7684\u70b9\u8d5e\u6570\u6682\u65f6\u4e00\u6837\uff0c\u90a3\u4e48\u5199\u4e0b\u7684\u5b57\u7b26\u4e32\u5e94\u8be5\u4e3a <code>XYZ</code>\u3002</p> <p>\u4f60\u4f5c\u4e3a\u4e00\u4e2a\u7cbe\u901a OI \u7684\u795e\u4ed9\uff0c\u81ea\u7136\u77e5\u9053\u8fd9\u79cd\u6bd4\u8f83\u65b9\u5f0f\u662f\u975e\u5e38\u4e0d\u79d1\u5b66\u7684\uff0c\u8fd9\u6837\u53ea\u662f\u5728\u65e0\u7aef\u62d6\u5ef6\u65f6\u95f4\u7f62\u4e86\uff0c\u4f46\u662f\u4f60\u5374\u5bf9\u6700\u540e\u5199\u4e0b\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5f88\u611f\u5174\u8da3\u3002</p> <p>\u73b0\u5728\uff0c\u4f60\u5f97\u5230\u4e86\u8fd9\u4e2a\u6700\u540e\u5199\u4e0b\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u6784\u9020\u51fa\u4e00\u79cd\u53ef\u80fd\u7684\u5c0f X \u4e0e\u5c0f Y \u7684\u70b9\u8d5e\u6570\u3002</p> <p>\u5f53\u7136\uff0c\u6709\u53ef\u80fd\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u7684\u70b9\u8d5e\u6570\u6ee1\u8db3\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4f60\u53ea\u9700\u8981\u8f93\u51fa <code>-1</code> \u5373\u53ef\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u4f60\u8f93\u51fa\uff0c\u8bf7\u7528\u524d\u5bfc\u96f6\u6765\u8865\u8db3\u4f4d\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u8868\u793a\u6700\u540e\u5199\u4e0b\u7684\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5982\u679c\u6709\u89e3\uff1a</p> <ul> <li>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0f X \u7684\u70b9\u8d5e\u6570\u3002</li> <li>\u7b2c\u4e8c\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0f Y \u7684\u70b9\u8d5e\u6570\u3002</li> </ul> <p>\u5982\u679c\u65e0\u89e3\uff1a</p> <ul> <li>\u4e00\u884c\u4e00\u4e2a\u6574\u6570 <code>-1</code>\u3002</li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>XY\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>37\n28\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>XYZ\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>137\n047\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#3","title":"\u6837\u4f8b #3","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#3_1","title":"\u6837\u4f8b\u8f93\u5165 #3","text":"<pre><code>ZZZZZZ\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#3_2","title":"\u6837\u4f8b\u8f93\u51fa #3","text":"<pre><code>000000\n000000\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#4","title":"\u6837\u4f8b #4","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#4_1","title":"\u6837\u4f8b\u8f93\u5165 #4","text":"<pre><code>XYZXYZ\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#4_2","title":"\u6837\u4f8b\u8f93\u51fa #4","text":"<pre><code>-1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%9E%84%E9%80%A0/%E6%AD%8C%E5%94%B1%E6%AF%94%E8%B5%9B/#_5","title":"\u63d0\u793a","text":"<p>\u672c\u9898\u91c7\u7528\u6346\u7ed1\u6d4b\u8bd5\u3002</p> <ul> <li>Subtask 1\uff0811 points\uff09\uff1a\\(\\text{len}(s) = 1\\)\u3002</li> <li>Subtask 2\uff0842 points\uff09\uff1a\\(s_i \\in \\{\\texttt{X},\\texttt{Y}\\}\\)\u3002</li> <li>Subtask 3\uff0821 points\uff09\uff1a\u6570\u636e\u4fdd\u8bc1\u6709\u89e3\u3002</li> <li>Subtask 4\uff0826 points\uff09\uff1a\u65e0\u7279\u6b8a\u9650\u5236\u3002</li> </ul> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(s_i \\in \\{\\texttt{X},\\texttt{Y},\\texttt{Z}\\}\\)\uff0c\\(1 \\le \\text{len}(s) \\le 10^6\\)\u3002 <pre><code>#include&lt;iostream&gt;  \nusing namespace std;  \n\n#define N 1000006  \nstring s;  \nint a[N],b[N];  \nbool pa(string s)  \n{  \n    bool flag=0;  \n    for(int i=0;i&lt;s.size();i++)  \n    {  \n        if(s[i]=='Z') flag=1;  \n        if(flag==1&amp;&amp;s[i]!='Z') return 1;  \n    }  \n    return 0;  \n}  \nint main()  \n{  \n    cin&gt;&gt;s;  \n    if(pa(s))  return puts(\"-1\"), 0;  \n    for(int i=0;i&lt;s.size();i++)  \n    {  \n        if(s[i]=='X')  \n        {  \n            a[i]=1,b[i]=0;  \n        }  \n        else if(s[i]=='Y') {  \n            a[i]=0,b[i]=1;  \n        }else if(s[i]=='Z')  \n        {  \n            a[i]=1,b[i]=1;  \n        }  \n    }  \n    for(int i=0;i&lt;s.size();i++) cout&lt;&lt;a[i]; cout&lt;&lt;endl; //\u8f93\u51fa\u662f\u6709\u6362\u884c\u7684  \n    for(int i=0;i&lt;s.size();i++) cout&lt;&lt;b[i]; cout&lt;&lt;endl;  \n    return 0;  \n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/","title":"A+B","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9ad8\u7cbe\u5ea6\u52a0\u6cd5\uff0c\u76f8\u5f53\u4e8e a+b problem\uff0c\u4e0d\u7528\u8003\u8651\u8d1f\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u5206\u4e24\u884c\u8f93\u5165\u3002\\(a,b \\leq 10^{500}\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u4ee3\u8868 \\(a+b\\) \u7684\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>1\n1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>1001\n9099\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/A%2BB/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>10100\n</code></pre> <p><pre><code>#include&lt;iostream&gt;  \n#include&lt;string&gt;  \nusing namespace std;  \n\nstring add(string str1,string str2)  \n{  \n    string str;  \n    int len1=str1.length();  \n    int len2=str2.length();  \n    if(len1&lt;len2)  \n    {  \n        for(int i=1;i&lt;=len2-len1;i++)  \n        {  \n            str1='0'+str1;  \n        }  \n    }else{  \n        for(int i=1;i&lt;=len1-len2;i++)  \n        {  \n            str2=\"0\"+str2;  \n        }  \n    }  \n    len1=str1.length();  \n    int cf=0;  \n    int temp;  \n    for(int i=len1-1;i&gt;=0;i--)  \n    {  \n        temp=str1[i]-'0'+str2[i]-'0'+cf;  \n        cf=temp/10;  \n        temp=temp%10;  \n        str=char(temp+'0')+str;  \n    }  \n    if(cf!=0) str=char('0'+cf)+str;  \n\n    return str;  \n}  \nint main()  \n{  \n    string str1,str2;  \n    cin&gt;&gt;str1&gt;&gt;str2;  \n   cout&lt;&lt;add(str1,str2)&lt;&lt;endl;  \n    return 0;  \n}\n</code></pre> \u5bf9\u4e8e\u4e09\u4e2a\u51fd\u6570 \\( u(x) \\)\u3001\\( v(x) \\) \u548c \\( w(x) \\) \u7684\u4e58\u79ef \\( f(x) = u(x) v(x) w(x) \\)\uff0c\u5176 \\( n \\) \u9636\u5bfc\u6570\u53ef\u4ee5\u4f7f\u7528\u83b1\u5e03\u5c3c\u8328\u516c\u5f0f\u7684\u63a8\u5e7f\u5f62\u5f0f\u6765\u6c42\u89e3\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e09\u4e2a\u51fd\u6570\u7684\u4e58\u79ef\u7684 \\( n \\) \u9636\u5bfc\u6570\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a</p> \\[ f^{(n)}(x) = \\sum_{k_1 + k_2 + k_3 = n} \\frac{n!}{k_1! k_2! k_3!} u^{(k_1)}(x) v^{(k_2)}(x) w^{(k_3)}(x) \\] <p>\u5176\u4e2d\uff0c\\( k_1 \\)\u3001\\( k_2 \\) \u548c \\( k_3 \\) \u662f\u975e\u8d1f\u6574\u6570\uff0c\u8868\u793a \\( u \\)\u3001\\( v \\) \u548c \\( w \\) \u7684\u5bfc\u6570\u7684\u9636\u6570\uff0c\u4e14\u5b83\u4eec\u7684\u548c\u4e3a \\( n \\)\u3002\\( u^{(k)}(x) \\)\u3001\\( v^{(k)}(x) \\) \u548c \\( w^{(k)}(x) \\) \u5206\u522b\u8868\u793a\u51fd\u6570 \\( u \\)\u3001\\( v \\) \u548c \\( w \\) \u7684 \\( k \\) \u9636\u5bfc\u6570\u3002</p> <p>\u8fd9\u4e2a\u516c\u5f0f\u7684\u542b\u4e49\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u5c06 \\( n \\) \u9636\u5bfc\u6570\u5206\u914d\u7ed9 \\( u \\)\u3001\\( v \\) \u548c \\( w \\) \u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u90fd\u8ba1\u7b97\u76f8\u5e94\u7684\u5bfc\u6570\u5e76\u4e58\u5728\u4e00\u8d77\uff0c\u7136\u540e\u5c06\u6240\u6709\u8fd9\u4e9b\u7ed3\u679c\u76f8\u52a0\u3002</p> <p>\u5982\u679c\u4f60\u6709\u5177\u4f53\u7684\u51fd\u6570\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u89e3\u91ca\uff0c\u8bf7\u544a\u8bc9\u6211\uff01</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/","title":"844 \u8d70\u8ff7\u5bab","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u00a0n\u00d7m\u00a0\u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u8ff7\u5bab\uff0c\u6570\u7ec4\u4e2d\u53ea\u5305\u542b\u00a000\u00a0\u6216\u00a011\uff0c\u5176\u4e2d\u00a000\u00a0\u8868\u793a\u53ef\u4ee5\u8d70\u7684\u8def\uff0c11\u00a0\u8868\u793a\u4e0d\u53ef\u901a\u8fc7\u7684\u5899\u58c1\u3002</p> <p>\u6700\u521d\uff0c\u6709\u4e00\u4e2a\u4eba\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u00a0(1,1)(1,1)\u00a0\u5904\uff0c\u5df2\u77e5\u8be5\u4eba\u6bcf\u6b21\u53ef\u4ee5\u5411\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u4efb\u610f\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> <p>\u8bf7\u95ee\uff0c\u8be5\u4eba\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u81f3\u53f3\u4e0b\u89d2\u00a0(n,m)\u00a0\u5904\uff0c\u81f3\u5c11\u9700\u8981\u79fb\u52a8\u591a\u5c11\u6b21\u3002</p> <p>\u6570\u636e\u4fdd\u8bc1\u00a0(1,1)(1,1)\u00a0\u5904\u548c\u00a0(n,m)\u5904\u7684\u6570\u5b57\u4e3a\u00a000\uff0c\u4e14\u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u6761\u901a\u8def\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_1","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570\u00a0n\u00a0\u548c\u00a0m\u3002</p> <p>\u63a5\u4e0b\u6765\u00a0n\u00a0\u884c\uff0c\u6bcf\u884c\u5305\u542b\u00a0m\u4e2a\u6574\u6570\uff0800\u00a0\u6216\u00a011\uff09\uff0c\u8868\u793a\u5b8c\u6574\u7684\u4e8c\u7ef4\u6570\u7ec4\u8ff7\u5bab\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_2","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u81f3\u53f3\u4e0b\u89d2\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_3","title":"\u6570\u636e\u8303\u56f4","text":"<p>1\u2264n,m\u2264100</p> <p>\u6bd4\u8f83\u5de7\u5999\u7684\u70b9\u5728\u4e8e\u4f7f\u7528\u4e86 pair \u8fd9\u4e2a\u5bf9\uff0c\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\uff0c\u4f7f\u7528\u961f\u5217\u5b58\u50a8\u6bcf\u4e2a\u70b9 BFS \u7684\u903b\u8f91\u4e3b\u4f53\u987a\u5e8f\u4e3a \u6700\u5f00\u59cb\u5f15\u5165\u8d77\u70b9\u8fdb\u5165\u961f\u5217\uff0c\u7136\u540e\u8fdb\u5165\u5faa\u73af\u961f\u5217\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u5faa\u73af\uff0c\u53d6\u51fa\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6a2a\u7eb5\u5750\u6807\uff0c\u7136\u540e\u8fdb\u884c\u5bbd\u641c\uff0c\u5bbd\u641c\u7684\u7279\u6027\u4e3a\u6700\u77ed\u95ee\u9898\uff0c\u56e0\u6b64\u76f4\u63a5\u8f93\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u6700\u77ed\u8def\u5f84\uff0c\u4e0d\u9700\u8981\u518d\u6b21\u8fdb\u884c\u7b5b\u9009\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\nconst int N=110;\ntypedef pair&lt;int,int&gt; PII;\nint f[N][N];//\u5b58\u50a8\u8ddd\u79bb\nint g[N][N];//\u5b58\u50a8\u5730\u56fe\nint n,m;\n\nvoid bfs(int a,int b)\n{\n    queue&lt;PII&gt; q;\n    q.push({a, b});\n    //\u521d\u59cb\u70b9\u7684\u8ddd\u79bb\u4e3a 0.\n    //\u53ef\u4ee5\u4e0d\u8981\u8fd9\u4e00\u53e5\uff0c\u56e0\u4e3af\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5404\u4e2a\u70b9\u4e3a0\n    f[0][0] = 0;\n    while(!q.empty())\n    {\n        PII start=q.front();\n        q.pop();\n        g[start.first][start.second]=1;\n        int dx[4]={0,1,0,-1},dy[4]={-1,0,1,0};\n        for(int i=0;i&lt;4;i++)\n        {\n            int x=start.first+dx[i];\n            int y=start.second+dy[i];\n            //\u6ca1\u8d70\u8fc7\n            if(g[x][y]==0)\n            {\n                g[x][y]=1;\n                f[x][y]=f[start.first][start.second]+1;\n\n                q.push({x,y});\n            }\n        }\n    }\n    cout&lt;&lt;f[n][m]&lt;&lt;endl;\n}\n\nint main()\n{\n    cin&gt;&gt;n&gt;&gt;m;\n    memset(g, 1, sizeof(g));\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=m;j++)\n        {\n            cin&gt;&gt;g[i][j];\n        }\n    }\n\n    bfs(1,1);\n\n    return 0;\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#845","title":"845 \u516b\u6570\u7801","text":"<p>\u5728\u4e00\u4e2a\u00a03\u00d73\u00a0\u7684\u7f51\u683c\u4e2d\uff0c1\u223c8\u00a0\u8fd9\u00a08\u4e2a\u6570\u5b57\u548c\u4e00\u4e2a\u00a0<code>x</code>\u00a0\u6070\u597d\u4e0d\u91cd\u4e0d\u6f0f\u5730\u5206\u5e03\u5728\u8fd9\u00a03\u00d73\u7684\u7f51\u683c\u4e2d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>1 2 3\nx 4 6\n7 5 8\n</code></pre> <p>\u5728\u6e38\u620f\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u628a\u00a0<code>x</code>\u00a0\u4e0e\u5176\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u4e4b\u4e00\u7684\u6570\u5b57\u4ea4\u6362\uff08\u5982\u679c\u5b58\u5728\uff09\u3002</p> <p>\u6211\u4eec\u7684\u76ee\u7684\u662f\u901a\u8fc7\u4ea4\u6362\uff0c\u4f7f\u5f97\u7f51\u683c\u53d8\u4e3a\u5982\u4e0b\u6392\u5217\uff08\u79f0\u4e3a\u6b63\u786e\u6392\u5217\uff09\uff1a</p> <pre><code>1 2 3\n4 5 6\n7 8 x\n</code></pre> <p>\u4f8b\u5982\uff0c\u793a\u4f8b\u4e2d\u56fe\u5f62\u5c31\u53ef\u4ee5\u901a\u8fc7\u8ba9\u00a0<code>x</code>\u00a0\u5148\u540e\u4e0e\u53f3\u3001\u4e0b\u3001\u53f3\u4e09\u4e2a\u65b9\u5411\u7684\u6570\u5b57\u4ea4\u6362\u6210\u529f\u5f97\u5230\u6b63\u786e\u6392\u5217\u3002</p> <p>\u4ea4\u6362\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>1 2 3   1 2 3   1 2 3   1 2 3\nx 4 6   4 x 6   4 5 6   4 5 6\n7 5 8   7 5 8   7 x 8   7 8 x\n</code></pre> <p>\u73b0\u5728\uff0c\u7ed9\u4f60\u4e00\u4e2a\u521d\u59cb\u7f51\u683c\uff0c\u8bf7\u4f60\u6c42\u51fa\u5f97\u5230\u6b63\u786e\u6392\u5217\u81f3\u5c11\u9700\u8981\u8fdb\u884c\u591a\u5c11\u6b21\u4ea4\u6362\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_4","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u5360\u4e00\u884c\uff0c\u5c06\u00a03\u00d733\u00d73\u00a0\u7684\u521d\u59cb\u7f51\u683c\u63cf\u7ed8\u51fa\u6765\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u521d\u59cb\u7f51\u683c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>1 2 3 \nx 4 6 \n7 5 8 \n</code></pre> <p>\u5219\u8f93\u5165\u4e3a\uff1a<code>1 2 3 x 4 6 7 5 8</code></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_5","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c11\u4ea4\u6362\u6b21\u6570\u3002</p> <p>\u5982\u679c\u4e0d\u5b58\u5728\u89e3\u51b3\u65b9\u6848\uff0c\u5219\u8f93\u51fa\u00a0\u22121\u22121\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_6","title":"\u8f93\u5165\u6837\u4f8b\uff1a","text":"<pre><code>2 3 4 1 5 x 7 6 8\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_7","title":"\u8f93\u51fa\u6837\u4f8b","text":"<pre><code>19\n</code></pre> <p>1\u3001\u9898\u76ee\u7684\u76ee\u6807 ![[Pasted image 20240104094624.png]] \u6c42\u6700\u5c0f\u6b65\u6570 -&gt; \u7528 BFS 2\u3001\u79fb\u52a8\u60c5\u51b5 ![[Pasted image 20240104094637.png]]</p> <p>\u79fb\u52a8\u65b9\u5f0f\uff1a![[Pasted image 20240104094709.png]] \u8f6c\u4ee5\u540e\uff1aa = x + dx[i], b = y + dy[i]. \u601d\u60f3\uff1a\u6bcf\u4e00\u79cd\u60c5\u51b5\u4f5c\u4e3a 1 \u4e2a\u8282\u70b9\uff0c\u76ee\u6807\u60c5\u51b5\u5373\u4e3a\u7ec8\u70b9 \u4ece\u521d\u59cb\u72b6\u51b5\u79fb\u52a8\u5230\u76ee\u6807\u60c5\u51b5 \u2014&gt; \u6c42\u6700\u77ed\u8def 3\u3001\u95ee\u9898 \u7b2c\u4e00\u70b9\uff1a\u600e\u4e48\u8868\u793a\u4e00\u79cd\u60c5\u51b5\u4f7f\u5176\u80fd\u4f5c\u4e3a\u8282\u70b9\uff1f</p> <p>\u7b2c\u4e8c\u70b9\uff1a\u5982\u4f55\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u72b6\u6001\u7684\u201c\u8ddd\u79bb\u201d\uff08\u5373\u9700\u8981\u79fb\u52a8\u7684\u6b21\u6570\uff09\uff1f</p> <p>\u7b2c\u4e09\u70b9\uff1a\u961f\u5217\u600e\u4e48\u5b9a\u4e49\uff0cdist \u6570\u7ec4\u600e\u4e48\u5b9a\u4e49\uff1f</p> <p>4\u3001\u89e3\u51b3\u65b9\u6848</p> <p>\u5c06 \u201c3*3 \u77e9\u9635\u201d \u8f6c\u5316\u4e3a \u201c\u5b57\u7b26\u4e32\u201d</p> <p>\u5982\uff1a \u200b![[Pasted image 20240104094719.png]]</p> <p>\u6240\u4ee5\uff1a</p> <p>\u961f\u5217\u53ef\u4ee5\u7528 queue //\u76f4\u63a5\u5b58\u8f6c\u5316\u540e\u7684\u5b57\u7b26\u4e32 dist \u6570\u7ec4\u7528 unordered_map //\u5c06\u5b57\u7b26\u4e32\u548c\u6570\u5b57\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u5b57\u7b26\u4e32\u8868\u793a\u72b6\u6001\uff0c\u6570\u5b57\u8868\u793a\u8ddd\u79bb\\ 5\u3001\u77e9\u9635\u4e0e\u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u65b9\u5f0f ![[Pasted image 20240104094910.png]] <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;unordered_map&gt;\n\nUsing namespace std;\n\nInt bfs (string start)\n{\n    //\u5b9a\u4e49\u76ee\u6807\u72b6\u6001\n    String end = \"12345678 x\";\n    //\u5b9a\u4e49\u961f\u5217\u548c dist \u6570\u7ec4\n    queue&lt;string&gt; q;\n    unordered_map&lt;string, int&gt; d;\n    //\u521d\u59cb\u5316\u961f\u5217\u548c dist \u6570\u7ec4\n    q.push (start);\n    D[start] = 0;\n    //\u8f6c\u79fb\u65b9\u5f0f\n    Int dx[4] = {1, -1, 0, 0}, dy[4] = {0, 0, 1, -1};\n\n    while (q.size ())\n    {\n        auto t = q.front ();\n        q.pop ();\n        //\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u662f\u6700\u7ec8\u72b6\u6001\u5219\u8fd4\u56de\u8ddd\u79bb\n        Int distance = d[t];\n        If (t == end) return distance;\n        //\u67e5\u8be2 x \u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4e0b\u6807\uff0c\u7136\u540e\u8f6c\u6362\u4e3a\u5728\u77e9\u9635\u4e2d\u7684\u5750\u6807\n        int k = t.find ('x');\n        Int x = k / 3, y = k % 3;\n\n        For (int i = 0; i &lt; 4; i++)\n        {\n            //\u6c42\u8f6c\u79fb\u540e x \u7684\u5750\u6807\n            Int a = x + dx[i], b = y + dy[i];\n            //\u5f53\u524d\u5750\u6807\u6ca1\u6709\u8d8a\u754c\n            if (a &gt;= 0 &amp;&amp; a &lt; 3 &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; 3)\n            {\n                //\u8f6c\u79fb x\n                Swap (t[k], t[a * 3 + b]);\n                //\u5982\u679c\u5f53\u524d\u72b6\u6001\u662f\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u8bb0\u5f55\u8ddd\u79bb\uff0c\u5165\u961f\n                if (!d.count (t))\n                {\n                    D[t] = distance + 1;\n                    q.push (t);\n                }\n                //\u8fd8\u539f\u72b6\u6001\uff0c\u4e3a\u4e0b\u4e00\u79cd\u8f6c\u6362\u60c5\u51b5\u505a\u51c6\u5907\n                Swap (t[k], t[a * 3 + b]);\n            }\n        }\n    }\n    //\u65e0\u6cd5\u8f6c\u6362\u5230\u76ee\u6807\u72b6\u6001\uff0c\u8fd4\u56de-1\n    Return -1;\n}\n\nInt main ()\n{\n    String c, start;\n    //\u8f93\u5165\u8d77\u59cb\u72b6\u6001\n    For (int i = 0; i &lt; 9; i++)\n    {\n        Cin &gt;&gt; c;\n        Start += c;\n    }\n\n    Cout &lt;&lt; bfs (start) &lt;&lt; endl;\n\n    Return 0;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/BFS/#_8","title":"844 \u8d70\u8ff7\u5bab","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/DFS/","title":"695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/DFS/#_1","title":"695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/","title":"\u5168\u6392\u5217\u95ee\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6309\u7167\u5b57\u5178\u5e8f\u8f93\u51fa\u81ea\u7136\u6570 \\(1\\) \u5230 \\(n\\) \u6240\u6709\u4e0d\u91cd\u590d\u7684\u6392\u5217\uff0c\u5373 \\(n\\) \u7684\u5168\u6392\u5217\uff0c\u8981\u6c42\u6240\u4ea7\u751f\u7684\u4efb\u4e00\u6570\u5b57\u5e8f\u5217\u4e2d\u4e0d\u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u7684\u6570\u5b57\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6574\u6570 \\(n\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u7531 \\(1 \\sim n\\) \u7ec4\u6210\u7684\u6240\u6709\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u5e8f\u5217\uff0c\u6bcf\u884c\u4e00\u4e2a\u5e8f\u5217\u3002</p> <p>\u6bcf\u4e2a\u6570\u5b57\u4fdd\u7559 \\(5\\) \u4e2a\u573a\u5bbd\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>1    2    3\n    1    3    2\n    2    1    3\n    2    3    1\n    3    1    2\n    3    2    1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/#_5","title":"\u63d0\u793a","text":"<p>\\(1 \\leq n \\leq 9\\)\u3002</p> <pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\nint flag[100],ans[110];\nint n;\nvoid print(){\n//\u8f93\u51fa\u5df2\u7ecf\u9009\u62e9\u597d\u7684\u6392\u5217\n    for(int i=1;i&lt;=n;i++)\n        printf(\"%5d\",ans[i]);\n    puts(\"\");\n\n}\nvoid search(int k){\n    if(k==n){\n        print();\n        return;\n    }else{\n        for(int i=1;i&lt;=n;i++){\n            if(!flag[i]){\n                flag[i]=1,ans[k+1]=i;\n                search(k+1);\n                flag[i]=0;\n            }\n        }\n    }\n}\nint main(){\n    cin&gt;&gt;n;\n    search(0);\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA%E7%9A%84%E6%A8%A1%E6%9D%BF/","title":"\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA%E7%9A%84%E6%A8%A1%E6%9D%BF/#_2","title":"\u90bb\u63a5\u77e9\u9635","text":"<p>\u5b58\u50a8\u7ed3\u6784\u5982\u679c\u9009\u62e9\u90bb\u63a5\u77e9\u9635 A[a][b]\u8868\u793a a \u548c b \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA%E7%9A%84%E6%A8%A1%E6%9D%BF/#_3","title":"\u90bb\u63a5\u8868","text":"<p>\u9996\u5148\u5047\u8bbe\u6211\u4eec\u6709 n \u4e2a\u70b9 (n &lt;= N)\uff0cm \u6761\u8fb9 (m &lt;= M)\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9 u, \u9700\u8981\u8bb0\u5f55\u90bb\u8fb9\u7684\u54ea\u4e9b\u4fe1\u606f\u3002 \u8fd9\u4e9b\u4fe1\u606f\u5e94\u8be5\u5305\u62ec\u8fd9\u6761\u90bb\u8fb9\u7684\u7ec8\u70b9\uff0c\u6743\u91cd\uff0c\u4ee5\u53ca\u4e0b\u4e00\u6761\u90bb\u8fb9\u7684\u7f16\u53f7\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0d\u9700\u8981\u8bb0\u5f55\u90bb\u8fb9\u7684\u8d77\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u65f6\u5019\u90fd\u662f\u7ed9\u51fa\u8d77\u70b9\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a struct \u6765\u8868\u793a\u90bb\u8fb9: <pre><code>struct Edge\n{\n    int eid;    // \u8be5\u6761\u8fb9\u7684\u7f16\u53f7\n    int e;      // \u8be5\u6761\u8fb9\u7684\u7ec8\u70b9\n    int w;      // \u8be5\u6761\u8fb9\u7684\u6743\u91cd\n    int nxt;    // \u4e0b\u4e00\u6761\u90bb\u8fb9\u7684\u7f16\u53f7\n};\n</code></pre> \u5982\u679c\u6211\u4eec\u7528\u4e0a\u9762\u7684\u6570\u636e\u7ed3\u6784\u6765\u8bb0\u5f55\u90bb\u8fb9\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5b9a\u4e49\u5982\u4e0b\u53d8\u91cf\u6765\u8868\u793a\u90bb\u63a5\u8868\uff1a <pre><code>// \u6ce8\u610f N \u548c M \u7684\u533a\u522b\nint h[N];\nEdge edges[M];\nint eidx;\n</code></pre> \u7531\u4e8e\u6bcf\u6761\u8fb9\u90fd\u8bb0\u5f55\u4e86\u4e0b\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u628a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u7b2c\u4e00\u6761\u90bb\u8fb9\u7684\u7f16\u53f7\u8bb0\u5f55\u5728 h \u6570\u7ec4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u904d\u5386\u5b83\u7684\u6bcf\u4e00\u6761\u90bb\u8fb9\u4e86</p> <p>\u5982\u679c\u6211\u4eec\u628a Edge \u91cc\u7684\u4fe1\u606f\u5206\u5f00\u5b58\u5230\u4e0d\u540c\u6570\u7ec4\u91cc\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5e73\u65f6\u6211\u4eec\u770b\u5230\u7684\u53d8\u91cf\u5b9a\u4e49\uff1a</p> <p><pre><code>// \u6ce8\u610fN\u548cM\u7684\u533a\u522b\nint h[N];\nint e[M], w[M], nxt[M];  // \u8fd9\u4e09\u4e2a\u6570\u7ec4\u7b49\u4ef7\u4e8e\u4e4b\u524d\u7684Edge edges[M]\uff0c\u6ce8\u610f\u8fd9\u4e9b\u6570\u7ec4\u7684\u4e0b\u6807\u8868\u793a\u90bb\u8fb9\u7684\u7f16\u53f7\nint eidx;\n</code></pre> \\h \u6570\u7ec4\u7684\u4e0b\u6807\u4e3a\u7ed3\u70b9\u7684\u7f16\u53f7\uff0ce, w, nxt \u6570\u7ec4\u7684\u4e0b\u6807\u4e3a\u8fb9\u7684\u7f16\u53f7\uff0ceidx \u4e3a\u8fb9\u7684\u7f16\u53f7</p> <p>\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868\u5b58\u50a8\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 u \u5bf9\u5e94\u4e00\u4e2a\u5934\u8282\u70b9 h[u]\uff0c\u8bb0\u5f55\u7b2c\u4e00\u6761\u90bb\u8fb9\u7684\u7f16\u53f7\u3002 \\e, w, nxt \u6570\u7ec4\u7684\u7f16\u53f7\u548c\u5efa\u56fe\u7684\u987a\u5e8f\u6709\u5173\uff0c\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u70b9 u, \u5b83\u7684\u6240\u6709\u90bb\u8fb9\u7684\u7f16\u53f7\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u3002 \\nxt[eidx]=h[u]; h[u]=eidx; \u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u628a\u65b0\u5efa\u7684\u8fb9\u63d2\u5165\u8868\u5934\u3002(\u5148\u628a\u65b0\u5efa\u7684\u8fb9\u7684 next \u6307\u5411\u73b0\u5728\u961f\u5934\u7684 next\uff0c\u7136\u540e\u66f4\u65b0\u961f\u5934\u7684 next\uff09 \u7136\u540e\u518d eidx++, \u7ed9\u4e0b\u4e00\u6b21\u5efa\u8fb9\u4f7f\u7528</p> <p>![[Pasted image 20240419213703.png]] ![[Pasted image 20240419213711.png]] ![[Pasted image 20240419213719.png]] ![[Pasted image 20240419213731.png]] ![[Pasted image 20240419213739.png]] <pre><code>const int N = 1010, M = 1010;\n\nint h[N], e[M], w[M], nxt[M], eidx;\n\nvoid add(int u, int v, int weight)   // \u6dfb\u52a0\u6709\u5411\u8fb9 u-&gt;v, \u6743\u91cd\u4e3aweight\n{\n    e[eidx] = v;        // \u8bb0\u5f55\u8fb9\u7684\u7ec8\u70b9\n    w[eidx] = weight;   // \u8bb0\u5f55\u8fb9\u7684\u6743\u91cd\n    nxt[eidx] = h[u];   // \u5c06\u4e0b\u4e00\u6761\u8fb9\u6307\u5411\u7ed3\u70b9u\u6b64\u65f6\u7684\u7b2c\u4e00\u6761\u8fb9\n    h[u] = eidx;        // \u5c06\u7ed3\u70b9u\u7684\u7b2c\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u6539\u4e3a\u6b64\u65f6\u7684eidx\n    eidx++;             // \u9012\u589e\u8fb9\u7684\u7f16\u53f7edix, \u4e3a\u5c06\u6765\u4f7f\u7528\n}\n\nvoid iterate(int u)   // \u904d\u5386\u7ed3\u70b9u\u7684\u6240\u6709\u90bb\u8fb9\n{\n    // \u4eceu\u7684\u7b2c\u4e00\u6761\u8fb9\u5f00\u59cb\u904d\u5386\uff0c\u76f4\u5230eid==-1\u4e3a\u6b62\n    for(int eid = h[u]; eid != -1; eid = nxt[eid])\n    {\n        int v = e[eid];\n        int weight = w[eid];\n        cout &lt;&lt; u &lt;&lt; \"-&gt;\" &lt;&lt; v &lt;&lt; \", weight: \" &lt;&lt; weight &lt;&lt; endl;\n    }\n}\n\nint main()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    memset(h, -1, sizeof h);  // \u521d\u59cb\u5316h\u6570\u7ec4\u4e3a-1\n    eidx = 0;                 // \u521d\u59cb\u5316\u8fb9\u7684\u7f16\u53f7\u4e3a0\n\n    while(m--)\n    {\n        int u, v, weight;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; weight;\n        add(u, v, weight);\n    }\n\n    for(int u = 1; u &lt;= n; ++u)\n        iterate(u);\n\n    return 0;\n}\n</code></pre></p> <p>\u7b80\u800c\u8a00\u4e4b\u662f\u5934\u63d2\uff0c\u4e0d\u662f\u5c3e\u63d2</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA%E7%9A%84%E6%A8%A1%E6%9D%BF/#_4","title":"\u6811\u4e0e\u56fe\u7684\u904d\u5386","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 O (n+m)  \\n\u8868\u793a\u70b9\u6570\uff0cm \u8868\u793a\u8fb9\u6570 (1) \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u2014\u2014 \u6a21\u677f\u9898 AcWing 846. \u6811\u7684\u91cd\u5fc3 https://www.acwing.com/problem/content/848/ \u6709 dfs \u7684\u6846\u67b6\u662f <pre><code>// dfs \u6846\u67b6\nvoid dfs(int u){\n    st[u]=true; // \u6807\u8bb0\u4e00\u4e0b\uff0c\u8bb0\u5f55\u4e3a\u5df2\u7ecf\u88ab\u641c\u7d22\u8fc7\u4e86\uff0c\u4e0b\u9762\u8fdb\u884c\u641c\u7d22\u8fc7\u7a0b\n    for(int i=h[u];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!st[j]) {\n            dfs(j);\n        }\n    }\n}\n</code></pre></p> <pre><code>#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N=10010,M=N*2;\nint n;\n//h[N]\u8868\u793a\u6709N\u4e2a\u70b9\nint h[N],e[M],ne[M],idx;\nint ans=N;\nbool st[N];//\u67e5\u770b\u90a3\u4e9b\u70b9\u88ab\u904d\u5386\u8fc7\u4e86\n\n//\u63d2\u5165\u4e00\u6761a\u5230b\u7684\u8fb9\nvoid add(int a,int b)\n{\n    e[idx]=b,ne[idx]=h[a],h[a]=idx++;\n}\n\n//\u6df1\u5ea6\u4f18\u5148\u641c\u7d22dfs\nint dfs(int u)\n{\n    st[u]=true;//\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u88ab\u641c\u7d22\u8fc7\u4e86\n    int size=0,sum=0;\n    for(int i=h[u];i!=-1;i=ne[i])\n    {\n        int j=e[i];\n        if(!st[j])\n        {\n            int s=dfs(j);\n            size=max(size,s);\n            sum+=s;\n        }\n    }\n\n    size=max(size,n-sum-1);\n    ans=min(ans,size);\n\n    return sum+1;\n}\n\nint main()\n{\n    scanf(\"%d\",&amp;n);\n\n    memset(h,-1,sizeof h);\n\n    for(int i=0;i&lt;n-1;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&amp;a,&amp;b);\n        add(a,b);\n        add(b,a);\n    }\n\n    dfs(1);\n\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%91/","title":"\u3010\u6df1\u57fa16.\u4f8b7\u3011\u666e\u901a\u4e8c\u53c9\u6811\uff08\u7b80\u5316\u7248\uff09","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%91/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\uff08 \u90fd\u662f \\(10^9\\) \u4ee5\u5185\u7684\u6570\u5b57\uff09\u7684\u96c6\u5408\uff0c\u6700\u5f00\u59cb\u65f6\u96c6\u5408\u662f\u7a7a\u7684\u3002\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6b21\u6570 \\(q\\) \u4e0d\u8d85\u8fc7 \\(10^4\\)\uff1a</p> <ol> <li>\u67e5\u8be2 \\(x\\) \u6570\u7684\u6392\u540d\uff08\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 \\(+1\\)\u3002\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u5e94\u8f93\u51fa\u6700\u5c0f\u7684\u6392\u540d\uff09\u3002</li> <li>\u67e5\u8be2\u6392\u540d\u4e3a \\(x\\) \u7684\u6570\u3002</li> <li>\u6c42 \\(x\\) \u7684\u524d\u9a71\uff08\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e \\(x\\)\uff0c\u4e14\u6700\u5927\u7684\u6570\uff09\u3002\u82e5\u672a\u627e\u5230\u5219\u8f93\u51fa \\(-2147483647\\)\u3002</li> <li>\u6c42 \\(x\\) \u7684\u540e\u7ee7\uff08\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e \\(x\\)\uff0c\u4e14\u6700\u5c0f\u7684\u6570\uff09\u3002\u82e5\u672a\u627e\u5230\u5219\u8f93\u51fa \\(2147483647\\)\u3002</li> <li>\u63d2\u5165\u4e00\u4e2a\u6570 \\(x\\)\u3002</li> </ol>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%91/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 \\(q\\)\uff0c\u8868\u793a\u64cd\u4f5c\u6b21\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(q\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(op,x\\)\uff0c\u5206\u522b\u8868\u793a\u64cd\u4f5c\u5e8f\u53f7\u4ee5\u53ca\u64cd\u4f5c\u7684\u53c2\u6570 \\(x\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%91/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u6709\u82e5\u5e72\u884c\u3002\u5bf9\u4e8e\u64cd\u4f5c \\(1,2,3,4\\)\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be5\u64cd\u4f5c\u7684\u7ed3\u679c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%91/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%91/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>7\n5 1\n5 3\n5 5\n1 3\n2 2\n3 3\n4 3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%91/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2\n3\n1\n5\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/","title":"\u3010\u6df1\u57fa16.\u4f8b1\u3011\u6dd8\u6c70\u8d5b","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 \\(2^n\\)\uff08\\(n\\le7\\)\uff09\u4e2a\u56fd\u5bb6\u53c2\u52a0\u4e16\u754c\u676f\u51b3\u8d5b\u5708\u4e14\u8fdb\u5165\u6dd8\u6c70\u8d5b\u73af\u8282\u3002\u5df2\u7ecf\u77e5\u9053\u5404\u4e2a\u56fd\u5bb6\u7684\u80fd\u529b\u503c\uff0c\u4e14\u90fd\u4e0d\u76f8\u7b49\u3002\u80fd\u529b\u503c\u9ad8\u7684\u56fd\u5bb6\u548c\u80fd\u529b\u503c\u4f4e\u7684\u56fd\u5bb6\u8e22\u6bd4\u8d5b\u65f6\u9ad8\u8005\u83b7\u80dc\u30021 \u53f7\u56fd\u5bb6\u548c 2 \u53f7\u56fd\u5bb6\u8e22\u4e00\u573a\u6bd4\u8d5b\uff0c\u80dc\u8005\u664b\u7ea7\u30023 \u53f7\u56fd\u5bb6\u548c 4 \u53f7\u56fd\u5bb6\u4e5f\u8e22\u4e00\u573a\uff0c\u80dc\u8005\u664b\u7ea7\u2026\u2026\u664b\u7ea7\u540e\u7684\u56fd\u5bb6\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u7ee7\u7eed\u5b8c\u6210\u8d5b\u7a0b\uff0c\u76f4\u5230\u51b3\u51fa\u51a0\u519b\u3002\u7ed9\u51fa\u5404\u4e2a\u56fd\u5bb6\u7684\u80fd\u529b\u503c\uff0c\u8bf7\u95ee\u4e9a\u519b\u662f\u54ea\u4e2a\u56fd\u5bb6\uff1f</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u4e00\u5171 \\(2^n\\) \u4e2a\u56fd\u5bb6\u53c2\u8d5b\u3002</p> <p>\u7b2c\u4e8c\u884c \\(2^n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6574\u6570\u8868\u793a\u7f16\u53f7\u4e3a \\(i\\) \u7684\u56fd\u5bb6\u7684\u80fd\u529b\u503c\uff08\\(1\\leq i \\leq 2^n\\)\uff09\u3002</p> <p>\u6570\u636e\u4fdd\u8bc1\u4e0d\u5b58\u5728\u5e73\u5c40\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4ec5\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e9a\u519b\u56fd\u5bb6\u7684\u7f16\u53f7\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>3\n4 2 3 1 10 5 9 7\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>1\n</code></pre> <pre><code>#include&lt;iostream&gt;  \n\nusing namespace std;  \nconst int N=260;  \nint winner[N],value[N];  \nint n;  \n\nvoid dfs(int x)  \n{  \n    if(x&gt;=(1&lt;&lt;n))  \n    {  \n        return;  \n    }  \n    else{  \n        dfs(2*x);  \n        dfs(2*x+1);//\u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811  \n        int lvalue=value[2*x],rvalue=value[2*x+1];  \n        if(lvalue&gt;rvalue)  \n        {  \n            value[x]=lvalue;  \n            winner[x]=winner[2*x];  \n        }  \n        else{  \n            value[x]=rvalue;  \n            winner[x]=winner[2*x+1];  \n        }  \n    }  \n    return;  \n}  \nint main()  \n{  \n    cin&gt;&gt;n;  \n    for(int i=0;i&lt;(1&lt;&lt;n);i++)  \n    {  \n        cin&gt;&gt;value[i+(1&lt;&lt;n)];  \n        winner[i+(1&lt;&lt;n)]=i+1;//\u53f6\u5b50\u8282\u70b9\u7684\u83b7\u80dc\u65b9\u5c31\u662f\u81ea\u5df1\u56fd\u5bb6\u7684\u7f16\u53f7  \n    }  \n    dfs(1);  \n    if(value[2]&gt;value[3])  \n    {  \n        cout&lt;&lt;value[3]&lt;&lt;endl;  \n    }  \n    else {  \n        cout &lt;&lt; value[2] &lt;&lt; endl;  \n    }  \n\n    return 0;  \n}\n</code></pre> <p><pre><code>#include&lt;iostream&gt;\n#include&lt;map&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin&gt;&gt;n;\n    queue&lt;pair&lt;int,int&gt; &gt; q;    //pair\u662fstl\u4e2d\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc\u7528first\u8868\u793a\u56fd\u5bb6\u53f7\uff0csecond\u8868\u793a\u56fd\u5bb6\u5b9e\u529b\n    n=1&lt;&lt;n;\n    for(int i=1;i&lt;=n;i++){\n        int t;\n        cin&gt;&gt;t;\n        q.push(make_pair(i,t));\n    }\n\n    while(q.size()&gt;2){\n        auto x=q.front();\n        q.pop();\n        auto y=q.front();\n        q.pop();\n        if(x.second&gt;y.second){\n            q.push(x);\n        }else{\n            q.push(y);\n        }\n    }\n\n    pair&lt;int,int&gt; x,y;\n    x=q.front();\n    q.pop();\n    y=q.front();\n    q.pop();\n    if(x.second&gt;y.second)\n    {\n        cout&lt;&lt;y.first;\n    }else{\n        cout&lt;&lt;x.first;\n    }\n    return 0;\n}\n</code></pre> \u8fd9\u4e2a\u65b9\u6cd5\u5c31\u662f\u7528\u961f\u5217\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e24\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u6bd4\u8f83\u6700\u5927\u7684\u653e\u56de\u53bb\uff0c\u76f4\u5230\u5c31\u5269\u4e24\u4e2a\u5143\u7d20\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#163","title":"\u3010\u6df1\u57fa16.\u4f8b3\u3011\u4e8c\u53c9\u6811\u6df1\u5ea6","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#_4","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709\u4e00\u4e2a \\(n(n \\le 10^6)\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u3002\u7ed9\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7f16\u53f7\uff08\u5747\u4e0d\u8d85\u8fc7 \\(n\\)\uff09\uff0c\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u6839\u8282\u70b9\u7684\u7f16\u53f7\u4e3a \\(1\\)\uff09\uff0c\u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u5165 <code>0 0</code>\u3002</p> <p>\u5efa\u597d\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u8bf7\u6c42\u51fa\u5b83\u7684\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u662f\u6307\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u65f6\uff0c\u6700\u591a\u7ecf\u8fc7\u4e86\u51e0\u5c42\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#_5","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u7ed3\u70b9\u6570\u3002</p> <p>\u4e4b\u540e \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(l\\)\u3001\\(r\\)\uff0c\u5206\u522b\u8868\u793a\u7ed3\u70b9 \\(i\\) \u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u7f16\u53f7\u3002\u82e5 \\(l=0\\) \u5219\u8868\u793a\u65e0\u5de6\u5b50\u7ed3\u70b9\uff0c\\(r=0\\) \u540c\u7406\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#_6","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u7ed3\u70b9\u6df1\u5ea6\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#1_3","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#1_4","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>7\n2 7\n3 6\n4 5\n0 0\n0 0\n0 0\n0 0\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%BB%BA%E7%AB%8B/#1_5","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<p><pre><code>4\n</code></pre> \u5982\u679c\u8fd8\u662f\u7528\u6570\u7ec4\u5b58\u50a8\u7684\u8bdd\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5b9a\u4e49\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff0c <pre><code>#include&lt;iostream&gt;  \nusing namespace std;  \nconst int N=2e5+7;  \nint n;  \nstruct Node{  \n    int left,right;  \n}pNode[N];  \n\nint dfs(int x)  \n{  \n    if(x==0) return 0;  \n    return max(dfs(pNode[x].left),dfs(pNode[x].right))+1;  \n}  \nint main()  \n{  \n    cin&gt;&gt;n;  \n    for(int i=1;i&lt;=n;i++)  \n    {  \n        cin&gt;&gt;pNode[i].left;  \n        cin&gt;&gt;pNode[i].right;  \n    }  \n    cout&lt;&lt;dfs(1);  \n    return 0;  \n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/","title":"\u3010\u6df1\u57fa16.\u4f8b7\u3011\u666e\u901a\u4e8c\u53c9\u6811\uff08\u7b80\u5316\u7248\uff09","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\uff08 \u90fd\u662f \\(10^9\\) \u4ee5\u5185\u7684\u6570\u5b57\uff09\u7684\u96c6\u5408\uff0c\u6700\u5f00\u59cb\u65f6\u96c6\u5408\u662f\u7a7a\u7684\u3002\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6b21\u6570 \\(q\\) \u4e0d\u8d85\u8fc7 \\(10^4\\)\uff1a</p> <ol> <li>\u67e5\u8be2 \\(x\\) \u6570\u7684\u6392\u540d\uff08\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 \\(+1\\)\u3002\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u5e94\u8f93\u51fa\u6700\u5c0f\u7684\u6392\u540d\uff09\u3002</li> <li>\u67e5\u8be2\u6392\u540d\u4e3a \\(x\\) \u7684\u6570\u3002</li> <li>\u6c42 \\(x\\) \u7684\u524d\u9a71\uff08\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e \\(x\\)\uff0c\u4e14\u6700\u5927\u7684\u6570\uff09\u3002\u82e5\u672a\u627e\u5230\u5219\u8f93\u51fa \\(-2147483647\\)\u3002</li> <li>\u6c42 \\(x\\) \u7684\u540e\u7ee7\uff08\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e \\(x\\)\uff0c\u4e14\u6700\u5c0f\u7684\u6570\uff09\u3002\u82e5\u672a\u627e\u5230\u5219\u8f93\u51fa \\(2147483647\\)\u3002</li> <li>\u63d2\u5165\u4e00\u4e2a\u6570 \\(x\\)\u3002</li> </ol>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 \\(q\\)\uff0c\u8868\u793a\u64cd\u4f5c\u6b21\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(q\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(op,x\\)\uff0c\u5206\u522b\u8868\u793a\u64cd\u4f5c\u5e8f\u53f7\u4ee5\u53ca\u64cd\u4f5c\u7684\u53c2\u6570 \\(x\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u6709\u82e5\u5e72\u884c\u3002\u5bf9\u4e8e\u64cd\u4f5c \\(1,2,3,4\\)\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be5\u64cd\u4f5c\u7684\u7ed3\u679c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>7\n5 1\n5 3\n5 5\n1 3\n2 2\n3 3\n4 3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2\n3\n1\n5\n</code></pre> <pre><code>#include&lt;iostream&gt;  \n#include&lt;cstdio&gt;  \n#define re register  \nusing namespace std;  \nconst int INF=0x7fffffff;  \nint cont;  \nstruct node{  \n    int val,siz,cnt,ls,rs;  \n}tree[1000010];  \nint n,opt,xx;  \ninline void add(int x,int v)  \n{  \n    tree[x].siz++;  \n    if(tree[x].val==v){  \n        tree[x].cnt++;  \n        return ;  \n    }  \n    if(tree[x].val&gt;v){  \n        if(tree[x].ls!=0)  \n            add(tree[x].ls,v);  \n        else{  \n            cont++;  \n            tree[cont].val=v;  \n            tree[cont].siz=tree[cont].cnt=1;  \n            tree[x].ls=cont;  \n        }  \n    }  \n    else{  \n        if(tree[x].rs!=0)  \n            add(tree[x].rs,v);  \n        else{  \n            cont++;  \n            tree[cont].val=v;  \n            tree[cont].siz=tree[cont].cnt=1;  \n            tree[x].rs=cont;  \n        }  \n    }  \n}  \nint queryfr(int x, int val, int ans) {  \n    if (tree[x].val&gt;=val)  \n    {  \n        if (tree[x].ls==0)  \n            return ans;  \n        else  \n            return queryfr(tree[x].ls,val,ans);  \n    }  \n    else  \n    {  \n        if (tree[x].rs==0)  \n            return tree[x].val;  \n        return queryfr(tree[x].rs,val,tree[x].val);  \n    }  \n}  \nint queryne(int x, int val, int ans) {  \n    if (tree[x].val&lt;=val)  \n    {  \n        if (tree[x].rs==0)  \n            return ans;  \n        else  \n            return queryne(tree[x].rs,val,ans);  \n    }  \n    else  \n    {  \n        if (tree[x].ls==0)  \n            return tree[x].val;  \n        return queryne(tree[x].ls,val,tree[x].val);  \n    }  \n}  \nint queryrk(int x,int rk)  \n{  \n    if(x==0) return INF;  \n    if(tree[tree[x].ls].siz&gt;=rk)  \n        return queryrk(tree[x].ls,rk);  \n    if(tree[tree[x].ls].siz+tree[x].cnt&gt;=rk)  \n        return tree[x].val;  \n    return queryrk(tree[x].rs,rk-tree[tree[x].ls].siz-tree[x].cnt);  \n}  \nint queryval(int x,int val)  \n{  \n    if(x==0) return 0;  \n    if(val==tree[x].val) return tree[tree[x].ls].siz;  \n    if(val&lt;tree[x].val) return queryval(tree[x].ls,val);  \n    return queryval(tree[x].rs,val)+tree[tree[x].ls].siz+tree[x].cnt;  \n}  \ninline int read()  \n{  \n    re int r=0;  \n    re char ch=getchar();  \n    while(ch&lt;'0'||ch&gt;'9')  \n        ch=getchar();  \n    while(ch&gt;='0'&amp;&amp;ch&lt;='9'){  \n        r=(r&lt;&lt;3)+(r&lt;&lt;1)+(ch^48);  \n        ch=getchar();  \n    }  \n    return r;  \n}  \nsigned main()  \n{  \n    n=read();  \n    while(n--){  \n        opt=read();xx=read();  \n        if(opt==1) printf(\"%d\\n\",queryval(1,xx)+1);  \n        else if(opt==2) printf(\"%d\\n\",queryrk(1,xx));  \n        else if(opt==3) printf(\"%d\\n\",queryfr(1,xx,-INF));  \n        else if(opt==4) printf(\"%d\\n\",queryne(1,xx,INF));  \n        else{  \n            if(cont==0){  \n                cont++;  \n                tree[cont].cnt=tree[cont].siz=1;  \n                tree[cont].val=xx;  \n            }  \n            else add(1,xx);  \n        }  \n    }  \n    return 0;  \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u4e8c\u53c9\u6811\u7684\u904d\u5386\u5c31\u662f\u6307\u6cbf\u7740\u67d0\u4e00\u6761\u641c\u7d22\u8def\u5f84\uff0c\u5bf9\u7740\u6240\u6709\u7684\u8282\u70b9\u8fdb\u884c\u6709\u4e14\u4ec5\u6709\u4e00\u6b21\u7684\u8bbf\u95ee\uff0c\u65e2\u8981\u6c42\u4e0d\u9057\u6f0f\uff0c\u4e0d\u91cd\u590d\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_1","title":"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u904d\u5386","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709\u4e00\u4e2a \\(n(n \\le 10^6)\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u3002\u7ed9\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7f16\u53f7\uff08\u5747\u4e0d\u8d85\u8fc7 \\(n\\)\uff09\uff0c\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u6839\u8282\u70b9\u7684\u7f16\u53f7\u4e3a \\(1\\)\uff09\uff0c\u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u5165 <code>0 0</code>\u3002</p> <p>\u5efa\u597d\u6811\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u4f9d\u6b21\u6c42\u51fa\u5b83\u7684\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u5217\u904d\u5386\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u7ed3\u70b9\u6570\u3002</p> <p>\u4e4b\u540e \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(l\\)\u3001\\(r\\)\uff0c\u5206\u522b\u8868\u793a\u7ed3\u70b9 \\(i\\) \u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u7f16\u53f7\u3002\u82e5 \\(l=0\\) \u5219\u8868\u793a\u65e0\u5de6\u5b50\u7ed3\u70b9\uff0c\\(r=0\\) \u540c\u7406\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e09\u884c\uff0c\u6bcf\u884c \\(n\\) \u4e2a\u6570\u5b57\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e8c\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e09\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>7\n2 7\n4 0\n0 0\n0 3\n0 0\n0 5\n6 0\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<p><pre><code>1 2 4 3 7 6 5\n4 3 2 1 6 5 7\n3 4 2 5 6 7 1\n</code></pre> \u56de\u5934\u8865\u4e00\u4e0b\u975e\u9012\u5f52\u7684\u5199\u6cd5</p> <pre><code>#include&lt;iostream&gt;  \nusing namespace std;  \nconst int N=2e5+7;  \nint n;  \nstruct Node{  \n    int left,right;  \n}pNode[N];  \n\nvoid pre_order(int x)  \n{  \n    cout&lt;&lt;x&lt;&lt;\" \";  \n    if(pNode[x].left) pre_order(pNode[x].left);  \n    if(pNode[x].right) pre_order((pNode[x].right));  \n}  \nvoid mid_order(int x)  \n{  \n    if(pNode[x].left) mid_order(pNode[x].left);  \n    cout&lt;&lt;x&lt;&lt;\" \";  \n    if(pNode[x].right) mid_order(pNode[x].right);  \n}  \nvoid post_order(int x)  \n{  \n    if(pNode[x].left) post_order(pNode[x].left);  \n    if(pNode[x].right) post_order((pNode[x].right));  \n    cout&lt;&lt;x&lt;&lt;\" \";  \n}  \nint main()  \n{  \n    cin&gt;&gt;n;  \n    for(int i=1;i&lt;=n;i++)  \n    {  \n        cin&gt;&gt;pNode[i].left;  \n        cin&gt;&gt;pNode[i].right;  \n    }  \n    pre_order(1);  \n    cout&lt;&lt;endl;  \n    mid_order(1);  \n    cout&lt;&lt;endl;  \n    post_order(1);  \n    cout&lt;&lt;endl;  \n    return 0;  \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#usaco34-american-heritage","title":"[USACO3.4] \u7f8e\u56fd\u8840\u7edf American Heritage","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_5","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u519c\u592b\u7ea6\u7ff0\u975e\u5e38\u8ba4\u771f\u5730\u5bf9\u5f85\u4ed6\u7684\u5976\u725b\u4eec\u7684\u8840\u7edf\u3002\u7136\u800c\u4ed6\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u4f18\u79c0\u7684\u8bb0\u5e10\u5458\u3002\u4ed6\u628a\u4ed6\u7684\u5976\u725b \u4eec\u7684\u5bb6\u8c31\u4f5c\u6210\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u628a\u4e8c\u53c9\u6811\u4ee5\u66f4\u7ebf\u6027\u7684\u201c\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u201d\u548c\u201c\u6811\u7684\u524d\u5e8f\u904d\u5386\u201d\u7684\u7b26\u53f7\u52a0\u4ee5\u8bb0\u5f55\u800c \u4e0d\u662f\u7528\u56fe\u5f62\u7684\u65b9\u6cd5\u3002</p> <p>\u4f60\u7684\u4efb\u52a1\u662f\u5728\u88ab\u7ed9\u4e88\u5976\u725b\u5bb6\u8c31\u7684\u201c\u6811\u4e2d\u5e8f\u904d\u5386\u201d\u548c\u201c\u6811\u524d\u5e8f\u904d\u5386\u201d\u7684\u7b26\u53f7\u540e\uff0c\u521b\u5efa\u5976\u725b\u5bb6\u8c31\u7684\u201c\u6811\u7684 \u540e\u5e8f\u904d\u5386\u201d\u7684\u7b26\u53f7\u3002\u6bcf\u4e00\u5934\u5976\u725b\u7684\u59d3\u540d\u88ab\u8bd1\u4e3a\u4e00\u4e2a\u552f\u4e00\u7684\u5b57\u6bcd\u3002\uff08\u4f60\u53ef\u80fd\u5df2\u7ecf\u77e5\u9053\u4f60\u53ef\u4ee5\u5728\u77e5\u9053\u6811\u7684\u4e24 \u79cd\u904d\u5386\u4ee5\u540e\u53ef\u4ee5\u7ecf\u5e38\u5730\u91cd\u5efa\u8fd9\u68f5\u6811\u3002\uff09\u663e\u7136\uff0c\u8fd9\u91cc\u7684\u6811\u4e0d\u4f1a\u6709\u591a\u4e8e \\(26\\) \u4e2a\u7684\u9876\u70b9\u3002</p> <p>\u8fd9\u662f\u5728\u6837\u4f8b\u8f93\u5165\u548c\u6837\u4f8b\u8f93\u51fa\u4e2d\u7684\u6811\u7684\u56fe\u5f62\u8868\u8fbe\u65b9\u5f0f\uff1a</p> <pre><code>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 C\n\u3000\u3000\u3000\u3000\u3000\u3000   /  \\\n\u3000\u3000\u3000\u3000\u3000\u3000  /\u3000\u3000\\\n\u3000\u3000\u3000\u3000\u3000\u3000 B\u3000\u3000  G\n\u3000\u3000\u3000\u3000\u3000\u3000/ \\\u3000\u3000/\n\u3000\u3000\u3000\u3000   A   D  H\n\u3000\u3000\u3000\u3000\u3000\u3000  / \\\n\u3000\u3000\u3000\u3000\u3000\u3000 E   F\n</code></pre> <p>\u9644\u6ce8\uff1a</p> <ul> <li>\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u662f\u6309\u7167\u5de6\u5b50\u6811\uff0c\u6839\uff0c\u53f3\u5b50\u6811\u7684\u987a\u5e8f\u8bbf\u95ee\u8282\u70b9\uff1b</li> <li>\u6811\u7684\u524d\u5e8f\u904d\u5386\u662f\u6309\u7167\u6839\uff0c\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u7684\u987a\u5e8f\u8bbf\u95ee\u8282\u70b9\uff1b</li> <li>\u6811\u7684\u540e\u5e8f\u904d\u5386\u662f\u6309\u7167\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\uff0c\u6839\u7684\u987a\u5e8f\u8bbf\u95ee\u8282\u70b9\u3002</li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_6","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u8be5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u8be5\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_7","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5355\u72ec\u7684\u4e00\u884c\u8868\u793a\u8be5\u6811\u7684\u540e\u5e8f\u904d\u5386\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#1_3","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#1_4","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>ABEDFCHG\nCBADEFGH\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#1_5","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>AEFDBHGC\n</code></pre> <pre><code>#include&lt;string&gt;  \n#include&lt;cstring&gt;  \n#include&lt;iostream&gt;  \n#include&lt;cstdio&gt;  \nusing namespace std;  \nstring pre,inor;  \nvoid work(string pre,string inor)  \n{  \n    if(pre.empty())return;//\u5982\u679c\u5e8f\u5217\u7a7a\u4e86\uff0c\u5c31\u6ca1\u5fc5\u8981\u7ee7\u7eed\u4e86  \n    char root=pre[0];  \n    //\u53d6\u5230\u524d\u5e8f\u5e8f\u5217\u7684\u9996\u5b57\u6bcd\uff0c\u5373\u6839\u8282\u70b9  \n    int k=inor.find(root);  \n    //\u627e\u5230\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u6839\u8282\u70b9\u7684\u4f4d\u7f6e  \n    pre.erase(pre.begin());  \n    //\u5220\u53bb\u524d\u5e8f\u5e8f\u5217\u4e2d\u7684\u6839\u8282\u70b9  \n    string leftpre=pre.substr(0,k);  \n    //\u4ece0\u5f00\u59cb\u5207\u5272k\u4e2a  \n    string rightpre=pre.substr(k);  \n    //\u4ecek\u5f00\u59cb\u5207\u5272\u5230\u6700\u540e  \n    string leftinor=inor.substr(0,k);  \n    //\u4ece0\u5f00\u59cb\u5207\u5272k\u4e2a  \n    string rightinor=inor.substr(k+1);  \n    //\u4ecek+1\u5f00\u59cb\u5207\u5272\u5230\u6700\u540e  \n    work(leftpre,leftinor);  \n    work(rightpre,rightinor);  \n    printf(\"%c\",root);  \n    //\u56e0\u4e3a\u8981\u8f93\u51fa\u540e\u5e8f\u5e8f\u5217\uff0c\u6240\u4ee5\u662f\u5de6\u53f3\u6839  \n    //\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u53f3\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9  \n}  \nint main()  \n{  \n    cin&gt;&gt;inor&gt;&gt;pre;  \n    work(pre,inor);  \n    putchar('\\n');  \n    return 0;  \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_8","title":"\u4e8c\u53c9\u6811\u7684\u5c42\u7ea7\u904d\u5386","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        vector&lt;vector&lt;int&gt;&gt; ret;\n        if (!root) {\n            return ret;\n        }\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            int currentlevel = q.size();\n            ret.push_back(vector&lt;int&gt;());\n            for (int i = 1; i &lt;= currentlevel; i++) {\n                auto node = q.front();\n                ret.back().push_back(node-&gt;val);\n                q.pop();\n                if (node-&gt;left)\n                    q.push(node-&gt;left);\n                if (node-&gt;right)\n                    q.push(node-&gt;right);\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_9","title":"\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"<p>\u9012\u5f52\u89e3\u6cd5 <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\n    vector&lt;int&gt; ans;\n\n    void dfs(TreeNode* root, int depth) {\n        if (root == nullptr) {\n            return;\n        }\n        if (depth == ans.size()) {\n            ans.push_back(root-&gt;val);\n        }\n        dfs(root-&gt;right, depth + 1);\n        dfs(root-&gt;left, depth + 1);\n    }\n\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        dfs(root,0);\n        return ans;\n    }\n};\n</code></pre></p> <p>\u5c42\u6b21\u904d\u5386 <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        vector&lt;int&gt; res;\n        if (!root) {\n            return res;\n        }\n\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            int currentlevesize = q.size();\n            for (int i = 1; i &lt;= currentlevesize; i++) {\n                auto node = q.front();\n                q.pop();\n                if (i == currentlevesize) {\n                    res.push_back(node-&gt;val);\n                }\n                if (node-&gt;left) {\n                    q.push(node-&gt;left);\n                }\n\n                if (node-&gt;right) {\n                    q.push(node-&gt;right);\n                }\n\n            }\n        }\n        return res;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#_10","title":"\u4e8c\u53c9\u6811\u5c42\u7684\u5e73\u5747\u503c","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;double&gt; averageOfLevels(TreeNode* root) {\n        vector&lt;double&gt; ans;\n        if (!root) {\n            return ans;\n        }\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            double sum = 0;\n            double currentlevelsize = q.size();\n            for (double i = 1; i &lt;= currentlevelsize; i++) {\n                auto node = q.front();\n                q.pop();\n                sum += (double)node-&gt;val;\n                if (node-&gt;left)\n                    q.push(node-&gt;left);\n                if (node-&gt;right)\n                    q.push(node-&gt;right);\n            }\n            ans.push_back(sum * 1.0 / currentlevelsize);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/#n","title":"N\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(Node* root) {\n        if (!root) {\n            return {};\n        }\n\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        queue&lt;Node*&gt; q;\n        q.push(root);\n\n        while (!q.empty()) {\n            int cnt = q.size();\n            vector&lt;int&gt; level;\n            for (int i = 0; i &lt; cnt; ++i) {\n                Node* cur = q.front();\n                q.pop();\n                level.push_back(cur-&gt;val);\n                for (Node* child: cur-&gt;children) {\n                    q.push(child);\n                }\n            }\n            ans.push_back(move(level));\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A9%E7%94%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E8%A7%A3%E9%A2%98/","title":"\u4e8c\u53c9\u6811\u7684\u5c42\u7ea7\u904d\u5386","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        vector&lt;vector&lt;int&gt;&gt; ret;\n        if (!root) {\n            return ret;\n        }\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            int currentlevel = q.size();\n            ret.push_back(vector&lt;int&gt;());\n            for (int i = 1; i &lt;= currentlevel; i++) {\n                auto node = q.front();\n                ret.back().push_back(node-&gt;val);\n                q.pop();\n                if (node-&gt;left)\n                    q.push(node-&gt;left);\n                if (node-&gt;right)\n                    q.push(node-&gt;right);\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A9%E7%94%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E8%A7%A3%E9%A2%98/#_2","title":"\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"<p>\u9012\u5f52\u89e3\u6cd5 <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\n    vector&lt;int&gt; ans;\n\n    void dfs(TreeNode* root, int depth) {\n        if (root == nullptr) {\n            return;\n        }\n        if (depth == ans.size()) {\n            ans.push_back(root-&gt;val);\n        }\n        dfs(root-&gt;right, depth + 1);\n        dfs(root-&gt;left, depth + 1);\n    }\n\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        dfs(root,0);\n        return ans;\n    }\n};\n</code></pre></p> <p>\u5c42\u6b21\u904d\u5386 <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        vector&lt;int&gt; res;\n        if (!root) {\n            return res;\n        }\n\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            int currentlevesize = q.size();\n            for (int i = 1; i &lt;= currentlevesize; i++) {\n                auto node = q.front();\n                q.pop();\n                if (i == currentlevesize) {\n                    res.push_back(node-&gt;val);\n                }\n                if (node-&gt;left) {\n                    q.push(node-&gt;left);\n                }\n\n                if (node-&gt;right) {\n                    q.push(node-&gt;right);\n                }\n\n            }\n        }\n        return res;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A9%E7%94%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E8%A7%A3%E9%A2%98/#_3","title":"\u4e8c\u53c9\u6811\u5c42\u7684\u5e73\u5747\u503c","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;double&gt; averageOfLevels(TreeNode* root) {\n        vector&lt;double&gt; ans;\n        if (!root) {\n            return ans;\n        }\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            double sum = 0;\n            double currentlevelsize = q.size();\n            for (double i = 1; i &lt;= currentlevelsize; i++) {\n                auto node = q.front();\n                q.pop();\n                sum += (double)node-&gt;val;\n                if (node-&gt;left)\n                    q.push(node-&gt;left);\n                if (node-&gt;right)\n                    q.push(node-&gt;right);\n            }\n            ans.push_back(sum * 1.0 / currentlevelsize);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%88%A9%E7%94%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E8%A7%A3%E9%A2%98/#n","title":"N\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(Node* root) {\n        if (!root) {\n            return {};\n        }\n\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        queue&lt;Node*&gt; q;\n        q.push(root);\n\n        while (!q.empty()) {\n            int cnt = q.size();\n            vector&lt;int&gt; level;\n            for (int i = 0; i &lt; cnt; ++i) {\n                Node* cur = q.front();\n                q.pop();\n                level.push_back(cur-&gt;val);\n                for (Node* child: cur-&gt;children) {\n                    q.push(child);\n                }\n            }\n            ans.push_back(move(level));\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B7%A6%E5%AD%90%E5%8F%B6%E4%B9%8B%E5%92%8C/","title":"\u5de6\u5b50\u53f6\u4e4b\u548c","text":"<p>\u5c42\u6b21\u904d\u5386 <pre><code>class Solution {\npublic:\n    bool isLeafNode(TreeNode* node) {\n        return !node-&gt;left &amp;&amp; !node-&gt;right;\n    }\n\n    int sumOfLeftLeaves(TreeNode* root) {\n        if (!root) {\n            return 0;\n        }\n\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        int ans = 0;\n        while (!q.empty()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node-&gt;left) {\n                if (isLeafNode(node-&gt;left)) {\n                    ans += node-&gt;left-&gt;val;\n                }\n                else {\n                    q.push(node-&gt;left);\n                }\n            }\n            if (node-&gt;right) {\n                if (!isLeafNode(node-&gt;right)) {\n                    q.push(node-&gt;right);\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n\u6df1\u5ea6\u4f18\u5148\u904d\u5386\n```cpp\nclass Solution {\npublic:\n    int sumOfLeftLeaves(TreeNode* root) {\n        if (root == NULL) return 0;\n        if (root-&gt;left == NULL &amp;&amp; root-&gt;right== NULL) return 0;\n\n        int leftValue = sumOfLeftLeaves(root-&gt;left);    // \u5de6\n        if (root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right) { // \u5de6\u5b50\u6811\u5c31\u662f\u4e00\u4e2a\u5de6\u53f6\u5b50\u7684\u60c5\u51b5\n            leftValue = root-&gt;left-&gt;val;\n        }\n        int rightValue = sumOfLeftLeaves(root-&gt;right);  // \u53f3\n\n        int sum = leftValue + rightValue;               // \u4e2d\n        return sum;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6/","title":"\u3010\u6df1\u57fa16.\u4f8b3\u3011\u4e8c\u53c9\u6811\u6df1\u5ea6","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709\u4e00\u4e2a \\(n(n \\le 10^6)\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u3002\u7ed9\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7f16\u53f7\uff08\u5747\u4e0d\u8d85\u8fc7 \\(n\\)\uff09\uff0c\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u6839\u8282\u70b9\u7684\u7f16\u53f7\u4e3a \\(1\\)\uff09\uff0c\u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u5165 <code>0 0</code>\u3002</p> <p>\u5efa\u597d\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u8bf7\u6c42\u51fa\u5b83\u7684\u6df1\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u662f\u6307\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u65f6\uff0c\u6700\u591a\u7ecf\u8fc7\u4e86\u51e0\u5c42\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u7ed3\u70b9\u6570\u3002</p> <p>\u4e4b\u540e \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(l\\)\u3001\\(r\\)\uff0c\u5206\u522b\u8868\u793a\u7ed3\u70b9 \\(i\\) \u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u7f16\u53f7\u3002\u82e5 \\(l=0\\) \u5219\u8868\u793a\u65e0\u5de6\u5b50\u7ed3\u70b9\uff0c\\(r=0\\) \u540c\u7406\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u7ed3\u70b9\u6df1\u5ea6\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>7\n2 7\n3 6\n4 5\n0 0\n0 0\n0 0\n0 0\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>4\n</code></pre> <pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\nconst int MAXN = 1e6 + 10;\nstruct node{\n    int left,right;\n};\nnode tree[MAXN];\n\nint n, ans;\nvoid preorder(int id,int deep){\n    if(id==0)    return;\n    ans=max(ans,deep);\n    preorder(tree[id].left,deep+1);\n    preorder(tree[id].right,deep+1);\n\n}\n\nint main(){\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++){\n        cin &gt;&gt; tree[i].left &gt;&gt; tree[i].right;//\u8bfb\u5165+\u5efa\u6811\n    }\n    preorder(1,1);\n    cout&lt;&lt;ans&lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/","title":"\u54c8\u5e0c\u8868","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#_1","title":"\u662f\u4ec0\u4e48","text":"<p>\u5b58\u50a8\u6570\u636e\u7684\u5bb9\u5668</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#_2","title":"\u6709\u5565\u7528","text":"<p>\u5feb\u901f\u67e5\u627e\u67d0\u4e2a\u5143\u7d20O\uff081\uff09</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#_3","title":"\u4ec0\u4e48\u65f6\u5019\u7528","text":"<p>\u9891\u7e41\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u6570</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#_4","title":"\u600e\u4e48\u7528","text":"<p>\u7528\u6570\u7ec4\u6a21\u62df\u54c8\u5e0c\u8868\uff1a  1\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26  2.\u6570\u636e\u8303\u56f4\u5f88\u5c0f\u7684\u65f6\u5019</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#_5","title":"\u4e24\u6570\u4e4b\u548c","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0<code>nums</code>\u00a0\u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c\u00a0<code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u00a0\u548c\u4e3a\u76ee\u6807\u503c <code>target</code>\u00a0 \u7684\u90a3\u00a0\u4e24\u4e2a\u00a0\u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#n2","title":"\u66b4\u529b\u89e3\u6cd5\uff08n^2)","text":"<p>1.\u5148\u56fa\u5b9a\u5176\u4e2d\u4e00\u4e2a\u6570 2.\u4f9d\u6b21\u4e0e\u4e4b\u524d\u7684\u6570\u76f8\u52a0</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=nums.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;n;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(int j=i+1;j&lt;n;j++){\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(nums[i]+nums[j]==target){\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return {i,j};\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return {};\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#n","title":"\u54c8\u5e0c\u8868\uff08n)","text":"<p>\u6ce8\u610f\u5230\u65b9\u6cd5\u4e00\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u7684\u539f\u56e0\u662f\u5bfb\u627e target - x \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u4f18\u79c0\u7684\u65b9\u6cd5\uff0c\u80fd\u591f\u5feb\u901f\u5bfb\u627e\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u76ee\u6807\u5143\u7d20\u3002\u5982\u679c\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u5b83\u7684\u7d22\u5f15\u3002</p> <p>\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u53ef\u4ee5\u5c06\u5bfb\u627e target - x \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u4ece O(N)O(N)O(N) \u964d\u4f4e\u5230 O(1)O(1)O(1)\u3002</p> <p>\u8fd9\u6837\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a x\uff0c\u6211\u4eec\u9996\u5148\u67e5\u8be2\u54c8\u5e0c\u8868\u4e2d\u662f\u5426\u5b58\u5728 target - x\uff0c\u7136\u540e\u5c06 x \u63d2\u5165\u5230\u54c8\u5e0c\u8868\u4e2d\uff0c\u5373\u53ef\u4fdd\u8bc1\u4e0d\u4f1a\u8ba9 x \u548c\u81ea\u5df1\u5339\u914d\u3002</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 unordered_map&lt;int, int&gt; hashtable;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for (int i = 0; i &lt; nums.size(); ++i) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 auto it = hashtable.find(target - nums[i]);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (it != hashtable.end()) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return {it-&gt;second, i};\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 hashtable[nums[i]] = i;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return {};\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/#0102","title":"\u9762\u8bd5\u9898 01.02.\u00a0\u5224\u5b9a\u662f\u5426\u4e92\u4e3a\u5b57\u7b26\u91cd\u6392","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u00a0<code>s1</code>\u00a0\u548c\u00a0<code>s2</code>\uff0c\u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u786e\u5b9a\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u91cd\u65b0\u6392\u5217\u540e\uff0c\u80fd\u5426\u53d8\u6210\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165: <code>s1</code> = \"abc\", <code>s2</code> = \"bca\" \u8f93\u51fa: true </p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165: <code>s1</code> = \"abc\", <code>s2</code> = \"bad\" \u8f93\u51fa: false</p> <p>\u8bf4\u660e\uff1a</p> <ul> <li><code>0 &lt;= len(s1) &lt;= 100</code></li> <li><code>0 &lt;= len(s2) &lt;= 100</code></li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/leetcode%E7%9A%84%E5%93%88%E5%B8%8C/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","title":"1.\u4e24\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int,int&gt; hashtable;\n        for(int i=0;i&lt;nums.size();i++){\n            auto it=hashtable.find(target-nums[i]);\n            if(it!=hashtable.end())\n            {\n                return {it-&gt;second,i};\n            }\n            hashtable[nums[i]]=i;\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/leetcode%E7%9A%84%E5%93%88%E5%B8%8C/202.%E5%BF%AB%E4%B9%90%E6%95%B0/","title":"\u5feb\u4e50\u6570","text":"<p>\u9898\u76ee\u4e2d\u8bf4\u4e86\u4f1a \u65e0\u9650\u5faa\u73af\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u6c42\u548c\u7684\u8fc7\u7a0b\u4e2d\uff0csum\u4f1a\u91cd\u590d\u51fa\u73b0\uff0c\u8fd9\u5bf9\u89e3\u9898\u5f88\u91cd\u8981\uff01 \u6240\u4ee5\u8fd9\u9053\u9898\u76ee\u4f7f\u7528\u54c8\u5e0c\u6cd5\uff0c\u6765\u5224\u65ad\u8fd9\u4e2asum\u662f\u5426\u91cd\u590d\u51fa\u73b0\uff0c\u5982\u679c\u91cd\u590d\u4e86\u5c31\u662freturn false\uff0c \u5426\u5219\u4e00\u76f4\u627e\u5230sum\u4e3a1\u4e3a\u6b62\u3002</p> <p>\u5224\u65adsum\u662f\u5426\u91cd\u590d\u51fa\u73b0\u5c31\u53ef\u4ee5\u4f7f\u7528unordered_set\u3002 <pre><code>class Solution {\npublic:\n    // \u53d6\u6570\u503c\u5404\u4e2a\u4f4d\u4e0a\u7684\u5355\u6570\u4e4b\u548c\n    int getSum(int n) {\n        int sum = 0;\n        while (n) {\n            sum += (n % 10) * (n % 10);\n            n /= 10;\n        }\n        return sum;\n    }\n    bool isHappy(int n) {\n        unordered_set&lt;int&gt; set;\n        while(1) {\n            int sum = getSum(n);\n            if (sum == 1) {\n                return true;\n            }\n            // \u5982\u679c\u8fd9\u4e2asum\u66fe\u7ecf\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u5df2\u7ecf\u9677\u5165\u4e86\u65e0\u9650\u5faa\u73af\u4e86\uff0c\u7acb\u523breturn false\n            if (set.find(sum) != set.end()) {\n                return false;\n            } else {\n                set.insert(sum);\n            }\n            n = sum;\n        }\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/leetcode%E7%9A%84%E5%93%88%E5%B8%8C/348.%E8%B5%8E%E9%87%91%E4%BF%A1/","title":"348.\u8d4e\u91d1\u4fe1","text":"<pre><code>class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        int record[26] = {};\n        if (ransomNote.size() &gt; magazine.size()) {\n            return false;\n        }\n        for (int i = 0; i &lt; magazine.length(); i++) {\n            record[magazine[i] - 'a']++;\n        }\n\n        for (int i = 0; i &lt; ransomNote.length(); i++) {\n            record[ransomNote[i] - 'a']--;\n            // \u5982\u679c\u5c0f\u4e8e\u96f6\u8bf4\u660eransomNote\u91cc\u51fa\u73b0\u7684\u5b57\u7b26\uff0cmagazine\u6ca1\u6709\n            if (record[ransomNote[i] - 'a'] &lt; 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/leetcode%E7%9A%84%E5%93%88%E5%B8%8C/349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/","title":"349.\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6","text":"<p>\u91c7\u7528\u548c\u4e0a\u4e00\u9898\u4e00\u6837\u7684\u601d\u8def <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int record[1010] = {0};\n        vector&lt;int&gt; ans;\n        for (int i = 0; i &lt; nums1.size(); i++) {\n            if (record[nums1[i]] == 0) {\n                record[nums1[i]]++;\n            }\n        }\n\n        for (int i = 0; i &lt; nums2.size(); i++) {\n            if (record[nums2[i]] == 1) {\n                record[nums2[i]]++;\n                ans.push_back(nums2[i]);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/leetcode%E7%9A%84%E5%93%88%E5%B8%8C/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/","title":"\u4e09\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; result;\n        sort(nums.begin(), nums.end());\n\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] &gt; 0) {\n                return result;\n            }\n\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1;\n            int right = nums.size() - 1;\n            while (left &lt; right) {\n                if (nums[i] + nums[left] + nums[right] &lt; 0)\n                    left++;\n                else if (nums[i] + nums[left] + nums[right] &gt; 0)\n                    right--;\n                else {\n                    result.push_back(\n                        vector&lt;int&gt;{nums[i], nums[left], nums[right]});\n                    // \u53bb\u91cd\u903b\u8f91\u5e94\u8be5\u653e\u5728\u627e\u5230\u4e00\u4e2a\u4e09\u5143\u7ec4\u4e4b\u540e\uff0c\u5bf9b \u548c c\u53bb\u91cd\n                    while (right &gt; left &amp;&amp; nums[right] == nums[right - 1])\n                        right--;\n                    while (right &gt; left &amp;&amp; nums[left] == nums[left + 1])\n                        left++;\n\n                    left++;\n                    right--;\n                }\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/leetcode%E7%9A%84%E5%93%88%E5%B8%8C/%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/","title":"\u56db\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;vector&lt;int&gt;&gt; result;\n        sort(nums.begin(), nums.end());\n        for (int k = 0; k &lt; nums.size(); k++) {\n            // \u526a\u679d\u5904\u7406\n            if (nums[k] &gt; target &amp;&amp; nums[k] &gt;= 0) {\n                break; // \u8fd9\u91cc\u4f7f\u7528break\uff0c\u7edf\u4e00\u901a\u8fc7\u6700\u540e\u7684return\u8fd4\u56de\n            }\n            // \u5bf9nums[k]\u53bb\u91cd\n            if (k &gt; 0 &amp;&amp; nums[k] == nums[k - 1]) {\n                continue;\n            }\n            for (int i = k + 1; i &lt; nums.size(); i++) {\n                // 2\u7ea7\u526a\u679d\u5904\u7406\n                if (nums[k] + nums[i] &gt; target &amp;&amp; nums[k] + nums[i] &gt;= 0) {\n                    break;\n                }\n\n                // \u5bf9nums[i]\u53bb\u91cd\n                if (i &gt; k + 1 &amp;&amp; nums[i] == nums[i - 1]) {\n                    continue;\n                }\n                int left = i + 1;\n                int right = nums.size() - 1;\n                while (right &gt; left) {\n                    // nums[k] + nums[i] + nums[left] + nums[right] &gt; target \u4f1a\u6ea2\u51fa\n                    if ((long) nums[k] + nums[i] + nums[left] + nums[right] &gt; target) {\n                        right--;\n                    // nums[k] + nums[i] + nums[left] + nums[right] &lt; target \u4f1a\u6ea2\u51fa\n                    } else if ((long) nums[k] + nums[i] + nums[left] + nums[right]  &lt; target) {\n                        left++;\n                    } else {\n                        result.push_back(vector&lt;int&gt;{nums[k], nums[i], nums[left], nums[right]});\n                        // \u5bf9nums[left]\u548cnums[right]\u53bb\u91cd\n                        while (right &gt; left &amp;&amp; nums[right] == nums[right - 1]) right--;\n                        while (right &gt; left &amp;&amp; nums[left] == nums[left + 1]) left++;\n\n                        // \u627e\u5230\u7b54\u6848\u65f6\uff0c\u53cc\u6307\u9488\u540c\u65f6\u6536\u7f29\n                        right--;\n                        left++;\n                    }\n                }\n\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/leetcode%E7%9A%84%E5%93%88%E5%B8%8C/%E6%9C%89%E6%95%88%E5%AD%97%E6%AF%8D%E7%9A%84%E5%BC%82%E6%88%96%E8%AF%8D/","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u4f7f\u7528\u54c8\u5e0c\u8868\u5224\u65ad\u662f\u5426\u6240\u542b\u8981\u7d20\u76f8\u540c</p> <p>\u8fd9\u91cc\u4f7f\u7528\u7684\u65b9\u6cd5\u5f88\u5de7\u5999\uff0c\u5e76\u4e0d\u76f4\u63a5\u5224\u65ad\uff0c\u800c\u662f\u91c7\u7528\u4e00\u52a0\u4e00\u51cf\u540e\u662f\u5426\u88ab\u8fd8\u539f\u4e86</p> <pre><code>class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        int record[26]={0};\n        for(int i=0;i&lt;s.size();i++){\n            record[s[i]-'a']++;\n        }\n\n        for(int i=0;i&lt;t.size();i++){\n            record[t[i]-'a']--;\n        }\n\n        for(int i=0;i&lt;26;i++){\n            if(record[i]!=0){\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"344 \u53cd\u8f6c\u5b57\u7b26\u4e32","text":"<pre><code>class Solution {\npublic:\n    void reverseString(vector&lt;char&gt;&amp; s) {\n        int n=s.size();\n        for(int l=0,r=n-1;l&lt;r;l++,r--){\n            swap(s[l],s[r]);\n        }\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B22.0/","title":"\u53cd\u8f6c\u6570\u7ec42","text":"<pre><code>class Solution {\npublic:\n    string reverseStr(string s, int k) {\n        int n = s.length();\n        for (int i = 0; i &lt; n; i += 2 * k) {\n            reverse(s.begin() + i, s.begin() + min(i + k, n));\n        }\n        return s;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/1/","title":"include","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/1/#include_1","title":"include","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/1/#include_2","title":"include","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/1/#define-maxsize-11","title":"define Maxsize 11 <p>using namespace std;</p> <p>typedef struct{     int data[Maxsize];     int length; }Sqlist; //\u521d\u59cb\u5316 void initsqlist(Sqlist &amp; sl){     for(int i=0;i&lt;Maxsize;i++){         sl.data[i]=0;     }     sl.length=0; } //void initdsqlist(Sqlist &amp; sl){ //    sl.data = (int)malloc(sizeof(int) Maxsize); //    sl.length=0; //}</p> <p>//\u67e5\u627e\u6839\u636e\u4e0b\u6807 int getsqlist(Sqlist sl,int index){     if(sl.length=0){         return false;     }     if(index&lt;1||index&gt;sl.length){         return false;     }     return sl.data[index-1]; }</p> <p>// \u6307\u5b9a\u5143\u7d20\u67e5\u627e\u5e76\u8fd4\u56de\u4f4d\u7f6e int LocateElem(Sqlist L,int x) {     //\u8fd9\u91cc\u4e0d\u9700\u8981\u5224\u65ad\u8868\u662f\u5426\u4e3a\u7a7a\uff0c\u56e0\u4e3afor\u4e2d\u76f4\u63a5\u6709\u5224\u65ad     for(int i = 0;i &lt; L.length;i ++)         if(L.data[i] == x)             return i + 1;     return false; }</p> <p>// \u5c06\u5143\u7d20\u63d2\u5165\u6307\u5b9a\u4f4d\u7f6e bool ListInsert(Sqlist &amp;L,int x,int t) {     //\u5224\u65ad\u7ebf\u6027\u8868\u662f\u5426\u5df2\u6ee1     if(L.length == Maxsize)         return false;     //\u5224\u65ad\u63d2\u5165\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5     if(t &lt; 1 || t &gt; L.length)         return false;     //\u4ece\u540e\u5f80\u524d\u6328\u4e2a\u79fb\u52a8\u5143\u7d20\uff0c\u7a7a\u51fa\u63d2\u5165\u7684\u4f4d\u7f6e     for(int i = L.length;i &gt;= t;i --)         L.data[i] = L.data[i - 1];     //\u63d2\u5165\u5e76\u66f4\u65b0\u7ebf\u6027\u8868     L.data[t - 1] = x;     L.length ++;</p> <pre><code>return true;\n</code></pre> <p>}</p> <p>void print(Sqlist &amp; sl){     for(int i=0;i&lt;sl.length;i++){         cout&lt;&lt;sl.data[i]&lt;&lt;\" \";     }cout&lt;&lt;endl; } int main(){     Sqlist sq;     initsqlist(sq);</p> <pre><code>print(sq);\n\nreturn 0;\n</code></pre> <p>}</p>","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/","title":"\u540e\u7f00\u8868\u8fbe\u5f0f","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6240\u8c13\u540e\u7f00\u8868\u8fbe\u5f0f\u662f\u6307\u8fd9\u6837\u7684\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff1a\u5f0f\u4e2d\u4e0d\u518d\u5f15\u7528\u62ec\u53f7\uff0c\u8fd0\u7b97\u7b26\u53f7\u653e\u5728\u4e24\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u4e4b\u540e\uff0c\u6240\u6709\u8ba1\u7b97\u6309\u8fd0\u7b97\u7b26\u53f7\u51fa\u73b0\u7684\u987a\u5e8f\uff0c\u4e25\u683c\u5730\u7531\u5de6\u800c\u53f3\u65b0\u8fdb\u884c\uff08\u4e0d\u7528\u8003\u8651\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff09\u3002</p> <p>\u5982\uff1a\\(\\texttt{3*(5-2)+7}\\) \u5bf9\u5e94\u7684\u540e\u7f00\u8868\u8fbe\u5f0f\u4e3a\uff1a\\(\\texttt{3.5.2.-*7.+@}\\)\u3002\u5728\u8be5\u5f0f\u4e2d\uff0c<code>@</code> \u4e3a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u7b26\u53f7\u3002<code>.</code> \u4e3a\u64cd\u4f5c\u6570\u7684\u7ed3\u675f\u7b26\u53f7\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u8868\u793a\u540e\u7f00\u8868\u8fbe\u5f0f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>3.5.2.-*7.+@\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>16\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_5","title":"\u63d0\u793a","text":"<p>\u6570\u636e\u4fdd\u8bc1\uff0c\\(1 \\leq |s| \\leq 50\\)\uff0c\u7b54\u6848\u548c\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 \\(10^9\\)\u3002 \u6bd4\u8f83\u76f4\u89c2</p> <pre><code>#include&lt;iostream&gt;  \n#include&lt;cstdio&gt;  \nusing namespace std;  \nlong long stk[1000];  \nint main(){  \n    long long i=0,now=0;  \n    char op;  \n    while((op=getchar())!='@'){  \n        if(op&gt;='0'&amp;&amp;op&lt;='9') now*=10,now+=op-'0';  \n        else if(op=='.'){  \n            stk[++i]=now;  \n            now=0;  \n        }  \n        else if(op=='+'){  \n            stk[i-1]=stk[i-1]+stk[i];  \n            stk[i]=0;  \n            i--;  \n        }  \n        else if(op=='-'){  \n            stk[i-1]=stk[i-1]-stk[i];  \n            stk[i]=0;  \n            i--;  \n        }  \n        else if(op=='*'){  \n            stk[i-1]=stk[i-1]*stk[i];  \n            stk[i]=0;  \n            i--;  \n        }  \n        else if(op=='/'){  \n            stk[i-1]=stk[i-1]/stk[i];  \n            stk[i]=0;  \n            i--;  \n        }  \n    }  \n    cout&lt;&lt;stk[1];  \n    return 0;  \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/","title":"\u5bc4\u5305\u67dc","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8d85\u5e02\u91cc\u6709 \\(n(1\\le n\\le10^5)\\) \u4e2a\u5bc4\u5305\u67dc\u3002\u6bcf\u4e2a\u5bc4\u5305\u67dc\u683c\u5b50\u6570\u91cf\u4e0d\u4e00\uff0c\u7b2c \\(i\\) \u4e2a\u5bc4\u5305\u67dc\u6709 \\(a_i(1\\le a_i\\le10^5)\\) \u4e2a\u683c\u5b50\uff0c\u4e0d\u8fc7\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5404\u4e2a \\(a_i\\) \u7684\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5bc4\u5305\u67dc\uff0c\u683c\u5b50\u7f16\u53f7\u4ece 1 \u5f00\u59cb\uff0c\u4e00\u76f4\u5230 \\(a_i\\)\u3002\u73b0\u5728\u6709 \\(q(1 \\le q\\le10^5)\\) \u6b21\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 i j k</code>\uff1a\u5728\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u5b58\u5165\u7269\u54c1 \\(k(0\\le k\\le 10^9)\\)\u3002\u5f53 \\(k=0\\) \u65f6\u8bf4\u660e\u6e05\u7a7a\u8be5\u683c\u5b50\u3002</li> <li><code>2 i j</code>\uff1a\u67e5\u8be2\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u4e2d\u7684\u7269\u54c1\u662f\u4ec0\u4e48\uff0c\u4fdd\u8bc1\u67e5\u8be2\u7684\u67dc\u5b50\u6709\u5b58\u8fc7\u4e1c\u897f\u3002</li> </ul> <p>\u5df2\u77e5\u8d85\u5e02\u91cc\u5171\u8ba1\u4e0d\u4f1a\u8d85\u8fc7 \\(10^7\\) \u4e2a\u5bc4\u5305\u683c\u5b50\uff0c\\(a_i\\) \u662f\u786e\u5b9a\u7136\u800c\u672a\u77e5\u7684\uff0c\u4f46\u662f\u4fdd\u8bc1\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u8be5\u67dc\u5b50\u5b58\u7269\u54c1\u8bf7\u6c42\u7684\u683c\u5b50\u7f16\u53f7\u7684\u6700\u5927\u503c\u3002\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u67d0\u4e9b\u5bc4\u5305\u67dc\u4e2d\u4e00\u4e2a\u683c\u5b50\u90fd\u6ca1\u6709\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c 2 \u4e2a\u6574\u6570 \\(n\\) \u548c \\(q\\)\uff0c\u5bc4\u5305\u67dc\u4e2a\u6570\u548c\u8be2\u95ee\u6b21\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(q\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u6b21\u64cd\u4f5c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\u65f6\uff0c\u8f93\u51fa\u7b54\u6848\uff0c\u4ee5\u6362\u884c\u9694\u5f00\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>5 4\n1 3 10000 118014\n1 1 1 1\n2 3 10000\n2 1 1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>118014\n1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%AF%84%E5%8C%85%E6%9F%9C/#_4","title":"\u63d0\u793a","text":"<p>\\(\\text{upd 2022.7.26}\\)\uff1a\u65b0\u589e\u52a0\u4e00\u7ec4 Hack \u6570\u636e\u3002 <pre><code>#include&lt;iostream&gt;  \n#include&lt;vector&gt;  \nusing namespace std;  \nint n,q,opt,i,j,k;  \n\nint main()  \n{  \n    cin&gt;&gt;n&gt;&gt;q;//\u5bc4\u5b58\u5305\u7684\u4e2a\u6570\u548c\u8bbf\u95ee\u7684\u6b21\u6570  \n    vector&lt;vector&lt;int&gt;&gt; locker(n+1);//\u521d\u59cb\u5316\u4e00\u51710~n+1\u4e2a  \n    while(q--)  \n    {  \n        cin&gt;&gt;opt;  \n        if(opt==1)  \n        {  \n            cin&gt;&gt;i&gt;&gt;j&gt;&gt;k;  \n            if(locker[i].size()&lt;j+1)  \n            {  \n                locker[i].resize(j+1);  \n            }locker[i][j]=k;  \n        }else{  \n            cin&gt;&gt;i&gt;&gt;j;  \n            cout&lt;&lt;locker[i][j]&lt;&lt;endl;  \n        }  \n    }  \n    return 0;  \n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/","title":"\u7ea6\u745f\u592b\u95ee\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\\(n\\) \u4e2a\u4eba\u56f4\u6210\u4e00\u5708\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570,\u6570\u5230 \\(m\\) \u7684\u4eba\u51fa\u5217\uff0c\u518d\u7531\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u4ece \\(1\\) \u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230 \\(m\\) \u7684\u4eba\u518d\u51fa\u5708\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u7684\u4eba\u90fd\u51fa\u5708\uff0c\u8bf7\u8f93\u51fa\u4f9d\u6b21\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u6ce8\u610f\uff1a\u672c\u9898\u548c\u300a\u6df1\u5165\u6d45\u51fa-\u57fa\u7840\u7bc7\u300b\u4e0a\u4f8b\u9898\u7684\u8868\u8ff0\u7a0d\u6709\u4e0d\u540c\u3002\u4e66\u4e0a\u8868\u8ff0\u662f\u7ed9\u51fa\u6dd8\u6c70 \\(n-1\\) \u540d\u5c0f\u670b\u53cb\uff0c\u800c\u8be5\u9898\u662f\u5168\u90e8\u51fa\u5708\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\(n,m\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>10 3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>3 6 9 2 7 1 8 5 10 4\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/#_5","title":"\u63d0\u793a","text":"<p>\\(1 \\le m, n \\le 100\\)</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E8%AF%A2%E9%97%AE%E5%AD%A6%E5%8F%B7/","title":"\u8be2\u95ee\u5b66\u53f7","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E8%AF%A2%E9%97%AE%E5%AD%A6%E5%8F%B7/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 \\(n(n \\le 2 \\times 10^6)\\) \u540d\u540c\u5b66\u9646\u9646\u7eed\u7eed\u8fdb\u5165\u6559\u5ba4\u3002\u6211\u4eec\u77e5\u9053\u6bcf\u540d\u540c\u5b66\u7684\u5b66\u53f7\uff08\u5728 \\(1\\) \u5230 \\(10^9\\) \u4e4b\u95f4\uff09\uff0c\u6309\u8fdb\u6559\u5ba4\u7684\u987a\u5e8f\u7ed9\u51fa\u3002\u4e0a\u8bfe\u4e86\uff0c\u8001\u5e08\u60f3\u77e5\u9053\u7b2c \\(i\\) \u4e2a\u8fdb\u5165\u6559\u5ba4\u7684\u540c\u5b66\u7684\u5b66\u53f7\u662f\u4ec0\u4e48\uff08\u6700\u5148\u8fdb\u5165\u6559\u5ba4\u7684\u540c\u5b66 \\(i=1\\)\uff09\uff0c\u8be2\u95ee\u6b21\u6570\u4e0d\u8d85\u8fc7 \\(10^5\\) \u6b21\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E8%AF%A2%E9%97%AE%E5%AD%A6%E5%8F%B7/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c \\(2\\) \u4e2a\u6574\u6570 \\(n\\) \u548c \\(m\\)\uff0c\u8868\u793a\u5b66\u751f\u4e2a\u6570\u548c\u8be2\u95ee\u6b21\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u6309\u987a\u5e8f\u8fdb\u5165\u6559\u5ba4\u7684\u5b66\u53f7\u3002</p> <p>\u7b2c\u4e09\u884c \\(m\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be2\u95ee\u7b2c\u51e0\u4e2a\u8fdb\u5165\u6559\u5ba4\u7684\u540c\u5b66\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E8%AF%A2%E9%97%AE%E5%AD%A6%E5%8F%B7/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa \\(m\\) \u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\uff0c\u7528\u6362\u884c\u9694\u5f00\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E8%AF%A2%E9%97%AE%E5%AD%A6%E5%8F%B7/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E8%AF%A2%E9%97%AE%E5%AD%A6%E5%8F%B7/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>10 3\n1 9 2 60 8 17 11 4 5 14\n1 5 9\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E8%AF%A2%E9%97%AE%E5%AD%A6%E5%8F%B7/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<p><pre><code>1\n8\n5\n</code></pre> \u76f4\u63a5\u6570\u7ec4\u67e5\u8be2 <pre><code>#include&lt;cstdio&gt;\nint a[2000001];//2*10^6\nint main()\n{\n    int n,m,sum;//\u6ce8\u610f\u4e0d\u8981\u628a\u6570\u7ec4\u5f00\u5728\u4e3b\u51fd\u6570\u91cc\n    scanf(\"%d %d\",&amp;n,&amp;m);\n    for(int i=1;i&lt;=n;i++)\n        scanf(\"%d\",&amp;a[i]);\n    for(int i=1;i&lt;=m;i++)\n    {\n        scanf(\"%d\",&amp;sum);//\u8be2\u95ee\u5b66\u53f7\n        printf(\"%d\\n\",a[sum]);\n    }\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/","title":"\u961f\u5217\u5b89\u6392","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e00\u4e2a\u5b66\u6821\u91cc\u8001\u5e08\u8981\u5c06\u73ed\u4e0a \\(N\\) \u4e2a\u540c\u5b66\u6392\u6210\u4e00\u5217\uff0c\u540c\u5b66\u88ab\u7f16\u53f7\u4e3a \\(1\\sim N\\)\uff0c\u4ed6\u91c7\u53d6\u5982\u4e0b\u7684\u65b9\u6cd5\uff1a</p> <ol> <li> <p>\u5148\u5c06 \\(1\\) \u53f7\u540c\u5b66\u5b89\u6392\u8fdb\u961f\u5217\uff0c\u8fd9\u65f6\u961f\u5217\u4e2d\u53ea\u6709\u4ed6\u4e00\u4e2a\u4eba\uff1b</p> </li> <li> <p>\\(2\\sim N\\) \u53f7\u540c\u5b66\u4f9d\u6b21\u5165\u5217\uff0c\u7f16\u53f7\u4e3a \\(i\\) \u7684\u540c\u5b66\u5165\u5217\u65b9\u5f0f\u4e3a\uff1a\u8001\u5e08\u6307\u5b9a\u7f16\u53f7\u4e3a \\(i\\) \u7684\u540c\u5b66\u7ad9\u5728\u7f16\u53f7\u4e3a \\(1\\sim(i-1)\\) \u4e2d\u67d0\u4f4d\u540c\u5b66\uff08\u5373\u4e4b\u524d\u5df2\u7ecf\u5165\u5217\u7684\u540c\u5b66\uff09\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\uff1b</p> </li> <li> <p>\u4ece\u961f\u5217\u4e2d\u53bb\u6389 \\(M\\) \u4e2a\u540c\u5b66\uff0c\u5176\u4ed6\u540c\u5b66\u4f4d\u7f6e\u987a\u5e8f\u4e0d\u53d8\u3002</p> </li> </ol> <p>\u5728\u6240\u6709\u540c\u5b66\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u961f\u5217\u6392\u5217\u5b8c\u6bd5\u540e\uff0c\u8001\u5e08\u60f3\u77e5\u9053\u4ece\u5de6\u5230\u53f3\u6240\u6709\u540c\u5b66\u7684\u7f16\u53f7\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(N\\)\uff0c\u8868\u793a\u4e86\u6709 \\(N\\) \u4e2a\u540c\u5b66\u3002</p> <p>\u7b2c \\(2\\sim N\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(k,p\\)\uff0c\u5176\u4e2d \\(k\\) \u4e3a\u5c0f\u4e8e \\(i\\) \u7684\u6b63\u6574\u6570\uff0c\\(p\\) \u4e3a \\(0\\) \u6216\u8005 \\(1\\)\u3002\u82e5 \\(p\\) \u4e3a \\(0\\)\uff0c\u5219\u8868\u793a\u5c06 \\(i\\) \u53f7\u540c\u5b66\u63d2\u5165\u5230 \\(k\\) \u53f7\u540c\u5b66\u7684\u5de6\u8fb9\uff0c\\(p\\) \u4e3a \\(1\\) \u5219\u8868\u793a\u63d2\u5165\u5230\u53f3\u8fb9\u3002</p> <p>\u7b2c \\(N+1\\) \u884c\u4e3a\u4e00\u4e2a\u6574\u6570 \\(M\\)\uff0c\u8868\u793a\u53bb\u6389\u7684\u540c\u5b66\u6570\u76ee\u3002</p> <p>\u63a5\u4e0b\u6765 \\(M\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(x\\)\uff0c\u8868\u793a\u5c06 \\(x\\) \u53f7\u540c\u5b66\u4ece\u961f\u5217\u4e2d\u79fb\u53bb\uff0c\u5982\u679c \\(x\\) \u53f7\u540c\u5b66\u5df2\u7ecf\u4e0d\u5728\u961f\u5217\u4e2d\u5219\u5ffd\u7565\u8fd9\u4e00\u6761\u6307\u4ee4\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u884c\uff0c\u5305\u542b\u6700\u591a \\(N\\) \u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u8868\u793a\u4e86\u961f\u5217\u4ece\u5de6\u5230\u53f3\u6240\u6709\u540c\u5b66\u7684\u7f16\u53f7\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>4\n1 0\n2 1\n1 0\n2\n3\n3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>2 4 1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97%E5%AE%89%E6%8E%92/#_4","title":"\u63d0\u793a","text":"<p>\u3010\u6837\u4f8b\u89e3\u91ca\u3011</p> <p>\u5c06\u540c\u5b66 \\(2\\) \u63d2\u5165\u81f3\u540c\u5b66 \\(1\\) \u5de6\u8fb9\uff0c\u6b64\u65f6\u961f\u5217\u4e3a\uff1a</p> <p><code>2 1</code></p> <p>\u5c06\u540c\u5b66 \\(3\\) \u63d2\u5165\u81f3\u540c\u5b66 \\(2\\) \u53f3\u8fb9\uff0c\u6b64\u65f6\u961f\u5217\u4e3a\uff1a</p> <p><code>2 3 1</code> </p> <p>\u5c06\u540c\u5b66 \\(4\\) \u63d2\u5165\u81f3\u540c\u5b66 \\(1\\) \u5de6\u8fb9\uff0c\u6b64\u65f6\u961f\u5217\u4e3a\uff1a</p> <p><code>2 3 4 1</code> </p> <p>\u5c06\u540c\u5b66 \\(3\\) \u4ece\u961f\u5217\u4e2d\u79fb\u51fa\uff0c\u6b64\u65f6\u961f\u5217\u4e3a\uff1a</p> <p><code>2 4 1</code> </p> <p>\u540c\u5b66 \\(3\\) \u5df2\u7ecf\u4e0d\u5728\u961f\u5217\u4e2d\uff0c\u5ffd\u7565\u6700\u540e\u4e00\u6761\u6307\u4ee4</p> <p>\u6700\u7ec8\u961f\u5217\uff1a</p> <p><code>2 4 1</code> </p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u5bf9\u4e8e \\(20\\%\\) \u7684\u6570\u636e\uff0c\\(1\\leq N\\leq 10\\)\u3002</p> <p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\\(1\\leq N\\leq 1000\\)\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1&lt;M\\leq N\\leq 10^5\\)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/","title":"\u4ec0\u4e48\u662f\u94fe\u8868","text":"<p>\u94fe\u8868\u662f\u4e00\u79cd\u901a\u8fc7\u6307\u9488\u4e32\u8054\u5728\u4e00\u8d77\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u4e2a\u662f\u6570\u636e\u57df\u4e00\u4e2a\u662f\u6307\u9488\u57df\uff08\u5b58\u653e\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u57df\u6307\u5411null\uff08\u7a7a\u6307\u9488\u7684\u610f\u601d\uff09\u3002</p> <p>\u94fe\u8868\u7684\u5165\u53e3\u8282\u70b9\u79f0\u4e3a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u4e5f\u5c31\u662fhead\u3002</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/#_2","title":"\u94fe\u8868\u7684\u7c7b\u578b","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/#_3","title":"\u5355\u94fe\u8868","text":"<p>\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u6307\u9488\u7684\u5c31\u662f\u5355\u94fe\u8868 <pre><code>class Listnode{\nprivate:\n    int val;\n    Listnode* next;\npublic:\n    Listnode(int x):val(x),next(NULL){}\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/#_4","title":"\u53cc\u94fe\u8868","text":"<p>\u53cc\u94fe\u8868\uff1a\u6bcf\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u53cc\u94fe\u8868 \u65e2\u53ef\u4ee5\u5411\u524d\u67e5\u8be2\u4e5f\u53ef\u4ee5\u5411\u540e\u67e5\u8be2\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/#_5","title":"\u5faa\u73af\u94fe\u8868","text":"<p>\u5faa\u73af\u94fe\u8868\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u94fe\u8868\u9996\u5c3e\u76f8\u8fde\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/#_6","title":"\u94fe\u8868\u64cd\u4f5c","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/#_7","title":"\u5220\u9664\u8282\u70b9","text":"<p> \u53ea\u8981\u5c06C\u8282\u70b9\u7684next\u6307\u9488 \u6307\u5411E\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 D\u8282\u70b9\u662f\u4f9d\u7136\u5b58\u7559\u5728\u5185\u5b58\u91cc\u7684 \u5728C++\u91cc\u6700\u597d\u662f\u518d\u624b\u52a8\u91ca\u653e\u8fd9\u4e2aD\u8282\u70b9\uff0c\u91ca\u653e\u8fd9\u5757\u5185\u5b58\u3002 \u5176\u4ed6\u8bed\u8a00\u4f8b\u5982Java\u3001Python\uff0c\u5c31\u6709\u81ea\u5df1\u7684\u5185\u5b58\u56de\u6536\u673a\u5236\uff0c\u5c31\u4e0d\u7528\u81ea\u5df1\u624b\u52a8\u91ca\u653e\u4e86\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/#_8","title":"\u6dfb\u52a0\u8282\u70b9","text":"<p> \u5982\u56fe\u6240\u793a</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode%E7%9A%84%E9%93%BE%E8%A1%A8%E9%A2%98/%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BA%A4%E7%82%B9/","title":"\u94fe\u8868\u76f8\u4ea4","text":"<p>\u662f\u6c42\u4e24\u4e2a\u94fe\u8868\u4ea4\u70b9\u8282\u70b9\u7684\u6307\u9488\u3002 \u8fd9\u91cc\u540c\u5b66\u4eec\u8981\u6ce8\u610f\uff0c\u4ea4\u70b9\u4e0d\u662f\u6570\u503c\u76f8\u7b49\uff0c\u800c\u662f\u6307\u9488\u76f8\u7b49\u3002 <pre><code>```cpp\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* curA = headA;\n        ListNode* curB = headB;\n        int lenA = 0, lenB = 0;\n        while (curA != NULL) { // \u6c42\u94fe\u8868A\u7684\u957f\u5ea6\n            lenA++;\n            curA = curA-&gt;next;\n        }\n        while (curB != NULL) { // \u6c42\u94fe\u8868B\u7684\u957f\u5ea6\n            lenB++;\n            curB = curB-&gt;next;\n        }\n        curA = headA;\n        curB = headB;\n        // \u8ba9curA\u4e3a\u6700\u957f\u94fe\u8868\u7684\u5934\uff0clenA\u4e3a\u5176\u957f\u5ea6\n        if (lenB &gt; lenA) {\n            swap (lenA, lenB);\n            swap (curA, curB);\n        }\n        // \u6c42\u957f\u5ea6\u5dee\n        int gap = lenA - lenB;\n        // \u8ba9curA\u548ccurB\u5728\u540c\u4e00\u8d77\u70b9\u4e0a\uff08\u672b\u5c3e\u4f4d\u7f6e\u5bf9\u9f50\uff09\n        while (gap--) {\n            curA = curA-&gt;next;\n        }\n        // \u904d\u5386curA \u548c curB\uff0c\u9047\u5230\u76f8\u540c\u5219\u76f4\u63a5\u8fd4\u56de\n        while (curA != NULL) {\n            if (curA == curB) {\n                return curA;\n            }\n            curA = curA-&gt;next;\n            curB = curB-&gt;next;\n        }\n        return NULL;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode%E7%9A%84%E9%93%BE%E8%A1%A8%E9%A2%98/%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E7%9B%B8%E9%82%BB%E7%BB%93%E7%82%B9%E7%9A%84%E5%80%BC/","title":"24\u4ea4\u6362\u94fe\u8868\u76f8\u90bb\u7ed3\u70b9\u7684\u503c","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if(head==nullptr||head-&gt;next==nullptr)  return head;\n        ListNode* nhead=swapPairs(head-&gt;next-&gt;next);\n        ListNode*res =head-&gt;next;\n        head-&gt;next-&gt;next=head;\n        head-&gt;next=nhead;\n        return res;\n    }\n};\n</code></pre> <p>\u4f7f\u7528\u9012\u5f52\u65b9\u6cd5\u53ef\u4ee5\u628a\u6240\u6709\u7684\u4ea4\u6362\u7b56\u7565\u770b\u6210\u5bf9\u4e09\u4e2a\u70b9\u7684\u64cd\u4f5c\uff0c\u8ba4\u4e3a\u4ece\u5934\u7ed3\u70b9\u5f80\u540e\u7684\u4e09\u4e2a\u8282\u70b9\u5df2\u7ecf\u4ea4\u6362\u597d\u4e86 \u6539\u53d8next\u6307\u9488\u7684\u6307\u5411\u5373\u53ef\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode%E7%9A%84%E9%93%BE%E8%A1%A8%E9%A2%98/%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/","title":"\u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0); // \u521b\u5efa\u4e00\u4e2a\u865a\u62df\u5934\u8282\u70b9\n        dummy-&gt;next = head;\n        ListNode* first = dummy;\n        ListNode* second = dummy;\n\n        // \u79fb\u52a8 first \u6307\u9488\uff0c\u4f7f\u5176\u4e0e second \u6307\u9488\u4e4b\u95f4\u6709 n \u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\n        //\u56e0\u4e3a\u4e8c\u8005\u6700\u5f00\u59cb\u662f\u6307\u5411\u865a\u6307\u9488\u800c\u4e0d\u662f\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5f97\u662fn+1\u6b21\u5faa\u73af\n        for (int i = 0; i &lt;= n; i++) {\n            first = first-&gt;next;\n        }\n\n        // \u79fb\u52a8 first \u548c second \u6307\u9488\uff0c\u76f4\u5230 first \u5230\u8fbe\u94fe\u8868\u7684\u672b\u5c3e\n        while (first != nullptr) {\n            first = first-&gt;next;\n            second = second-&gt;next;\n        }\n\n        // \u5220\u9664\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\n        ListNode* toDelete = second-&gt;next;\n        second-&gt;next = second-&gt;next-&gt;next;\n        delete toDelete; // \u91ca\u653e\u5185\u5b58\n\n        ListNode* newHead = dummy-&gt;next; // \u83b7\u53d6\u65b0\u7684\u5934\u8282\u70b9\n        delete dummy; // \u91ca\u653e\u865a\u62df\u5934\u8282\u70b9\n        return newHead;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode%E7%9A%84%E9%93%BE%E8%A1%A8%E9%A2%98/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/","title":"\u5224\u65ad\u662f\u5426\u6709\u73af","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n\n        ListNode* slow =head;\n        ListNode* fast=head;\n        while(fast!=NULL&amp;&amp;fast-&gt;next!=NULL)\n        {\n            fast = fast-&gt;next-&gt;next;\n            slow=slow-&gt;next;\n            if(slow==fast){\n                ListNode* index1=fast;\n                ListNode* index2=head;\n                while(index1!=index2)\n                {\n                    index1=index1-&gt;next;\n                    index2=index2-&gt;next;\n                }\n                return index2;\n            }\n        }\n        return NULL;\n    }\n};\n</code></pre> <p>\u4e00\u4e2a\u5feb\u4e00\u4e2a\u6162\u6307\u9488\u76f8\u9047\u4e0d\u9700\u8981\u518d\u8bc1\u660e \u8fd9\u91cc\u8bc1\u660e\u4e00\u4e0b\u4e3a\u4ec0\u4e48\uff0c\u4e00\u4e2a\u8d77\u59cb\u70b9\uff0c\u4e00\u4e2a\u5934\u7ed3\u70b9\u540c\u65f6\u5f00\u59cb\u8d70\uff0c\u76f8\u9047\u70b9\u5c31\u662f\u73af\u8d77\u59cb\u70b9 \u4ece\u5934\u7ed3\u70b9\u5230\u73af\u9996\u8282\u70b9\u8ddd\u79bb\u8bbe\u4e3aD1 \u73af\u9996\u8282\u70b9\u5230\u76f8\u9047\u70b9\u8ddd\u79bb\u8bbe\u4e3aD2 \u4e00\u4e2a\u73af\u7684\u957f\u5ea6\u8bbe\u4e3aC \u5bf9\u4e8e\u5feb\u6307\u9488 D1+D2+mC=2v \u5bf9\u5e94\u6162\u6307\u9488 D1+D2+nC=v \u8054\u7acb\u4e24\u4e2a\u65b9\u7a0b\u53ef\u4ee5\u5f97\u5230 D1=(m-2n)C \u5373\u53ef\u5f97\u8bc1</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode%E7%9A%84%E9%93%BE%E8%A1%A8%E9%A2%98/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","title":"206 \u53cd\u8f6c\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* tmp;\n        ListNode* cur=head;\n        ListNode* pre=nullptr;\n        while(cur)\n        {\n            tmp=cur-&gt;next;\n            cur-&gt;next=pre;\n            pre=cur;\n            cur=tmp;\n        }\n        return pre;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode%E7%9A%84%E9%93%BE%E8%A1%A8%E9%A2%98/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/","title":"\u79fb\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u505a\u5220\u9664\u64cd\u4f5c\uff0c\u5c31\u662f\u5148\u8bb0\u5f55\u4e0b\u5220\u9664\u8282\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u8ba9head-&gt;next=head-&gt;next-&gt;next \u5982\u679c\u5220\u9664\u7684\u4e8bhead\u672c\u8eab\u8282\u70b9\uff0c\u53ea\u9700\u8981\u8ba9head\u8282\u70b9\u540e\u79fb \u8fd9\u6837\u64cd\u4f5c\u4e0d\u4e00\u81f4 \u5982\u679c\u6211\u4eec\u60f3\u8981\u64cd\u4f5c\u4e00\u81f4\uff0c\u53ef\u4ee5\u5f15\u5165\u865a\u8282\u70b9\uff0c\u6700\u540e\u8bb0\u5f97delete\u5373\u53ef</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int value) {\n        ListNode* virtualnode=new ListNode(0);\n        virtualnode-&gt;next=head;\n        ListNode* cur=virtualnode;\n        while(cur-&gt;next!=NULL){\n            if(cur-&gt;next-&gt;val==value){\n                ListNode* tmp=cur-&gt;next;\n                cur-&gt;next=cur-&gt;next-&gt;next;\n                delete tmp;\n            }else{\n                cur=cur-&gt;next;\n            }\n        }\n        head=virtualnode-&gt;next;\n        delete virtualnode;\n        return head;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode%E7%9A%84%E9%93%BE%E8%A1%A8%E9%A2%98/%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/","title":"707 \u8bbe\u8ba1\u94fe\u8868","text":"<pre><code>class MyLinkedList {\npublic:\n    MyLinkedList() {\n        this-&gt;size = 0;\n        this-&gt;head = new ListNode(0);\n    }\n\n    int get(int index) {\n        if (index &lt; 0 || index &gt;= size) {\n            return -1;\n        }\n        ListNode *cur = head;\n        for (int i = 0; i &lt;= index; i++) {\n            cur = cur-&gt;next;\n        }\n        return cur-&gt;val;\n    }\n\n    void addAtHead(int val) {\n        addAtIndex(0, val);\n    }\n\n    void addAtTail(int val) {\n        addAtIndex(size, val);\n    }\n\n    void addAtIndex(int index, int val) {\n        if (index &gt; size) {\n            return;\n        }\n        index = max(0, index);\n        size++;\n        ListNode *pred = head;\n        for (int i = 0; i &lt; index; i++) {\n            pred = pred-&gt;next;\n        }\n        ListNode *toAdd = new ListNode(val);\n        toAdd-&gt;next = pred-&gt;next;\n        pred-&gt;next = toAdd;\n    }\n\n    void deleteAtIndex(int index) {\n        if (index &lt; 0 || index &gt;= size) {\n            return;\n        }\n        size--;\n        ListNode *pred = head;\n        for (int i = 0; i &lt; index; i++) {\n            pred = pred-&gt;next;\n        }\n        ListNode *p = pred-&gt;next;\n        pred-&gt;next = pred-&gt;next-&gt;next;\n        delete p;\n    }\nprivate:\n    int size;\n    ListNode *head;\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/","title":"\u300cDaily OI Round 4\u300dAnalysis","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c0f C \u7684\u4fe1\u606f\u6280\u672f\u8001\u5e08\u7ed9\u5c0f C \u5e03\u7f6e\u4e86\u4e00\u9879\u4f5c\u4e1a\uff0c\u4f5c\u4e1a\u5185\u5bb9\u5982\u4e0b\uff1a</p> <p>\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002\u4f60\u53ef\u4ee5\u628a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u53d8\u6210\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\uff0c\u8bbe\u53d8\u5316\u4e4b\u524d\u5b57\u7b26\u7684 ASCII \u7801\u4e3a \\(a\\)\uff0c\u53d8\u5316\u4e4b\u540e\u5b57\u7b26\u7684 ASCII \u7801\u4e3a \\(b\\)\uff0c\u5219\u8fd9\u6b21\u53d8\u5316\u6d88\u8017 \\(|a-b|\\) \u7684\u65f6\u95f4\u3002\u4f60\u9700\u8981\u628a\u6574\u4e2a\u5b57\u7b26\u4e32\u53d8\u6210\u53ea\u5305\u542b\u5927\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5c0f C \u8fd8\u6709\u8bed\u6587\u6570\u5b66\u82f1\u8bed\u7b49\u5f88\u591a\u5176\u4ed6\u91cd\u8981\u4f5c\u4e1a\u8981\u505a\uff0c\u4e3a\u4e86\u8282\u7701\u65f6\u95f4\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5c0f C \u6700\u5c11\u9700\u8981\u591a\u4e45\u624d\u80fd\u4ee4\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5927\u5199\u5b57\u6bcd\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \u8868\u793a\u8001\u5e08\u7ed9\u7684\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u884c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 \\(t\\)\uff0c\u8868\u793a\u4ee4\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5927\u5199\u5b57\u6bcd\u6700\u5c11\u82b1\u8d39\u591a\u5c11\u65f6\u95f4\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>AA0aa\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>31\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>3kyOu\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>89\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_4","title":"\u63d0\u793a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_5","title":"\u3010\u6837\u4f8b\u89e3\u91ca\u3011","text":"<p>\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u6700\u597d\u7684\u529e\u6cd5\u662f\u53d8\u6210 \\(\\texttt{AAAZZ}\\)\uff0c\u8fd9\u6837\u7684\u8bdd\u6d88\u8017\u5c31\u4e3a \\(0+0+|48-65|+|97-90|+|97-90|=31\\)\uff0c\u5bb9\u6613\u8bc1\u660e\u4e0d\u5b58\u5728\u66f4\u4f18\u7684\u89e3\u6cd5\u3002</p> <p>\u5176\u4e2d \\(48\\) \u662f\u5b57\u7b26 \\(\\texttt{0}\\) \u7684 ASCII \u7801\uff0c\\(65\\) \u662f\u5b57\u7b26 \\(\\texttt{A}\\) \u7684 ASCII \u7801\uff0c\\(90\\) \u662f\u5b57\u7b26 \\(\\texttt{Z}\\) \u7684 ASCII \u7801\uff0c\\(97\\) \u662f\u5b57\u7b26 \\(\\texttt{a}\\) \u7684 ASCII \u7801\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_6","title":"\u3010\u6570\u636e\u8303\u56f4\u3011","text":"<p>\u672c\u9898\u5f00\u542f\u6346\u7ed1\u6d4b\u8bd5\u3002</p> <p>\u8bbe \\(len\\) \u4e3a\u5b57\u7b26\u4e32 \\(s\\) \u7684\u957f\u5ea6\u3002</p> \\(\\text{Subtask}\\) \u5206\u503c \\(len \\le\\) \\(0\\) \\(10\\) \\(3\\) \\(1\\) \\(30\\) \\(10\\) \\(2\\) \\(60\\) \\(10^5\\) <p>\u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff0c\u4fdd\u8bc1\uff1a\\(1 \\le len \\le 10^5\\)\uff0c\u4e14 \\(s\\) \u4e2d\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002</p> <p>\u5c0f\u5199\u5b57\u6bcd\u53d8\u6210'A' \u6570\u5b57\u53d8\u6210\u2018Z'</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;cctype&gt; // \u5305\u542bstd::islower, std::isdigit\u7b49\u51fd\u6570\n\nint main() {\n    std::string s;\n    std::cin &gt;&gt; s;\n    int time = 0;\n\n    for (char &amp;c : s) {\n        if (std::islower(c)) {\n            // \u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199A\n            time += abs('Z' - c);\n        } else if (std::isdigit(c)) {\n            // \u6570\u5b57\u8f6c\u6362\u4e3a\u5927\u5199\n//            std::cout&lt;&lt;abs('A' - '0'-(c-'0') )&lt;&lt;std::endl;\n            time += abs('A' - '0'-(c-'0') );\n        }\n        // \u5982\u679c\u5df2\u7ecf\u662f\u5927\u5199\u5b57\u6bcd\uff0c\u5219\u4e0d\u9700\u8981\u8f6c\u6362\n    }\n\n    std::cout &lt;&lt; time &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#daily-oi-round-4square","title":"\u300cDaily OI Round 4\u300dSquare","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_7","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c0f A \u7ed9\u4e86\u4f60\u4e00\u4e2a\u8fb9\u957f\u4e3a \\(n\\) \u7684\u6b63\u65b9\u5f62\u7f51\u683c\uff0c\u4f60\u9700\u8981\u628a \\(1 \\sim n \\times n\\) \u8fd9\u4e9b\u7f16\u53f7\u586b\u5165\u8fd9\u4e2a\u7f51\u683c\u91cc\u9762\uff0c\u6ee1\u8db3\u6bcf\u4e00\u884c\u7684\u7f16\u53f7\u52a0\u8d77\u6765\u90fd\u662f\u5947\u6570\uff0c\u6bcf\u4e00\u5217\u7684\u7f16\u53f7\u52a0\u8d77\u6765\u90fd\u662f\u5076\u6570\u3002</p> <p>\u5728\u586b\u4e4b\u524d\uff0c\u4f60\u60f3\u77e5\u9053\u662f\u5426\u6709\u4efb\u4f55\u4e00\u79cd\u89e3\u6cd5\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u8f93\u51fa <code>Yes</code>\uff1b\u5426\u5219\uff0c\u8f93\u51fa <code>No</code>\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_8","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u6b63\u65b9\u5f62\u7f51\u683c\u7684\u8fb9\u957f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_9","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c<code>Yes</code> \u6216 <code>No</code>\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_3","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_4","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>2\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_5","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>Yes\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#2_3","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#2_4","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>755689\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#2_5","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>No\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_10","title":"\u63d0\u793a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_11","title":"\u3010\u6837\u4f8b\u89e3\u91ca\u3011","text":"<p>\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u8bbe \\(A\\) \u8868\u793a\u6b63\u65b9\u5f62\u7f51\u683c\uff0c\u5219\u6709 \\(A_{1,1}=1,A_{1,2}=3,A_{2,1}=2,A_{2,2}=4\\) \u7684\u89e3\u6cd5\u3002</p> <p>\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff0c\u53ef\u4ee5\u8bc1\u660e\u65e0\u89e3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_12","title":"\u3010\u6570\u636e\u8303\u56f4\u3011","text":"<p>\u672c\u9898\u5f00\u542f\u6346\u7ed1\u6d4b\u8bd5\u3002</p> \\(\\text{Subtask}\\) \u5206\u503c \\(n \\le\\) \\(0\\) \\(10\\) \\(10\\) \\(1\\) \\(20\\) \\(10^6\\) \\(2\\) \\(70\\) \\(10^{18}\\) <p>\u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff0c\u4fdd\u8bc1\uff1a\\(1 \\le n \\le 10^{18}\\)\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    long long n=0;\n    cin&gt;&gt;n;\n    if(n%2==0){\n        cout&lt;&lt;\"Yes\"&lt;&lt;endl;\n    }else{\n        cout&lt;&lt;\"No\"&lt;&lt;endl;\n    }\n    return 0;\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#daily-oi-round-4mine","title":"\u300cDaily OI Round 4\u300dMine","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_13","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c0f R \u7ecf\u8425\u7740\u4e00\u5bb6\u77ff\u573a\uff0c\u8fd9\u5bb6\u77ff\u573a\u4e00\u5171\u6709 \\(n\\) \u79cd\u77ff\u53ef\u4ee5\u5f00\u91c7\uff0c\u5f00\u91c7\u533a\u57df\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u6570\u8f74\uff0c\u7b2c \\(i\\) \u79cd\u77ff\u53ef\u4ee5\u5728\u6570\u8f74\u4e0a\u7684 \\([l_i,r_i]\\) \u8fd9\u4e2a\u533a\u95f4\u5185\u5f00\u91c7\u3002</p> <p>\u5c0f R \u60f3\u8981\u5728\u94c1\u5320\u94fa\u953b\u9020\u4e00\u4e9b\u88c5\u5907\uff0c\u4f46\u662f\u94c1\u5320\u7ed9\u4ed6\u6240\u9700\u8981\u7684\u77ff\u77f3\u5217\u8868\u4e0d\u5c0f\u5fc3\u5f04\u4e22\u4e86\u3002\u4ed6\u53ea\u77e5\u9053\uff0c\u94c1\u5320\u7ed9\u4ed6\u7684\u77ff\u77f3\u5217\u8868\u4e2d\u7684\u77ff\u77f3\u90fd\u662f\u8fd9\u5bb6\u77ff\u573a\u6709\u7684\uff08\u5217\u8868\u4e2d\u81f3\u5c11\u6709\u4e00\u79cd\u77ff\u77f3\uff09\u3002</p> <p>\u8fd9\u5bb6\u77ff\u573a\u6709 \\(m\\) \u4e2a\u91c7\u77ff\u70b9\uff0c\u7b2c \\(i\\) \u4e2a\u91c7\u77ff\u70b9\u5728\u6570\u8f74\u4e0a\u7684\u5750\u6807\u4e3a \\(a_i\\)\u3002\u53ef\u601c\u7684\u5c0f R \u60f3\u8981\u77e5\u9053\u5728\u6240\u6709\u53ef\u80fd\u7684\u77ff\u77f3\u5217\u8868\u4e2d\uff0c\u6709\u591a\u5c11\u79cd\u4f7f\u5f97\u5b58\u5728\u4e00\u4e2a\u91c7\u77ff\u70b9\u6ee1\u8db3\u4ed6\u53ea\u5728\u8fd9\u4e2a\u91c7\u77ff\u70b9\u5c31\u80fd\u591f\u91c7\u96c6\u5230\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u6240\u6709\u77ff\u77f3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_14","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(m\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(l_i,r_i\\)\uff0c\u8868\u793a\u7b2c \\(i\\) \u79cd\u77ff\u80fd\u88ab\u5f00\u91c7\u7684\u533a\u95f4\u3002</p> <p>\u7136\u540e \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 \\(a_i\\)\uff0c\u8868\u793a \\(m\\) \u4e2a\u91c7\u77ff\u70b9\u7684\u5750\u6807\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_15","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6ee1\u8db3\u6761\u4ef6\u7684\u5217\u8868\u6570\u91cf\u3002\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u7b54\u6848\u5bf9 \\(998244353\\) \u53d6\u6a21\u540e\u7684\u7ed3\u679c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_6","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_7","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>3 2\n7 11\n1 5\n3 8\n4\n7\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#1_8","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>5\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_16","title":"\u63d0\u793a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_17","title":"\u3010\u6837\u4f8b\u89e3\u91ca\u3011","text":"<p>\u7b2c\u4e00\u4e2a\u6837\u4f8b\u6709\u4e09\u79cd\u77ff\u7269\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u91c7\u77ff\u70b9 \\(1\\) \u91c7\u96c6\u5230\u7b2c \\(2,3\\) \u79cd\u77ff\u7269\uff0c\u5728\u91c7\u77ff\u70b9 \\(2\\) \u91c7\u96c6\u5230\u7b2c \\(1,3\\) \u79cd\u77ff\u7269\uff0c\u56e0\u6b64\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u5217\u8868\u5982\u4e0b\uff1a</p> \\[ [1],[2],[3],[1,3],[2,3] \\] <p>\u4e00\u5171 \\(5\\) \u79cd\u5217\u8868\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E3%80%90LGR-188-Div.3%E3%80%91%E6%B4%9B%E8%B0%B7%E5%9F%BA%E7%A1%80%E8%B5%9B%20%2312%20%26%20Daily%20OI%20Round%204/#_18","title":"\u3010\u6570\u636e\u8303\u56f4\u3011","text":"<p>\u672c\u9898\u91c7\u7528\u6346\u7ed1\u6d4b\u8bd5\u3002</p> \\(\\text{Subtask}\\) \u5206\u503c \\(n,m \\le\\) \\(0\\) \\(20\\) \\(20\\) \\(1\\) \\(20\\) \\(1000\\) \\(2\\) \\(60\\) \\(10^5\\) <p>\u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff1a\\(1\\le n,m\\le 10^5\\)\uff0c\\(1\\le l_i \\le r_i \\le 10^5\\)\uff0c\\(1\\le a_i \\le 10^5\\)\uff0c\u4fdd\u8bc1 \\(a_i\\) \u4e24\u4e24\u4e0d\u540c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/cf/954div3%20/","title":"A. X Axis","text":"<p>\u4e09\u4e2a\u70b9 f(a)=|a-x|+|b-x|+|c-x| x\u53d6abc\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u503c\uff0c\u7684\u6700\u5c0f\u503c \u5047\u8bbe\u53d6b\u5219 f(a)=|a-b|+|c-b|&lt;=(a-c) x\u5e94\u8be5\u53d6\u4e09\u8005\u7684\u4e2d\u95f4\u503c</p> <pre><code>#include&lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nint ans[3];\nint t;\nint main(){\n    cin&gt;&gt;t;\n    while(t--){\n        cin&gt;&gt;ans[0]&gt;&gt;ans[1]&gt;&gt;ans[2];\n        sort(ans,ans+3);\n        cout&lt;&lt;abs(ans[0]-ans[2])&lt;&lt;endl;\n    }\n    return 0;\n}```\n\n\n# B. Matrix Stabilization\n\n```cpp\n#include&lt;iostream&gt;\n\nusing namespace std;\n\nconst int N=110;\nint a[N][N];\nint dx[4]={0,0,-1,+1};\nint dy[4]={+1,-1,0,0};\n//\u4e0a\u4e0b\u5de6\u53f3\nbool solve(int x,int y,int n,int m){\n    int cnt=0;\n    for(int i=0;i&lt;4;i++){\n        int nx,ny;\n        nx=x+dx[i],ny=y+dy[i];\n        if((nx&gt;=1)&amp;&amp;(nx&lt;=n)&amp;&amp;(ny&gt;=1)&amp;&amp;(ny&lt;=m)){\n            if(a[nx][ny]&lt;a[x][y]){\n                cnt++;\n            }\n        }else{\n            cnt++;\n            continue;\n        }\n    }\n    if(cnt==4){\n        return true;\n    }else{\n        return false;\n    }\n}\nint main(){\n    int t;\n    cin&gt;&gt;t;\n    while(t--){\n        int n,m;\n        cin&gt;&gt;n&gt;&gt;m;\n        for(int i=1;i&lt;=n;i++){\n            for(int j=1;j&lt;=m;j++){\n                cin&gt;&gt;a[i][j];\n            }\n        }\n        for(int i=1;i&lt;=n;i++){\n            for(int j=1;j&lt;=m;j++){\n                if(solve(i,j,n,m)){\n                    i=1;\n                    j=1;\n                }\n            }\n        }\n\n        for(int i=1;i&lt;=n;i++){\n            for(int j=1;j&lt;=m;j++){\n                cout&lt;&lt;a[i][j]&lt;&lt;\" \";\n            }cout&lt;&lt;endl;\n        }\n\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/cf/954div3%20/#c-update-queries","title":"C. Update Queries","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/","title":"Valera and Tubes","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#_1","title":"\u9898\u9762\u7ffb\u8bd1","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6709\u4e00\u4e2an\u00d7m\u7684\u77e9\u5f62\u7f51\u683c</p> <p>\u5b9a\u4e49\u201c\u7ba1\u9053\u201d\u5982\u4e0b\uff1a</p> <p>\u662f\u4e00\u4e9b\u683c\u5b50\u7ec4\u6210\u7684\u5e8f\u5217 \u5e8f\u5217\u957f\u5ea6\u81f3\u5c11\u4e3a2</p> <p>\u5e8f\u5217\u4e2d\u4efb\u610f\u76f8\u90bb\u4e24\u4e2a\u683c\u5b50\u5fc5\u987b\u5728\u7f51\u683c\u4e2d\u4e5f\u76f8\u90bb\uff08\u56db\u8054\u901a\uff09</p> <p>\u5e8f\u5217\u4e2d\u4e0d\u80fd\u51fa\u73b0\u91cd\u590d\u7684\u683c\u5b50</p> <p>\u73b0\u5728\u8981\u7ed9\u51fak\u4e2a\u7ba1\u9053\u4f7f\u5f97\u6bcf\u4e2a\u683c\u5b50\u6070\u597d\u5c5e\u4e8e\u4e00\u4e2a\u7ba1\u9053</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e00\u884c \u4f9d\u6b21\u8f93\u5165 n m \u548c k\uff082\u2264n m\u2264300 2\u22642k\u2264n\u00d7m\uff09</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u6bcf\u4e2a\u7ba1\u9053\u6240\u5bf9\u5e94\u7684\u5e8f\u5217</p> <p>k\u884c \u7531\u82e5\u5e72Xi\u548cYi\u7ec4\u6210</p> <p>\u5982\u679c\u6709\u591a\u89e3 \u4ec5\u8f93\u51fa\u4e00\u79cd\u5373\u53ef</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>Valera has got a rectangle table consisting of $ n $ rows and $ m $ columns. Valera numbered the table rows starting from one, from top to bottom and the columns \u2013 starting from one, from left to right. We will represent cell that is on the intersection of row $ x $ and column $ y $ by a pair of integers $ (x,y) $ .</p> <p>Valera wants to place exactly $ k $ tubes on his rectangle table. A tube is such sequence of table cells $ (x_{1},y_{1}) $ , $ (x_{2},y_{2}) $ , $ ... $ , $ (x_{r},y_{r}) $ , that:</p> <ul> <li>$ r&gt;=2 $ ;</li> <li>for any integer $ i $ $ (1&lt;=i&lt;=r-1) $ the following equation $ |x_{i}-x_{i+1}|+|y_{i}-y_{i+1}|=1 $ holds;</li> <li>each table cell, which belongs to the tube, must occur exactly once in the sequence.</li> </ul> <p>Valera thinks that the tubes are arranged in a fancy manner if the following conditions are fulfilled:</p> <ul> <li>no pair of tubes has common cells;</li> <li>each cell of the table belongs to some tube.</li> </ul> <p>Help Valera to arrange $ k $ tubes on his rectangle table in a fancy manner.</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>The first line contains three space-separated integers $ n,m,k $ ( $ 2&lt;=n,m&lt;=300 $ ; $ 2&lt;=2k&lt;=n\u00b7m $ ) \u2014 the number of rows, the number of columns and the number of tubes, correspondingly.</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>Print $ k $ lines. In the $ i $ -th line print the description of the $ i $ -th tube: first print integer $ r_{i} $ (the number of tube cells), then print $ 2r_{i} $ integers $ x_{i1},y_{i1},x_{i2},y_{i2},...,x_{iri},y_{iri} $ (the sequence of table cells).</p> <p>If there are multiple solutions, you can print any of them. It is guaranteed that at least one solution exists.</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>3 3 3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>3 1 1 1 2 1 3\n3 2 1 2 2 2 3\n3 3 1 3 2 3 3\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#2","title":"\u6837\u4f8b #2","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#2_1","title":"\u6837\u4f8b\u8f93\u5165 #2","text":"<pre><code>2 3 1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#2_2","title":"\u6837\u4f8b\u8f93\u51fa #2","text":"<pre><code>6 1 1 1 2 1 3 2 3 2 2 2 1\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E6%80%9D%E7%BB%B4%E9%A2%98/1/#_5","title":"\u63d0\u793a","text":"<p>Picture for the first sample:</p> <p>Picture for the second sample:</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/","title":"908\u6700\u5927\u4e0d\u76f8\u4ea4\u533a\u95f4\u6570\u91cf","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\nconst int N  = 100010;\n//\u4fdd\u5b58\u533a\u95f4\nvector&lt;vector&lt;int&gt;&gt; a(N,vector&lt;int&gt;(2,0));\nint n;\n\nint main()\n{\n    cin &gt;&gt; n;\n    //\u8bfb\u5165\u533a\u95f4\n    for(int i = 0; i&lt; n; i++)\n    {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        a[i][0] = l;\n        a[i][1] = r;\n    }\n    // \u6309\u53f3\u7aef\u70b9\u6392\u5e8f\n    sort(a.begin(), a.begin() + n, [](vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b){return a[1] &lt; b[1];});\n    // res \u4fdd\u5b58\u7b54\u6848\uff0cend \u6700\u540e\u4e00\u4e2a\u9009\u4e2d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\n    int res = 0, end = -1e9 - 10;\n    // \u904d\u5386\u533a\u95f4\n    for(int i = 0; i &lt; n; i++)\n    {\n        // \u5982\u679c\u5f53\u524d\u5f53\u524d\u533a\u95f4\u548c\u6700\u540e\u4e00\u4e2a\u9009\u4e2d\u533a\u95f4\u6709\u91cd\u5408\uff0c\u5219\u8df3\u8fc7\n        if(end &gt;= a[i][0] &amp;&amp; end &lt;= a[i][1]) \n            continue;\n        else\n        {\n            // \u9009\u4e2d\u533a\u95f4\u6570\u91cf+1, \u66f4\u53f3\u7aef\u70b9\n            res++;\n            end = a[i][1];\n        }\n    }\n    cout &lt;&lt; res;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E6%8A%8A%E6%95%B0%E7%BB%84%E5%92%8C%E5%87%8F%E5%8D%8A%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/","title":"\u628a\u6570\u7ec4\u548c\u51cf\u534a\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570","text":"<p>2208.\u00a0\u5c06\u6570\u7ec4\u548c\u51cf\u534a\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570</p> <p>\u63d0\u793a</p> <p>\u4e2d\u7b49</p> <p>79</p> <p>\u76f8\u5173\u4f01\u4e1a</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\u00a0<code>nums</code>\u00a0\u3002\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4ece\u00a0<code>nums</code>\u00a0\u4e2d\u9009\u62e9\u00a0\u4efb\u610f\u00a0\u4e00\u4e2a\u6570\u5e76\u5c06\u5b83\u51cf\u5c0f\u5230\u00a0\u6070\u597d\u00a0\u4e00\u534a\u3002\uff08\u6ce8\u610f\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f60\u53ef\u4ee5\u5bf9\u51cf\u534a\u8fc7\u7684\u6570\u7ee7\u7eed\u6267\u884c\u64cd\u4f5c\uff09</p> <p>\u8bf7\u4f60\u8fd4\u56de\u5c06\u00a0<code>nums</code>\u00a0\u6570\u7ec4\u548c\u00a0\u81f3\u5c11\u00a0\u51cf\u5c11\u4e00\u534a\u7684\u00a0\u6700\u5c11\u00a0\u64cd\u4f5c\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [5,19,8,1] \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u521d\u59cb nums \u7684\u548c\u4e3a 5 + 19 + 8 + 1 = 33 \u3002 \u4ee5\u4e0b\u662f\u5c06\u6570\u7ec4\u548c\u51cf\u5c11\u81f3\u5c11\u4e00\u534a\u7684\u4e00\u79cd\u65b9\u6cd5\uff1a \u9009\u62e9\u6570\u5b57 19 \u5e76\u51cf\u5c0f\u4e3a 9.5 \u3002 \u9009\u62e9\u6570\u5b57 9.5 \u5e76\u51cf\u5c0f\u4e3a 4.75 \u3002 \u9009\u62e9\u6570\u5b57 8 \u5e76\u51cf\u5c0f\u4e3a 4 \u3002 \u6700\u7ec8\u6570\u7ec4\u4e3a [5, 4.75, 4, 1] \uff0c\u548c\u4e3a 5 + 4.75 + 4 + 1 = 14.75 \u3002 nums \u7684\u548c\u51cf\u5c0f\u4e86 33 - 14.75 = 18.25 \uff0c\u51cf\u5c0f\u7684\u90e8\u5206\u8d85\u8fc7\u4e86\u521d\u59cb\u6570\u7ec4\u548c\u7684\u4e00\u534a\uff0c18.25 &gt;= 33/2 = 16.5 \u3002 \u6211\u4eec\u9700\u8981 3 \u4e2a\u64cd\u4f5c\u5b9e\u73b0\u9898\u76ee\u8981\u6c42\uff0c\u6240\u4ee5\u8fd4\u56de 3 \u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u65e0\u6cd5\u901a\u8fc7\u5c11\u4e8e 3 \u4e2a\u64cd\u4f5c\u4f7f\u6570\u7ec4\u548c\u51cf\u5c11\u81f3\u5c11\u4e00\u534a\u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [3,8,20] \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u521d\u59cb nums \u7684\u548c\u4e3a 3 + 8 + 20 = 31 \u3002 \u4ee5\u4e0b\u662f\u5c06\u6570\u7ec4\u548c\u51cf\u5c11\u81f3\u5c11\u4e00\u534a\u7684\u4e00\u79cd\u65b9\u6cd5\uff1a \u9009\u62e9\u6570\u5b57 20 \u5e76\u51cf\u5c0f\u4e3a 10 \u3002 \u9009\u62e9\u6570\u5b57 10 \u5e76\u51cf\u5c0f\u4e3a 5 \u3002 \u9009\u62e9\u6570\u5b57 3 \u5e76\u51cf\u5c0f\u4e3a 1.5 \u3002 \u6700\u7ec8\u6570\u7ec4\u4e3a [1.5, 8, 5] \uff0c\u548c\u4e3a 1.5 + 8 + 5 = 14.5 \u3002 nums \u7684\u548c\u51cf\u5c0f\u4e86 31 - 14.5 = 16.5 \uff0c\u51cf\u5c0f\u7684\u90e8\u5206\u8d85\u8fc7\u4e86\u521d\u59cb\u6570\u7ec4\u548c\u7684\u4e00\u534a\uff0c 16.5 &gt;= 31/2 = 15.5 \u3002 \u6211\u4eec\u9700\u8981 3 \u4e2a\u64cd\u4f5c\u5b9e\u73b0\u9898\u76ee\u8981\u6c42\uff0c\u6240\u4ee5\u8fd4\u56de 3 \u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u65e0\u6cd5\u901a\u8fc7\u5c11\u4e8e 3 \u4e2a\u64cd\u4f5c\u4f7f\u6570\u7ec4\u548c\u51cf\u5c11\u81f3\u5c11\u4e00\u534a\u3002</p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>1 &lt;= nums[i] &lt;= 107</code></li> </ul> <p>\u6bcf\u6b21\u6311\u9009\u6700\u5927\u7684\u6570</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int halveArray(vector&lt;int&gt;&amp; nums) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 priority_queue&lt;double&gt; heap;\n\n\u00a0 \u00a0 \u00a0 \u00a0 double sum=0.0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int x:nums)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 heap.push(x);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum+=x;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 sum/=2.0;\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 int count=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 while(sum&gt;0)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 double t=heap.top()/2.0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 heap.pop();\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum-=t;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 heap.push(t);\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return count;\n\n\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/","title":"\u6446\u52a8\u5e8f\u5217","text":"<p>376.\u00a0\u6446\u52a8\u5e8f\u5217</p> <p>\u5982\u679c\u8fde\u7eed\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u4e25\u683c\u5730\u5728\u6b63\u6570\u548c\u8d1f\u6570\u4e4b\u95f4\u4ea4\u66ff\uff0c\u5219\u6570\u5b57\u5e8f\u5217\u79f0\u4e3a\u00a0\u6446\u52a8\u5e8f\u5217 \u3002\u7b2c\u4e00\u4e2a\u5dee\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u53ef\u80fd\u662f\u6b63\u6570\u6216\u8d1f\u6570\u3002\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\u6216\u8005\u542b\u4e24\u4e2a\u4e0d\u7b49\u5143\u7d20\u7684\u5e8f\u5217\u4e5f\u89c6\u4f5c\u6446\u52a8\u5e8f\u5217\u3002</p> <ul> <li> <p>\u4f8b\u5982\uff0c\u00a0<code>[1, 7, 4, 9, 2, 5]</code>\u00a0\u662f\u4e00\u4e2a\u00a0\u6446\u52a8\u5e8f\u5217\u00a0\uff0c\u56e0\u4e3a\u5dee\u503c\u00a0<code>(6, -3, 5, -7, 3)</code>\u00a0\u662f\u6b63\u8d1f\u4ea4\u66ff\u51fa\u73b0\u7684\u3002</p> </li> <li> <p>\u76f8\u53cd\uff0c<code>[1, 4, 7, 2, 5]</code>\u00a0\u548c\u00a0<code>[1, 7, 4, 5, 5]</code>\u00a0\u4e0d\u662f\u6446\u52a8\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u524d\u4e24\u4e2a\u5dee\u503c\u90fd\u662f\u6b63\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u5dee\u503c\u4e3a\u96f6\u3002</p> </li> </ul> <p>\u5b50\u5e8f\u5217\u00a0\u53ef\u4ee5\u901a\u8fc7\u4ece\u539f\u59cb\u5e8f\u5217\u4e2d\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5143\u7d20\u6765\u83b7\u5f97\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u4fdd\u6301\u5176\u539f\u59cb\u987a\u5e8f\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0<code>nums</code>\u00a0\uff0c\u8fd4\u56de\u00a0<code>nums</code>\u00a0\u4e2d\u4f5c\u4e3a\u00a0\u6446\u52a8\u5e8f\u5217\u00a0\u7684\u00a0\u6700\u957f\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u00a0\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,7,4,9,2,5] \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a\u6574\u4e2a\u5e8f\u5217\u5747\u4e3a\u6446\u52a8\u5e8f\u5217\uff0c\u5404\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u503c\u4e3a (6, -3, 5, -7, 3) \u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,17,5,10,13,15,10,5,16,8] \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a\u8fd9\u4e2a\u5e8f\u5217\u5305\u542b\u51e0\u4e2a\u957f\u5ea6\u4e3a 7 \u6446\u52a8\u5e8f\u5217\u3002 \u5176\u4e2d\u4e00\u4e2a\u662f [1, 17, 10, 13, 10, 16, 8] \uff0c\u5404\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u503c\u4e3a (16, -7, 3, -3, 6, -8) \u3002</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,3,4,5,6,7,8,9] \u8f93\u51fa\uff1a2</p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 int wiggleMaxLength(vector&lt;int&gt;&amp; nums) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int n=nums.size();\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(n&lt;2) return n;\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 int ret=0,left=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int i=0;i&lt;n-1;i++)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int right=nums[i+1]-nums[i];\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(right==0) continue;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(right*left&lt;=0) ret++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 left=right;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return ret+1;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E6%9C%80%E5%A4%A7%E6%95%B0/","title":"\u6700\u5927\u6570","text":"<p>179.\u00a0\u6700\u5927\u6570</p> <p>\u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570\u00a0<code>nums</code>\uff0c\u91cd\u65b0\u6392\u5217\u6bcf\u4e2a\u6570\u7684\u987a\u5e8f\uff08\u6bcf\u4e2a\u6570\u4e0d\u53ef\u62c6\u5206\uff09\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002</p> <p>\u6ce8\u610f\uff1a\u8f93\u51fa\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u6574\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165<code>\uff1a</code><code>nums = [10,2]</code> \u8f93\u51fa\uff1a<code>\"210\"</code></p> <p>\u793a\u4f8b\u00a02\uff1a</p> <p>\u8f93\u5165<code>\uff1a</code><code>nums = [3,30,34,5,9]</code> \u8f93\u51fa\uff1a<code>\"9534330\"</code></p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 109</code></li> </ul> <p>\u4e2a\u4eba\u611f\u89c9\u504f\u5411\u8bed\u6cd5\u9898\u4e00\u4e9b\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8d2a\u5fc3\u5f88\u597d\u770b\u7684\u51fa\u6765</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 string largestNumber(vector&lt;int&gt;&amp; nums) {\n\n\u00a0 \u00a0 \u00a0 \u00a0// \u4f18\u5316\uff1a\u628a\u6240\u6709\u7684\u6570\u8f6c\u5316\u6210\u5b57\u7b26\u4e32\n\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;string&gt; strs;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(int x : nums) strs.push_back(to_string(x));\n\n\u00a0 \u00a0 \u00a0 \u00a0 sort(strs.begin(),strs.end(),[](const string&amp; s1,const string&amp; s2)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return s1+s2&gt;s2+s1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 });\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 string ret;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(auto x:strs)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ret+=x;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(ret[0]=='0') return \"0\";\n\n\u00a0 \u00a0 \u00a0 \u00a0 return ret;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6/","title":"\u67e0\u6aac\u6c34\u627e\u96f6","text":"<p>860.\u00a0\u67e0\u6aac\u6c34\u627e\u96f6</p> <p>\u7b80\u5355</p> <p>546</p> <p>\u76f8\u5173\u4f01\u4e1a</p> <p>\u5728\u67e0\u6aac\u6c34\u644a\u4e0a\uff0c\u6bcf\u4e00\u676f\u67e0\u6aac\u6c34\u7684\u552e\u4ef7\u4e3a\u00a0<code>5</code>\u00a0\u7f8e\u5143\u3002\u987e\u5ba2\u6392\u961f\u8d2d\u4e70\u4f60\u7684\u4ea7\u54c1\uff0c\uff08\u6309\u8d26\u5355\u00a0<code>bills</code>\u00a0\u652f\u4ed8\u7684\u987a\u5e8f\uff09\u4e00\u6b21\u8d2d\u4e70\u4e00\u676f\u3002</p> <p>\u6bcf\u4f4d\u987e\u5ba2\u53ea\u4e70\u4e00\u676f\u67e0\u6aac\u6c34\uff0c\u7136\u540e\u5411\u4f60\u4ed8\u00a0<code>5</code>\u00a0\u7f8e\u5143\u3001<code>10</code>\u00a0\u7f8e\u5143\u6216\u00a0<code>20</code>\u00a0\u7f8e\u5143\u3002\u4f60\u5fc5\u987b\u7ed9\u6bcf\u4e2a\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u4e5f\u5c31\u662f\u8bf4\u51c0\u4ea4\u6613\u662f\u6bcf\u4f4d\u987e\u5ba2\u5411\u4f60\u652f\u4ed8\u00a0<code>5</code>\u00a0\u7f8e\u5143\u3002</p> <p>\u6ce8\u610f\uff0c\u4e00\u5f00\u59cb\u4f60\u624b\u5934\u6ca1\u6709\u4efb\u4f55\u96f6\u94b1\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0<code>bills</code>\u00a0\uff0c\u5176\u4e2d\u00a0<code>bills[i]</code>\u00a0\u662f\u7b2c\u00a0<code>i</code>\u00a0\u4f4d\u987e\u5ba2\u4ed8\u7684\u8d26\u3002\u5982\u679c\u4f60\u80fd\u7ed9\u6bcf\u4f4d\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u8fd4\u56de\u00a0<code>true</code>\u00a0\uff0c\u5426\u5219\u8fd4\u56de\u00a0<code>false</code>\u00a0\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1abills = [5,5,5,10,20] \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a \u524d 3 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u6536\u53d6 3 \u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002 \u7b2c 4 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6536\u53d6\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\uff0c\u5e76\u8fd4\u8fd8 5 \u7f8e\u5143\u3002 \u7b2c 5 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u627e\u8fd8\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\u548c\u4e00\u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002 \u7531\u4e8e\u6240\u6709\u5ba2\u6237\u90fd\u5f97\u5230\u4e86\u6b63\u786e\u7684\u627e\u96f6\uff0c\u6240\u4ee5\u6211\u4eec\u8f93\u51fa true\u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1abills = [5,5,10,10,20] \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a \u524d 2 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u6536\u53d6 2 \u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002 \u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684 2 \u4f4d\u987e\u5ba2\uff0c\u6211\u4eec\u6536\u53d6\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\uff0c\u7136\u540e\u8fd4\u8fd8 5 \u7f8e\u5143\u3002 \u5bf9\u4e8e\u6700\u540e\u4e00\u4f4d\u987e\u5ba2\uff0c\u6211\u4eec\u65e0\u6cd5\u9000\u56de 15 \u7f8e\u5143\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u53ea\u6709\u4e24\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\u3002 \u7531\u4e8e\u4e0d\u662f\u6bcf\u4f4d\u987e\u5ba2\u90fd\u5f97\u5230\u4e86\u6b63\u786e\u7684\u627e\u96f6\uff0c\u6240\u4ee5\u7b54\u6848\u662f false\u3002</p> <p>5\u5757\u94b1\u4e0d\u9700\u8981\u627e\u96f6\uff0c10\u5757\u94b1\u627e\u4e94\u5757\uff0c20\u5757\u94b1\u9700\u898110+5\u6216\u80055+5+5 \u524d\u8005\u4f18\u5148\uff0c\u56e0\u4e3a5\u5143\u6bd5\u7adf\u7075\u6d3b\u73cd\u8d35</p> <p>\u8bc1\u660e\u65b9\u6cd5\uff1a\u4ea4\u6362\u8bba\u8bc1\u6cd5 \u8d2a\u5fc3\u89e3\uff1a a b c d e f\u7684\u65b9\u6cd5\u89e3\u51b3\u7684 \u6700\u4f18\u89e3\uff1a e d a f b c\u4e0d\u7834\u574f\u6700\u4f18\u7684\u60c5\u51b5\u4e0b\u8f6c\u6362\u4e3a\u4e0a\u8ff0\u7684\u987a\u5e8f</p> <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 bool lemonadeChange(vector&lt;int&gt;&amp; bills) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 int five=0,ten=0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for(auto x:bills)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(x==5)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 five++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }else if(x==10)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(five==0) return false;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else{\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 five--;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ten++;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }else{\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(ten&amp;&amp;five)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 five--,ten--;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else if(five&gt;=3){\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 five-=3;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }else{\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return true;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E7%AE%80%E4%BB%8B/","title":"\u7b80\u4ecb","text":"<p>\u4ec0\u4e48\u662f\u8d2a\u5fc3\u7b97\u6cd5\uff1f \u8d2a\u5fc3\u7684\u7b56\u7565\u5c31\u662f\u2014\u2014\u5c40\u90e8\u6700\u4f18-&gt;\u5168\u5c40\u6700\u4f18 1.\u628a\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u6b65 2.\u89e3\u51b3\u6bcf\u4e00\u6b65\u7684\u65f6\u5019\uff0c\u90fd\u9009\u62e9\u5f53\u524d\u770b\u8d77\u6765\u201c\u6700\u4f18\u7684\u201d\u89e3\u6cd5 3.\u201c\u5e0c\u671b\u201d\u5f97\u5230\u5168\u5c40\u6700\u4f18\u89e3</p>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E7%AE%80%E4%BB%8B/#_1","title":"\u627e\u96f6\u95ee\u9898","text":"<p>\u627e\u96f6\u94b1\uff08\u6700\u5c11\u7684\u5f20\u6570\uff09</p>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E7%AE%80%E4%BB%8B/#_2","title":"\u6700\u5c0f\u8def\u5f84\u548c","text":""},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E7%AE%80%E4%BB%8B/#_3","title":"\u80cc\u5305\u95ee\u9898","text":"<p>1.\u8d2a\u5fc3\u7b97\u6cd5\u7684\u7279\u70b9     \u8d2a\u5fc3\u7b56\u7565\u7684\u63d0\u51fa\u6ca1\u6709\u4e00\u4e2a\u6807\u51c6\u7684     \u6bcf\u4e00\u9053\u9898\u7684\u8d2a\u5fc3\u7b56\u7565\u90fd\u662f\u4e0d\u540c\u7684</p> <p>2.\u8d2a\u5fc3\u7b56\u7565\u7684\u6b63\u786e\u6027     \u6b63\u786e\u7684\u8d2a\u5fc3\u7684\u7b56\u7565\u662f\u9700\u8981\u8bc1\u660e\u7684</p>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/","title":"\u4ec0\u4e48\u662f\u8d2a\u5fc3\u7b97\u6cd5","text":"<p>\u4fdd\u8bc1\u5c40\u90e8\u6700\u4f18\uff0c\u6700\u540e\u80fd\u5b9e\u73b0\u5168\u5c40\u6700\u4f18\u7684\u7b97\u6cd5\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#455","title":"455\u5206\u53d1\u997c\u5e72","text":"<p>455\u5206\u53d1\u997c\u5e72</p> <p>\u5047\u8bbe\u4f60\u662f\u4e00\u4f4d\u5f88\u68d2\u7684\u5bb6\u957f\uff0c\u60f3\u8981\u7ed9\u4f60\u7684\u5b69\u5b50\u4eec\u4e00\u4e9b\u5c0f\u997c\u5e72\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5b69\u5b50\u6700\u591a\u53ea\u80fd\u7ed9\u4e00\u5757\u997c\u5e72\u3002</p> <p>\u5bf9\u6bcf\u4e2a\u5b69\u5b50 i\uff0c\u90fd\u6709\u4e00\u4e2a\u80c3\u53e3\u503c g[i]\uff0c\u8fd9\u662f\u80fd\u8ba9\u5b69\u5b50\u4eec\u6ee1\u8db3\u80c3\u53e3\u7684\u997c\u5e72\u7684\u6700\u5c0f\u5c3a\u5bf8\uff1b\u5e76\u4e14\u6bcf\u5757\u997c\u5e72 j\uff0c\u90fd\u6709\u4e00\u4e2a\u5c3a\u5bf8 s[j] \u3002\u5982\u679c s[j] &gt;= g[i]\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u997c\u5e72 j \u5206\u914d\u7ed9\u5b69\u5b50 i \uff0c\u8fd9\u4e2a\u5b69\u5b50\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\u4f60\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6ee1\u8db3\u8d8a\u591a\u6570\u91cf\u7684\u5b69\u5b50\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u6570\u503c\u3002</p> <p>\u793a\u4f8b 1:</p> <p>\u8f93\u5165: g = [1,2,3], s = [1,1] \u8f93\u51fa: 1 \u89e3\u91ca:  \u4f60\u6709\u4e09\u4e2a\u5b69\u5b50\u548c\u4e24\u5757\u5c0f\u997c\u5e72\uff0c3\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f\uff1a1,2,3\u3002 \u867d\u7136\u4f60\u6709\u4e24\u5757\u5c0f\u997c\u5e72\uff0c\u7531\u4e8e\u4ed6\u4eec\u7684\u5c3a\u5bf8\u90fd\u662f1\uff0c\u4f60\u53ea\u80fd\u8ba9\u80c3\u53e3\u503c\u662f1\u7684\u5b69\u5b50\u6ee1\u8db3\u3002 \u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa1\u3002</p> <p>\u793a\u4f8b 2:</p> <p>\u8f93\u5165: g = [1,2], s = [1,2,3] \u8f93\u51fa: 2 \u89e3\u91ca:  \u4f60\u6709\u4e24\u4e2a\u5b69\u5b50\u548c\u4e09\u5757\u5c0f\u997c\u5e72\uff0c2\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f1,2\u3002 \u4f60\u62e5\u6709\u7684\u997c\u5e72\u6570\u91cf\u548c\u5c3a\u5bf8\u90fd\u8db3\u4ee5\u8ba9\u6240\u6709\u5b69\u5b50\u6ee1\u8db3\u3002 \u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa2.</p> <p>\u56e0\u4e3a\u9965\u997f\u5ea6\u6700\u5c0f\u7684\u5b69\u5b50\u6700\u5bb9\u6613\u5403\u9971\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u8003\u8651\u8fd9\u4e2a\u5b69\u5b50\u3002\u4e3a\u4e86\u5c3d\u91cf\u4f7f\u5f97\u5269\u4e0b\u7684\u997c\u5e72\u53ef \u4ee5\u6ee1\u8db3\u9965\u997f\u5ea6\u66f4\u5927\u7684\u5b69\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u628a\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5b69\u5b50\u9965\u997f\u5ea6\u7684\u3001\u4e14\u5927\u5c0f\u6700\u5c0f\u7684\u997c\u5e72\u7ed9\u8fd9 \u4e2a\u5b69\u5b50\u3002\u6ee1\u8db3\u4e86\u8fd9\u4e2a\u5b69\u5b50\u4e4b\u540e\uff0c\u6211\u4eec\u91c7\u53d6\u540c\u6837\u7684\u7b56\u7565\uff0c\u8003\u8651\u5269\u4e0b\u5b69\u5b50\u91cc\u9965\u997f\u5ea6\u6700\u5c0f\u7684\u5b69\u5b50\uff0c\u76f4\u5230 \u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u997c\u5e72\u5b58\u5728\u3002</p> <p>\u5c06\u4e24\u4e2a\u6570\u7ec4\u90fd\u6392\u5e8f\uff0c\u7528\u6700\u5c0f\u7684\u997c\u5e72\u53bb\u627e\u54ea\u4e2a\u5b69\u5b50\u80fd\u6ee1\u8db3\u6761\u4ef6\u3002 <pre><code>class Solution {\npublic:\n    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) {\n        sort(g.begin(),g.end());\n        sort(s.begin(),s.end());\n        int child=0,cookie=0;\n        while(child&lt;g.size()&amp;&amp;cookie&lt;s.size()){\n            if(g[child]&lt;=s[cookie]) ++child;\n            ++cookie;\n        }\n        return child;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#135","title":"135. \u5206\u53d1\u7cd6\u679c","text":"<p>n \u4e2a\u5b69\u5b50\u7ad9\u6210\u4e00\u6392\u3002\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ratings \u8868\u793a\u6bcf\u4e2a\u5b69\u5b50\u7684\u8bc4\u5206\u3002</p> <p>\u4f60\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u8981\u6c42\uff0c\u7ed9\u8fd9\u4e9b\u5b69\u5b50\u5206\u53d1\u7cd6\u679c\uff1a</p> <p>\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u914d\u5230 1 \u4e2a\u7cd6\u679c\u3002 \u76f8\u90bb\u4e24\u4e2a\u5b69\u5b50\u8bc4\u5206\u66f4\u9ad8\u7684\u5b69\u5b50\u4f1a\u83b7\u5f97\u66f4\u591a\u7684\u7cd6\u679c\u3002 \u8bf7\u4f60\u7ed9\u6bcf\u4e2a\u5b69\u5b50\u5206\u53d1\u7cd6\u679c\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u9700\u8981\u51c6\u5907\u7684 \u6700\u5c11\u7cd6\u679c\u6570\u76ee \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1aratings = [1,0,2] \u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a\u4f60\u53ef\u4ee5\u5206\u522b\u7ed9\u7b2c\u4e00\u4e2a\u3001\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u4e09\u4e2a\u5b69\u5b50\u5206\u53d1 2\u30011\u30012 \u9897\u7cd6\u679c\u3002 \u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1aratings = [1,2,2] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u4f60\u53ef\u4ee5\u5206\u522b\u7ed9\u7b2c\u4e00\u4e2a\u3001\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u4e09\u4e2a\u5b69\u5b50\u5206\u53d1 1\u30012\u30011 \u9897\u7cd6\u679c\u3002      \u7b2c\u4e09\u4e2a\u5b69\u5b50\u53ea\u5f97\u5230 1 \u9897\u7cd6\u679c\uff0c\u8fd9\u6ee1\u8db3\u9898\u9762\u4e2d\u7684\u4e24\u4e2a\u6761\u4ef6\u3002</p> <p>\u53ea\u9700\u8981\u7b80\u5355\u7684\u4e24\u6b21\u904d\u5386\u5373\u53ef\uff1a\u628a\u6240\u6709\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u521d\u59cb\u5316\u4e3a 1\uff1b \u5148\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u53f3\u8fb9\u5b69\u5b50\u7684\u8bc4\u5206\u6bd4\u5de6\u8fb9\u7684\u9ad8\uff0c\u5219\u53f3\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u66f4\u65b0\u4e3a\u5de6\u8fb9\u5b69\u5b50\u7684 \u7cd6\u679c\u6570\u52a0 1\uff1b\u518d\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u5de6\u8fb9\u5b69\u5b50\u7684\u8bc4\u5206\u6bd4\u53f3\u8fb9\u7684\u9ad8\uff0c\u4e14\u5de6\u8fb9\u5b69\u5b50\u5f53\u524d\u7684\u7cd6\u679c\u6570 \u4e0d\u5927\u4e8e\u53f3\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\uff0c\u5219\u5de6\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u66f4\u65b0\u4e3a\u53f3\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u52a0 1\u3002\u901a\u8fc7\u8fd9\u4e24\u6b21\u904d\u5386\uff0c \u5206\u914d\u7684\u7cd6\u679c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e86\u3002\u8fd9\u91cc\u7684\u8d2a\u5fc3\u7b56\u7565\u5373\u4e3a\uff0c\u5728\u6bcf\u6b21\u904d\u5386\u4e2d\uff0c\u53ea\u8003\u8651\u5e76\u66f4\u65b0\u76f8\u90bb\u4e00 \u4fa7\u7684\u5927\u5c0f\u5173\u7cfb\u3002</p> <pre><code>class Solution {\npublic:\n    int candy(vector&lt;int&gt;&amp; ratings) {\n        int n=ratings.size();\n        if(n&lt;2) return n;\n        vector ans(n,1);\n        for(int i=1;i&lt;n;i++){\n            if(ratings[i]&gt;ratings[i-1]){\n                ans[i]=ans[i-1]+1;\n            }\n        }\n\n        for(int i=n-1;i&gt;0;i--){\n            if(ratings[i]&lt;ratings[i-1]){\n                ans[i-1] = max(ans[i-1], ans[i] + 1);\n            }\n        }\n        return accumulate(ans.begin(),ans.end(),0);\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#435","title":"435. \u65e0\u91cd\u53e0\u533a\u95f4","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408 intervals \uff0c\u5176\u4e2d intervals[i] = [starti, endi] \u3002\u8fd4\u56de \u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0 \u3002</p> <p>\u793a\u4f8b 1:</p> <p>\u8f93\u5165: intervals = [[1,2],[2,3],[3,4],[1,3]] \u8f93\u51fa: 1 \u89e3\u91ca: \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002 \u793a\u4f8b 2:</p> <p>\u8f93\u5165: intervals = [ [1,2], [1,2], [1,2] ] \u8f93\u51fa: 2 \u89e3\u91ca: \u4f60\u9700\u8981\u79fb\u9664\u4e24\u4e2a [1,2] \u6765\u4f7f\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002 \u793a\u4f8b 3:</p> <p>\u8f93\u5165: intervals = [ [1,2], [2,3] ] \u8f93\u51fa: 0 \u89e3\u91ca: \u4f60\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u662f\u65e0\u91cd\u53e0\u7684\u4e86\u3002</p> <p>\u63d0\u793a:</p> <p>1 &lt;= intervals.length &lt;= 105 intervals[i].length == 2 -5 * 104 &lt;= starti &lt; endi &lt;= 5 * 104</p> <p>\u6c42\u6700\u5c11\u7684\u79fb\u9664\u533a\u95f4\u4e2a\u6570\uff0c\u7b49\u4ef7\u4e8e\u5c3d\u91cf\u591a\u4fdd\u7559\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u3002\u5728\u9009\u62e9\u8981\u4fdd\u7559\u533a\u95f4\u65f6\uff0c\u533a\u95f4\u7684\u7ed3 \u5c3e\u5341\u5206\u91cd\u8981\uff1a\u9009\u62e9\u7684\u533a\u95f4\u7ed3\u5c3e\u8d8a\u5c0f\uff0c\u4f59\u7559\u7ed9\u5176\u5b83\u533a\u95f4\u7684\u7a7a\u95f4\u5c31\u8d8a\u5927\uff0c\u5c31\u8d8a\u80fd\u4fdd\u7559\u66f4\u591a\u7684\u533a\u95f4\u3002\u56e0 \u6b64\uff0c\u6211\u4eec\u91c7\u53d6\u7684\u8d2a\u5fc3\u7b56\u7565\u4e3a\uff0c\u4f18\u5148\u4fdd\u7559\u7ed3\u5c3e\u5c0f\u4e14\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\u3002 \u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u4e3a\uff0c\u5148\u628a\u533a\u95f4\u6309\u7167\u7ed3\u5c3e\u7684\u5927\u5c0f\u8fdb\u884c\u589e\u5e8f\u6392\u5e8f\uff0c\u6bcf\u6b21\u9009\u62e9\u7ed3\u5c3e\u6700\u5c0f\u4e14\u548c\u524d\u4e00\u4e2a\u9009 \u62e9\u7684\u533a\u95f4\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 C++ \u7684 Lambda\uff0c\u7ed3\u5408 std::sort() \u51fd\u6570\u8fdb\u884c\u81ea\u5b9a\u4e49\u6392 \u5e8f\u3002 \u5728\u6837\u4f8b\u4e2d\uff0c\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e3a [[1,2], [1,3], [2,4]]\u3002\u6309\u7167\u6211\u4eec\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u9996\u5148\u521d\u59cb\u5316\u4e3a\u533a\u95f4 [1,2]\uff1b\u7531\u4e8e [1,3] \u4e0e [1,2] \u76f8\u4ea4\uff0c\u6211\u4eec\u8df3\u8fc7\u8be5\u533a\u95f4\uff1b\u7531\u4e8e [2,4] \u4e0e [1,2] \u4e0d\u76f8\u4ea4\uff0c\u6211\u4eec\u5c06\u5176\u4fdd\u7559\u3002\u56e0 \u6b64\u6700\u7ec8\u4fdd\u7559\u7684\u533a\u95f4\u4e3a [[1,2], [2,4]]</p> <pre><code>class Solution {\npublic:\n    int eraseOverlapIntervals(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        if (intervals.empty()) {\n            return 0;\n        }\n        int n = intervals.size();\n        sort(intervals.begin(), intervals.end(),\n             [](vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b) { return a[1] &lt; b[1]; });\n        int removed = 0, prev = intervals[0][1];\n        for (int i = 1; i &lt; n; ++i) {\n            if (intervals[i][0] &lt; prev) {\n                ++removed;\n            } else {\n                prev = intervals[i][1];\n            }\n        }\n        return removed;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/","title":"\u9a8c\u8bc1\u662f\u5426\u662f\u641c\u7d22\u6811","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_2","title":"\u4e2d\u5e8f\u904d\u5386","text":"<p>\u5229\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u5982\u679c\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u662f\u6709\u5e8f\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u641c\u7d22\u6811 \u501f\u52a9\u5168\u5c40\u53d8\u91cf\u7684\u4f18\u8d8a\u6027\uff0c\u6bcf\u6b21\u8bb0\u5f55\u4e2d\u5e8f\u904d\u5386\u8fc7\u7a0b\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u4e0e\u5f53\u524d\u503c\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u5f53\u524d\u503c\u5927\u4e8e\u7b49\u4e8e\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u8bf4\u660e\uff0c\u6b64\u65f6\u8fd8\u662f\u7b26\u5408\u641c\u7d22\u6811\u3002 \u6700\u540e\u4e2d\u5e8f\u904d\u5386\uff0c\u5de6\u6839\u53f3\u7684\u7ed3\u679c\u76f8\u4e0e\u3002 <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    long long pre=LONG_MIN;\npublic:\n    bool isValidBST(TreeNode* root) {\n        if(root==nullptr){\n            return true;\n        }\n\n        bool left=isValidBST(root-&gt;left);\n        bool cur=false;\n        if(root-&gt;val&gt;pre)   cur=true;\n        pre=root-&gt;val;\n        bool right=isValidBST(root-&gt;right);\n        return left&amp;&amp;right&amp;&amp;cur;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_3","title":"\u526a\u679d\u4f18\u5316","text":"<p>\u5982\u679c\u5de6\u5b50\u6811\u4e3a\u5426\uff0c\u4e0d\u9700\u8981\u5224\u65ad\u5f53\u524d\u7ed3\u70b9\u548c\u5176\u53f3\u5b50\u6811\u7684\u60c5\u51b5\u3002 <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    long pre=LONG_MIN;\n    bool isValidBST(TreeNode* root) {\n        if(root==nullptr)   return true;\n        bool left=isValidBST(root-&gt;left);\n        if(left==false) return false;\n        bool cur=false;\n        if(root-&gt;val&gt;pre)   cur=true;\n        pre=root-&gt;val;\n        bool right=isValidBST(root-&gt;right);\n        return left&amp;right&amp;cur;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_4","title":"\u8ba1\u7b97\u5e03\u5c14\u4e8c\u53c9\u6811\u7684\u503c","text":"<p>\u6839\u636e\u9898\u610f\u53ef\u77e5\uff0c\u9700\u8981\u5148\u5f97\u5230\u5de6\u53f3\u5b50\u6811\u7684\u503c\u6700\u540e\u5f97\u5230\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u3002 \u56e0\u6b64\u8fdb\u884c\u540e\u5e8f\u904d\u5386\uff0c\u5c06\u5de6\u53f3\u5b50\u6811\u7684\u503c\u8fdb\u884c\u76f8\u5e94\u7684\u4f4d\u8fd0\u7b97\u3002 <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool evaluateTree(TreeNode* root) {\n        if(root-&gt;left==nullptr) return root-&gt;val==0?false:true;\n\n        bool l=evaluateTree(root-&gt;left);\n        bool r=evaluateTree(root-&gt;right);\n        return root-&gt;val==2?l|r:l&amp;r;\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_5","title":"\u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c","text":"<p>\u4e0e\u524d\u9762\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u6b21\u91c7\u7528\u4f20\u53c2\u7684\u65b9\u5f0f\u8bb0\u5f55\u4e4b\u524d\u7684\u503c\u3002 \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u9047\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u5c06\u53f6\u5b50\u8282\u70b9\u5bf9\u5e94\u7684\u6570\u5b57\u52a0\u5230\u6570\u5b57\u4e4b\u548c\u3002\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u8ba1\u7b97\u5176\u5b50\u8282\u70b9\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u7136\u540e\u5bf9\u5b50\u8282\u70b9\u9012\u5f52\u904d\u5386\u3002</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int dfs(TreeNode* root,int prenum){\n        if(root==nullptr){\n            return 0;\n        }\n        int sum=prenum*10+root-&gt;val;\n        if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr){\n            return sum;\n        }else{\n            return dfs(root-&gt;left,sum)+dfs(root-&gt;right,sum);\n        }\n    }\n    int sumNumbers(TreeNode* root) {\n        return dfs(root,0);\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_6","title":"\u4e8c\u53c9\u6811\u526a\u679d","text":"<p>\u9898\u76ee\u8981\u6c42\u662f\u526a\u9664\u8be5\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u4e3a 0 \u7684\u5b50\u6811\u3002 \u4ece\u53f6\u5b50\u7ed3\u70b9\u51fa\u53d1\uff0c\u53ea\u8981\u9047\u52300\u5c31\u53bb\u6389\u5373\u53ef\u3002 \u6ee1\u8db3\u4ece\u53f6\u5b50\u7ed3\u70b9\u51fa\u53d1\u7684\u60c5\u51b5\u4fbf\u662f\u540e\u5e8f\u904d\u5386\uff0c\u526a\u679d\u6761\u4ef6\u4e5f\u5c31\u662f\u8be5\u8282\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5e76\u4e14\u503c\u4e3a0\uff1b</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* pruneTree(TreeNode* root) {\n        if(root==nullptr){\n            return nullptr;\n        }\n        root-&gt;left=pruneTree(root-&gt;left);\n        root-&gt;right=pruneTree(root-&gt;right);\n        if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr&amp;&amp;root-&gt;val==0){\n            return nullptr;\n        }\n        return root;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#k","title":"\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2ck\u4e2a\u5c0f\u7684\u5143\u7d20","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_7","title":"\u4e2d\u5e8f\u904d\u5386\u501f\u52a9\u8f85\u52a9\u7a7a\u95f4","text":"<p>\u5bf9\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811\u800c\u8a00\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u9012\u589e\u7684\u5e8f\u5217\u3002 \u6211\u4eec\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u8bb0\u5f55\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7b2ck-1\u4f4d\u5c31\u662f\u7b2ck\u5c0f\u7684\u5143\u7d20</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root,vector&lt;int&gt; &amp;ans){\n        if(root==nullptr){\n            return;\n        }\n        inorder(root-&gt;left,ans);\n        ans.push_back(root-&gt;val);\n        inorder(root-&gt;right,ans);\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        vector&lt;int&gt; ans;\n        inorder(root,ans);\n\n        return ans[k-1];\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_8","title":"\u4e2d\u5e8f\u904d\u5386\u76f4\u63a5\u67e5\u627e","text":"<p>\u9012\u5f52\u7684\u8fb9\u754c\u6761\u4ef6\u4e3a\u7a7a\u8282\u70b9\uff0c\u8fd4\u56de\u503c\u4e3a-1\uff1b \u5982\u679c\u5de6\u5b50\u6811\u8fd4\u56de\u503c\u4e0d\u4e3a-1\uff0c\u5219\u7b54\u6848\u5728\u5de6\u5b50\u6811\u4e2d\uff1b \u5982\u679c\u5de6\u5b50\u6811\u8fd4\u56de\u503c\u4e3a-1\uff0c\u5219\u7b54\u6848\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u5e76\u4e14k\u51cf1\uff1b \u5982\u679ck\u7684\u503c\u4e3a0\uff0c\u5219\u7b54\u6848\u4e3a\u5f53\u524d\u8282\u70b9\uff1b \u5426\u5219\u904d\u5386\u53f3\u5b50\u6811\u7684\u3002 <pre><code>class Solution {\npublic:\n    int kthSmallest(TreeNode* root, int&amp; k) { // \u6ce8\u610f\u8fd9\u91cc\u6539\u6210\u4e86\u5f15\u7528\n        if (root == nullptr) {\n            return -1; // \u9898\u76ee\u4fdd\u8bc1\u8282\u70b9\u503c\u975e\u8d1f\uff0c\u7528 -1 \u8868\u793a\u6ca1\u6709\u627e\u5230\n        }\n        int left_res = kthSmallest(root-&gt;left, k);\n        if (left_res != -1) { // \u7b54\u6848\u5728\u5de6\u5b50\u6811\u4e2d\n            return left_res;\n        }\n        if (--k == 0) { // \u7b54\u6848\u5c31\u662f\u5f53\u524d\u8282\u70b9\n            return root-&gt;val;\n        }\n        return kthSmallest(root-&gt;right, k); // \u53f3\u5b50\u6811\u4f1a\u8fd4\u56de\u7b54\u6848\u6216\u8005 -1\n    }\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/#_9","title":"\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84","text":"<p>\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u7a7a\u8282\u70b9\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u8fd4\u56de\u3002 \u5426\u5219\uff0c\u5148\u628a\u8282\u70b9\u503c\uff08\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09\u52a0\u5230 path \u7684\u672b\u5c3e\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u628a path \u52a0\u5230\u7b54\u6848\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u540e\u7eed\u5fc5\u7136\u8fd8\u4f1a\u5728 path \u540e\u52a0\u5165\u65b0\u7684\u8282\u70b9\u503c\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u628a -&gt; \u52a0\u5230 path \u7684\u672b\u5c3e\u3002</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;string&gt; binaryTreePaths(TreeNode* root) {\n        vector&lt;string&gt; ans;\n        auto dfs=[&amp;](this auto &amp;&amp; dfs,TreeNode* node,string path)-&gt;void{\n            if(node==nullptr){\n                return;\n            }\n            path+=to_string(node-&gt;val);\n            if(node-&gt;left==node-&gt;right){\n                ans.push_back(path);\n                return;\n            }\n            path+=\"-&gt;\";\n            dfs(node-&gt;left,path);\n            dfs(node-&gt;right,path);\n        };\n        dfs(root,\"\");\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/","title":"\u5168\u6392\u5217","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u5176 \u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217 \u3002\u4f60\u53ef\u4ee5 \u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,3] \u8f93\u51fa\uff1a[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] \u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [0,1] \u8f93\u51fa\uff1a[[0,1],[1,0]] \u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1anums = [1] \u8f93\u51fa\uff1a[[1]]</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#_2","title":"\u601d\u8def","text":"<p>\u6839\u636e\u6570\u7ec4\u6392\u5217\u7684\u7279\u70b9\uff0c\u8003\u8651\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u6240\u6709\u6392\u5217\u65b9\u6848\u3002 \u5373\u901a\u8fc7\u5143\u7d20\u4ea4\u6362\uff0c\u5148\u56fa\u5b9a\u7b2c 1 \u4f4d\u5143\u7d20\uff08 n \u79cd\u60c5\u51b5\uff09\u3001\u518d\u56fa\u5b9a\u7b2c 2 \u4f4d\u5143\u7d20\uff08 n\u22121 \u79cd\u60c5\u51b5\uff09\u3001... \u3001\u6700\u540e\u56fa\u5b9a\u7b2c n \u4f4d\u5143\u7d20\uff08 1 \u79cd\u60c5\u51b5\uff09\u3002</p> <pre><code>class Solution {\n    vector&lt;vector&lt;int&gt;&gt; res;\n    void dfs(vector&lt;int&gt; nums,int x){\n        if(x==nums.size()-1){\n            res.push_back(nums);\n            return;\n        }\n        for(int i=x;i&lt;nums.size();i++){\n            swap(nums[i],nums[x]);\n            dfs(nums,x+1);\n            swap(nums[i],nums[x]);\n        }\n    }\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        dfs(nums,0);\n        return res;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/","title":"\u6590\u6ce2\u90a3\u5951\u6570","text":"<p>509.\u00a0\u6590\u6ce2\u90a3\u5951\u6570</p> <p>\u7b80\u5355</p> <p>691 \u6590\u6ce2\u90a3\u5951\u6570\u00a0\uff08\u901a\u5e38\u7528\u00a0<code>F(n)</code>\u00a0\u8868\u793a\uff09\u5f62\u6210\u7684\u5e8f\u5217\u79f0\u4e3a\u00a0\u6590\u6ce2\u90a3\u5951\u6570\u5217\u00a0\u3002\u8be5\u6570\u5217\u7531\u00a0<code>0</code>\u00a0\u548c\u00a0<code>1</code>\u00a0\u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002\u4e5f\u5c31\u662f\uff1a</p> <p>F(0) = 0\uff0cF(1)\u00a0= 1 F(n) = F(n - 1) + F(n - 2)\uff0c\u5176\u4e2d n &gt; 1</p> <p>\u7ed9\u5b9a\u00a0<code>n</code>\u00a0\uff0c\u8bf7\u8ba1\u7b97\u00a0<code>F(n)</code>\u00a0\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1aF(2) = F(1) + F(0) = 1 + 0 = 1</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1an = 3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1aF(3) = F(2) + F(1) = 1 + 1 = 2</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1an = 4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1aF(4) = F(3) + F(2) = 2 + 1 = 3</p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= n &lt;= 30</code></li> </ul> <p>\u901a\u8fc7\u6b21\u6570</p> <p>596.1K</p> <p>\u63d0\u4ea4\u6b21\u6570</p> <p>902.2K</p> <p>\u901a\u8fc7\u7387</p> <p>66.1% \u4e00\uff1a\u7b2c\u4e00\u79cd\u65b9\u6cd5\u9012\u5f52 <pre><code>int dfs(int n)\n\n{\n\n\u00a0 \u00a0 if(n==0||n==1) return n;\n\n\u00a0 \u00a0 return dfs(n-1)+dfs(n-2);\n\n}\n\nclass Solution {\n\npublic:\n\n\u00a0 \u00a0 int fib(int n) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 return dfs(n);\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p> <p>\u4e8c\uff1a\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u8bb0\u5fc6\u5316\u641c\u7d22//\u672c\u8d28\u662f\u5e26\u6709\u5907\u5fd8\u5f55\u7684\u9012\u5f52 <pre><code>int memo[31];\n\nint dfs(int n)\n\n{\n\n\u00a0 \u00a0 if(memo[n]!=-1)\n\n\u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 return memo[n];\n\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0if(n==0||n==1)\n\n\u00a0 \u00a0{\n\n\u00a0 \u00a0 \u00a0 \u00a0memo[n]=n;\n\n\u00a0 \u00a0 \u00a0 \u00a0return n;\n\n\u00a0 \u00a0}\n\n\u00a0 \u00a0memo[n]=dfs(n-1)+dfs(n-2);\n\n\u00a0 \u00a0return memo[n];\n\n}\n\nclass Solution {\n\npublic:\n\n\u00a0 \u00a0 int fib(int n) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 //\u521d\u59cb\u5316\n\n\u00a0 \u00a0 for(int i=0;i&lt;31;i++)\n\n\u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 memo[i]=-1;\n\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 return dfs(n);\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/","title":"24","text":"<p>![[Pasted image 20240411150940.png]] <pre><code>/**\n\n\u00a0* Definition for singly-linked list.\n\n\u00a0* struct ListNode {\n\n\u00a0* \u00a0 \u00a0 int val;\n\n\u00a0* \u00a0 \u00a0 ListNode *next;\n\n\u00a0* \u00a0 \u00a0 ListNode() : val(0), next(nullptr) {}\n\n\u00a0* \u00a0 \u00a0 ListNode(int x) : val(x), next(nullptr) {}\n\n\u00a0* \u00a0 \u00a0 ListNode(int x, ListNode *next) : val(x), next(next) {}\n\n\u00a0* };\n\n\u00a0*/\n\nclass Solution {\n\npublic:\n\n\u00a0 \u00a0 ListNode* swapPairs(ListNode* head) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(head==nullptr||head-&gt;next==nullptr) \u00a0return head;\n\n\u00a0 \u00a0 \u00a0 \u00a0 ListNode* nhead=swapPairs(head-&gt;next-&gt;next);\n\n\u00a0 \u00a0 \u00a0 \u00a0 auto res=head-&gt;next;\n\n\u00a0 \u00a0 \u00a0 \u00a0 head-&gt;next-&gt;next=head;//\u540e\u9762\u7ed3\u70b9\u6307\u5411\u6211\n\n\u00a0 \u00a0 \u00a0 \u00a0 head-&gt;next=nhead;//\u6211\u6307\u5411\u7684\u662f\u4ea4\u6362\u5b8c\u7684\u7ed3\u70b9\n\n\u00a0 \u00a0 \u00a0 \u00a0 return res;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre> \u5212\u5206\u7684\u5b50\u95ee\u9898\u662f\u4e24\u4e24\u4ea4\u6362\uff0chead \u6307\u5411\u540e\u9762\u4ea4\u6362\u5b8c\u6210\u7684, head \u539f\u6765\u540e\u9762\u7684\u6307\u5411 head \u51fd\u6570\u7684\u51fa\u53e3\u5c31\u662f head \u4e3a\u7a7a\u6216\u8005\u65e0\u610f\u4e49</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/#024","title":"024 \u53cd\u8f6c\u94fe\u8868","text":"<p>![[Pasted image 20240411151135.png]] <pre><code>/**\n\n\u00a0* Definition for singly-linked list.\n\n\u00a0* struct ListNode {\n\n\u00a0* \u00a0 \u00a0 int val;\n\n\u00a0* \u00a0 \u00a0 ListNode *next;\n\n\u00a0* \u00a0 \u00a0 ListNode() : val(0), next(nullptr) {}\n\n\u00a0* \u00a0 \u00a0 ListNode(int x) : val(x), next(nullptr) {}\n\n\u00a0* \u00a0 \u00a0 ListNode(int x, ListNode *next) : val(x), next(next) {}\n\n\u00a0* };\n\n\u00a0*/\n\nclass Solution {\n\npublic:\n\n\u00a0 \u00a0 ListNode* reverseList(ListNode* head) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(head==nullptr||head-&gt;next==nullptr)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return head;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 ListNode* nhead=reverseList(head-&gt;next);\n\n\u00a0 \u00a0 \u00a0 \u00a0 head-&gt;next-&gt;next=head;\n\n\u00a0 \u00a0 \u00a0 \u00a0 head-&gt;next=nullptr;\n\n\u00a0 \u00a0 \u00a0 \u00a0 return nhead;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre> \u5c06\u94fe\u8868\u60f3\u8c61\u4e3a\u4e00\u4e2a\u6811\uff0c\u5355\u5c94\u7684 \u7136\u540e\u8fdb\u884c\u6811\u7684\u6df1\u5ea6\u904d\u5386\u4e2d\u7684\u540e\u7eed\u904d\u5386\uff0c\u7136\u540e\u4ea4\u6362\u8282\u70b9\uff08\u4ea4\u6362\u7684\u65b9\u6cd5\u8ddf\u4e4b\u524d\u7684\u4e00\u6837\uff09 \u5b50\u95ee\u9898\u8fd8\u662f\u4ea4\u6362\u4e09\u4e2a\u70b9\uff0c\u94fe\u8868\u4e2d</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/#21","title":"21 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p>![[Pasted image 20240411151436.png]] <pre><code>/**\n\n\u00a0* Definition for singly-linked list.\n\n\u00a0* struct ListNode {\n\n\u00a0* \u00a0 \u00a0 int val;\n\n\u00a0* \u00a0 \u00a0 ListNode *next;\n\n\u00a0* \u00a0 \u00a0 ListNode() : val(0), next(nullptr) {}\n\n\u00a0* \u00a0 \u00a0 ListNode(int x) : val(x), next(nullptr) {}\n\n\u00a0* \u00a0 \u00a0 ListNode(int x, ListNode *next) : val(x), next(next) {}\n\n\u00a0* };\n\n\u00a0*/\n\nclass Solution {\n\npublic:\n\n\u00a0 \u00a0 ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(list1==nullptr) \u00a0 return list2;\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(list2==nullptr) \u00a0 return list1;\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(list1-&gt;val&lt;=list2-&gt;val)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 list1-&gt;next=mergeTwoLists(list1-&gt;next,list2);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return list1;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 else{\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 list2-&gt;next=mergeTwoLists(list1,list2-&gt;next);\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return list2;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p> <p>\u8fc7\u7a0b\u6709\u4e9b\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f \u6bcf\u6b21\u7684\u5b50\u95ee\u9898\u662f\u6bd4\u8f83\u5934\u7ed3\u70b9\u5bf9\u5e94\u7684\u4e24\u4e2a\u8282\u70b9\u503c\u7684\u5927\u5c0f\uff0c\u5c0f\u7684\u90a3\u4e2a\u8fdb\u884c\u9012\u5f52\uff0c\u4f7f\u7528\u5934\u7ed3\u70b9\u5bf9\u5e94\u7684 next \u7684\u503c \u51fd\u6570\u7684\u51fa\u53e3\u662f\u4e00\u4e2a\u94fe\u8868\u4e3a\u7a7a</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/#0806","title":"08.06 \u6c49\u8bfa\u5854","text":"<p>![[Pasted image 20240411151652.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 void hanota(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B, vector&lt;int&gt;&amp; C) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 dfs(A,B,C,A.size());\n\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 void dfs(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B, vector&lt;int&gt;&amp; C,int n)\n\n\u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(n==1)\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 C.push_back(A.back());\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 A.pop_back();\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\n\n\u00a0 \u00a0 \u00a0 \u00a0 dfs(A,C,B,n-1);\n\n\u00a0 \u00a0 \u00a0 \u00a0 C.push_back(A.back());\n\n\u00a0 \u00a0 \u00a0 \u00a0 A.pop_back();\n\n\u00a0 \u00a0 \u00a0 \u00a0 dfs(B,A,C,n-1);\n\n\u00a0 \u00a0 }\n\n};\n</code></pre></p> <p>\u6c49\u8bfa\u5854\u4e2d\u9012\u5f52\u53ef\u4ee5\u5728 n=3 \u65f6\uff08\u753b\u56fe\uff09\u7b26\u5408\u9012\u5f52\u7684\u8fc7\u7a0b \u9012\u5f52\u51fd\u6570\u7684\u610f\u601d\u662f\uff0c\u5c06 A \u4e2d n \u4e2a\u76d8\u5b50\uff0c\u901a\u8fc7 B \u79fb\u52a8\u5230 C \u4e0a \u53ef\u4ee5\u5148\u8ba9 n-1 \u4e2a\u76d8\u5b50\u79fb\u52a8\u5230 B \u4e0a\uff0c\u518d\u8ba9 A \u4e0a\u6700\u5927\u7684\u76d8\u5b50\u79fb\u52a8\u5230 C \u4e0a\uff0c\u6700\u540e\u518d\u8ba9 n-1 \u4e2a\u76d8\u5b50\u4ece B \u4e0a\u79fb\u52a8\u5230 C \u4e0a\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/#50","title":"50 \u5feb\u901f\u5e42\uff08\u5305\u542b\u6b63\u8d1f\u6570\u7684\uff09","text":"<p>![[Pasted image 20240411155526.png]] <pre><code>class Solution {\n\npublic:\n\n\u00a0 \u00a0 double myPow(double x, int n) {\n\n\u00a0 \u00a0 \u00a0 \u00a0 long long N=n;\n\n\u00a0 \u00a0 \u00a0 \u00a0 return N&lt;0 ? (1.0/ppow(x,-N)) : ppow(x,N);\n\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 double ppow(double x,int n)\n\n\u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 if(n==0) \u00a0 \u00a0return 1.0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 double t=ppow(x,n/2);\n\u00a0 \u00a0 \u00a0 \u00a0 return n%2==0?t*t:t*t*x;\n\n\u00a0 \u00a0 }\n\n};\n</code></pre> \u9012\u5f52\u7684\u5b50\u95ee\u9898\u662f\u6bcf\u6b21\u53ef\u4ee5\u628a\u5e42\u6307\u6570\u5212\u5206\u4e3a\u539f\u6765\u7684\u4e00\u534a\uff0c\u76f8\u5f53\u4e8e\u4e00\u6b21\u6811\u5206\u53c9\u4e00\u6837\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u9700\u8981\u6700\u540e\u5f00 long long </p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/#95","title":"95. \u8d39\u89e3\u7684\u5f00\u5173","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>25\u76cf\u706f\u6392\u6210\u4e00\u4e2a5x5\u7684\u65b9\u5f62\u3002\u6bcf\u4e00\u4e2a\u706f\u90fd\u6709\u4e00\u4e2a\u5f00\u5173\uff0c\u6e38\u620f\u8005\u53ef\u4ee5\u6539\u53d8\u5b83\u7684\u72b6\u6001\u3002\u6bcf\u4e00\u6b65\uff0c\u6e38\u620f\u8005\u53ef\u4ee5\u6539\u53d8\u67d0\u4e00\u4e2a\u706f\u7684\u72b6\u6001\u3002\u6e38\u620f\u8005\u6539\u53d8\u4e00\u4e2a\u706f\u7684\u72b6\u6001\u4f1a\u4ea7\u751f\u8fde\u9501\u53cd\u5e94\uff1a\u548c\u8fd9\u4e2a\u706f\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u7684\u706f\u4e5f\u8981\u76f8\u5e94\u5730\u6539\u53d8\u5176\u72b6\u6001\u3002</p> <p>\u6211\u4eec\u7528\u6570\u5b57\u201c1\u201d\u8868\u793a\u4e00\u76cf\u5f00\u7740\u7684\u706f\uff0c\u7528\u6570\u5b57\u201c0\u201d\u8868\u793a\u5173\u7740\u7684\u706f\u3002</p> <p>\u7591\u95ee\u4e3a\u5565\u7b2c\u4e00\u884c\u8981\u63091 &lt;&lt; 5 \u6b21 \u7b2c\u4e00\u884c\u4e0d\u662f\u9898\u76ee\u7ed9\u4f60\u7ed9\u597d\u4e86 0 \u548c 1\u561b</p> <p>\u81ea\u7b2c\u4e8c\u884c\u5f00\u59cb\u5411\u4e0b\u7684op\u786e\u5b9e\u4f1a\u4f9d\u8d56\u4e8e\u4e0a\u5c42\u7684\u72b6\u6001 \u4f46\u662f\u7b2c\u4e00\u5c42\u5e76\u975e\u76f4\u63a5\u8df3\u8fc7 \u76f4\u63a5\u770b\u7b2c\u4e8c\u5c42\u7684 \u5bf9\u7b2c\u4e00\u5c42\u4e0d\u540c\u7684\u64cd\u4f5c \u7b2c\u4e00\u5c42\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u72b6\u6001 \u56e0\u800c\u540e\u5e8f\u7684\u64cd\u4f5c\u6b21\u6570\u4f1a\u56e0\u4e3a \u7b2c\u4e00\u5c42\u4e0d\u540c\u64cd\u4f5c\u4ea7\u751f\u7684\u4e0d\u540c\u72b6\u6001\u800c\u6539\u53d8 \u6240\u4ee5\u6700\u4f18\u89e3\u662f\u901a\u8fc7\u679a\u4e3e\u7b2c\u4e00\u5c42\u6240\u6709\u64cd\u4f5c\u5f97\u51fa\u6765\u7684 \u53ef\u4ee5\u7406\u89e3\u4e00\u4e0b \u679a\u4e3e</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%92%8C%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[7][7],b[7][7],n,answer;\nint init()\n{\n    getchar();\n    for (int i=1;i&lt;=5;i++)\n    {\n        for (int j=1;j&lt;=5;j++)\n        {\n            char ch=getchar();\n            a[i][j]=ch-'0';\n        }\n        getchar();\n    }\n}\nint handle(int x,int y)//\u4e00\u6b21\u6309\u706f\u64cd\u4f5c\n{\n    b[x][y]^=1;\n    b[x-1][y]^=1;\n    b[x][y+1]^=1;\n    b[x][y-1]^=1;\n    b[x+1][y]^=1;\n}\nbool judge(void)\n{\n    for (int i=1;i&lt;=5;i++)\n        for (int j=1;j&lt;=5;j++)\n            if(!b[i][j])\n                return false;\n    return true;\n}\nint work(void)\n{\n    answer=1e7;\n    for (int i=1;i&lt;=(1&lt;&lt;5);i++)\n    {\n        int ans=0;\n        memcpy(b,a,sizeof(a));\n        for (int j=1;j&lt;=5;j++) \n            if (i&gt;&gt;(j-1) &amp; 1)\n            {\n                handle(1,j);\n                ans++;\n            }\n        for (int j=1;j&lt;=4;j++)\n            for (int k=1;k&lt;=5;k++)\n                if (!b[j][k])\n                {\n                    ans++;\n                    handle(j+1,k);\n                }\n        if (judge())\n            answer=min(ans,answer);\n    }\n    return answer;\n}\nint main()\n{\n    cin&gt;&gt;n;\n    while(n--)\n    {\n        init();\n        if (work()&lt;=6)\n            cout&lt;&lt;answer;\n        else\n            cout&lt;&lt;\"-1\";\n        puts(\"\");    \n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/","title":"\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5982\u9898\uff0c\u7ed9\u5b9a \\(N\\) \u4e2a\u5b57\u7b26\u4e32\uff08\u7b2c \\(i\\) \u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a \\(M_i\\)\uff0c\u5b57\u7b26\u4e32\u5185\u5305\u542b\u6570\u5b57\u3001\u5927\u5c0f\u5199\u5b57\u6bcd\uff0c\u5927\u5c0f\u5199\u654f\u611f\uff09\uff0c\u8bf7\u6c42\u51fa \\(N\\) \u4e2a\u5b57\u7b26\u4e32\u4e2d\u5171\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u53cb\u60c5\u63d0\u9192\uff1a\u5982\u679c\u771f\u7684\u60f3\u597d\u597d\u7ec3\u4e60\u54c8\u5e0c\u7684\u8bdd\uff0c\u8bf7\u81ea\u89c9\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(N\\)\uff0c\u4e3a\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(N\\) \u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3a\u6240\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u5305\u542b\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>5\nabc\naaaa\nabc\nabcc\n12345\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>4\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/Hash%E8%A1%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_5","title":"\u63d0\u793a","text":"<p>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff1a\\(N\\leq 10\\)\uff0c\\(M_i\u22486\\)\uff0c\\(Mmax\\leq 15\\)\u3002</p> <p>\u5bf9\u4e8e \\(70\\%\\) \u7684\u6570\u636e\uff1a\\(N\\leq 1000\\)\uff0c\\(M_i\u2248100\\)\uff0c\\(Mmax\\leq 150\\)\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff1a\\(N\\leq 10000\\)\uff0c\\(M_i\u22481000\\)\uff0c\\(Mmax\\leq 1500\\)\u3002</p> <p>\u6837\u4f8b\u8bf4\u660e\uff1a</p> <p>\u6837\u4f8b\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32(abc)\u548c\u7b2c\u4e09\u4e2a\u5b57\u7b26\u4e32(abc)\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6240\u63d0\u4f9b\u5b57\u7b26\u4e32\u7684\u96c6\u5408\u4e3a{aaaa,abc,abcc,12345}\uff0c\u6545\u5171\u8ba14\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</p> <p>Tip\uff1a \u611f\u5174\u8da3\u7684\u8bdd\uff0c\u4f60\u4eec\u53ef\u4ee5\u5148\u770b\u4e00\u770b\u4ee5\u4e0b\u4e09\u9898\uff1a</p> <p>BZOJ3097\uff1ahttp://www.lydsy.com/JudgeOnline/problem.php?id=3097</p> <p>BZOJ3098\uff1ahttp://www.lydsy.com/JudgeOnline/problem.php?id=3098</p> <p>BZOJ3099\uff1ahttp://www.lydsy.com/JudgeOnline/problem.php?id=3099</p> <p>\u5982\u679c\u4f60\u4ed4\u7ec6\u7814\u7a76\u8fc7\u4e86\uff08\u6216\u8005\u81f3\u5c11\u4ed4\u7ec6\u770b\u8fc7AC\u4eba\u6570\u7684\u8bdd\uff09\uff0c\u6211\u60f3\u4f60\u4e00\u5b9a\u4f1a\u660e\u767d\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\u6b63\u786e\u59ff\u52bf\u7684<sup>_</sup></p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/","title":"\u4eb2\u621a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#_1","title":"\u9898\u76ee\u80cc\u666f","text":"<p>\u82e5\u67d0\u4e2a\u5bb6\u65cf\u4eba\u5458\u8fc7\u4e8e\u5e9e\u5927\uff0c\u8981\u5224\u65ad\u4e24\u4e2a\u662f\u5426\u662f\u4eb2\u621a\uff0c\u786e\u5b9e\u8fd8\u5f88\u4e0d\u5bb9\u6613\uff0c\u73b0\u5728\u7ed9\u51fa\u67d0\u4e2a\u4eb2\u621a\u5173\u7cfb\u56fe\uff0c\u6c42\u4efb\u610f\u7ed9\u51fa\u7684\u4e24\u4e2a\u4eba\u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u89c4\u5b9a\uff1a\\(x\\) \u548c \\(y\\) \u662f\u4eb2\u621a\uff0c\\(y\\) \u548c \\(z\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u548c \\(z\\) \u4e5f\u662f\u4eb2\u621a\u3002\u5982\u679c \\(x\\)\uff0c\\(y\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u7684\u4eb2\u621a\u90fd\u662f \\(y\\) \u7684\u4eb2\u621a\uff0c\\(y\\) \u7684\u4eb2\u621a\u4e5f\u90fd\u662f \\(x\\) \u7684\u4eb2\u621a\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#_3","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\uff1a\u4e09\u4e2a\u6574\u6570 \\(n,m,p\\)\uff0c\uff08\\(n,m,p \\le 5000\\)\uff09\uff0c\u5206\u522b\u8868\u793a\u6709 \\(n\\) \u4e2a\u4eba\uff0c\\(m\\) \u4e2a\u4eb2\u621a\u5173\u7cfb\uff0c\u8be2\u95ee \\(p\\) \u5bf9\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u4ee5\u4e0b \\(m\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(M_i\\)\uff0c\\(M_j\\)\uff0c\\(1 \\le M_i,~M_j\\le N\\)\uff0c\u8868\u793a \\(M_i\\) \u548c \\(M_j\\) \u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u63a5\u4e0b\u6765 \\(p\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(P_i,P_j\\)\uff0c\u8be2\u95ee \\(P_i\\) \u548c \\(P_j\\) \u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#_4","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\\(p\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a <code>Yes</code> \u6216 <code>No</code>\u3002\u8868\u793a\u7b2c \\(i\\) \u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e3a\u201c\u5177\u6709\u201d\u6216\u201c\u4e0d\u5177\u6709\u201d\u4eb2\u621a\u5173\u7cfb\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>6 5 3\n1 2\n1 5\n3 4\n5 2\n1 3\n1 4\n2 3\n5 6\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>Yes\nYes\nNo\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#_5","title":"\u5206\u6790","text":"<p>\u5c06\u6240\u6709\u662f\u4eb2\u621a\u5173\u7cfb\u7684\u4eba\u5206\u914d\u5230\u901a\u4e00\u4e2a\u96c6\u5408\u5f53\u4e2d\u53bb\uff0c\u5f53\u8981\u67e5\u8be2\u4e24\u4e2a\u4eba\u662f\u5426\u662f\u4eb2\u621a\u7684\u65f6\u5019\uff0c\u4ec5\u4ec5\u53ea\u9700\u8981\u5224\u65ad\u4e24\u4e2a\u4eba\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bb6\u65cf\u7684\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u4e0d\u76f8\u5173\u53ef\u5408\u5e76\u7684\u6570\u636e\u7ed3\u6784\u53eb\u505a\u5e76\u67e5\u96c6\u3001</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%BA%B2%E6%88%9A/#_6","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\nconst int N= 5010;\nint n, m, p, x, y;\nint fa[N];\n\nint find(int x)\n{\n    if (x == fa[x]) return x;\n    return fa[x] = find(fa[x]);\n}\nvoid join(int x, int y)\n{\n    int f1 = find(x), f2 = find(y);\n    if (f1 != f2) fa[f1] = f2;\n}\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        fa[i] = i;\n    }\n    for (int i = 0; i &lt; m; i++)\n    {\n        cin &gt;&gt; x &gt;&gt; y;\n        join(x, y);\n    }\n    for (int i = 0; i &lt; p; i++)\n    {\n        cin &gt;&gt; x &gt;&gt; y;\n        if (find(x) == find(y))\n            cout &lt;&lt; \"Yes\" &lt;&lt; endl;\n        else\n            cout &lt;&lt; \"No\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> <pre><code>#include&lt;iostream&gt;  \n#include&lt;cstdio&gt;  \n#include&lt;cstring&gt;  \n#include&lt;algorithm&gt;  \nusing namespace std;  \nstruct hh  \n{  \n    int x,y,t;  \n}a[200000];  \nint f[200000],n,m;  \nint cmp(const hh &amp;a,const hh &amp;b){return a.t&lt;b.t;}  \nint find(int x){return f[x]==x?x:(f[x]=find(f[x]));}  \nint getin()  \n{  \n    int x=0;char ch=getchar();  \n    while(ch&lt;'0'||ch&gt;'9')ch=getchar();  \n    while(ch&gt;='0'&amp;&amp;ch&lt;='9')x=x*10+ch-48,ch=getchar();  \n    return x;  \n}  \nint main()  \n{  \n    n=getin(),m=getin();  \n    if(n==1){cout&lt;&lt;0;return 0;}//\u5176\u5b9e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u7684\u7279\u5224  \n    for(int i=1;i&lt;=m;i++)a[i].x=getin(),a[i].y=getin(),a[i].t=getin();  \n    sort(a+1,a+m+1,cmp);  \n    for(int i=1;i&lt;=n;i++)f[i]=i;  \n    for(int i=1;i&lt;=m;i++)  \n    {  \n        int fx=find(a[i].x),fy=find(a[i].y);  \n        if(fx!=fy)f[fx]=fy,n--;  \n        if(n==1){cout&lt;&lt;a[i].t;return 0;}  \n    }  \n    cout&lt;&lt;-1&lt;&lt;endl;  \n    return 0;  \n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;  \nusing namespace std;  \n\nclass object {  \npublic:  \n    virtual void eat() = 0;  \n};  \n\nclass apple : public object {  \n    void eat() {  \n        cout &lt;&lt; \"eat apple\\n\";  \n    }  \n};  \nclass bear : public object {  \n    void eat() {  \n        cout &lt;&lt; \"eat bear\\n\";  \n    }  \n};  \n\nclass plane : public object {  \nprivate:  \n    vector&lt;object *&gt; list;  \n\npublic:  \n    void eat() {  \n        for (auto x : list) {  \n            x-&gt;eat();  \n        }  \n    }  \n\n    void add(object *p) {  \n        list.push_back(p);  \n    }  \n    void remove(object *p) {  \n        list.erase(std::remove(list.begin(), list.end(), p), list.end());  \n    }  \n};  \n\nint main() {  \n    object *ap1 = new apple;  \n    bear *be1 = new bear;  \n    plane *pl1 = new plane;  \n    pl1-&gt;add(ap1);  \n    pl1-&gt;add(be1);  \n\n    pl1-&gt;eat();  \n\n    pl1-&gt;remove(ap1);  \n    pl1-&gt;remove(be1);  \n\n    delete pl1;  \n    delete ap1;  \n    delete be1;  \n\n    return 0;  \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/","title":"\u6751\u6751\u901a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u67d0\u5e02\u8c03\u67e5\u57ce\u9547\u4ea4\u901a\u72b6\u51b5\uff0c\u5f97\u5230\u73b0\u6709\u57ce\u9547\u9053\u8def\u7edf\u8ba1\u8868\u3002\u8868\u4e2d\u5217\u51fa\u4e86\u6bcf\u6761\u9053\u8def\u76f4\u63a5\u8fde\u901a\u7684\u57ce\u9547\u3002\u5e02\u653f\u5e9c \"\u6751\u6751\u901a\u5de5\u7a0b\" \u7684\u76ee\u6807\u662f\u4f7f\u5168\u5e02\u4efb\u4f55\u4e24\u4e2a\u57ce\u9547\u95f4\u90fd\u53ef\u4ee5\u5b9e\u73b0\u4ea4\u901a\uff08\u4f46\u4e0d\u4e00\u5b9a\u6709\u76f4\u63a5\u7684\u9053\u8def\u76f8\u8fde\uff0c\u53ea\u8981\u76f8\u4e92\u4e4b\u95f4\u53ef\u8fbe\u5373\u53ef\uff09\u3002\u8bf7\u4f60\u8ba1\u7b97\u51fa\u6700\u5c11\u8fd8\u9700\u8981\u5efa\u8bbe\u591a\u5c11\u6761\u9053\u8def\uff1f</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u5305\u542b\u82e5\u5e72\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e24\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u5206\u522b\u662f\u57ce\u9547\u6570\u76ee \\(n\\) \u548c\u9053\u8def\u6570\u76ee \\(m\\) \uff1b\u968f\u540e\u7684 \\(m\\) \u884c\u5bf9\u5e94 \\(m\\) \u6761\u9053\u8def\uff0c\u6bcf\u884c\u7ed9\u51fa\u4e00\u5bf9\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u5206\u522b\u662f\u8be5\u6761\u9053\u8def\u76f4\u63a5\u76f8\u8fde\u7684\u4e24\u4e2a\u57ce\u9547\u7684\u7f16\u53f7\u3002\u7b80\u5355\u8d77\u89c1\uff0c\u57ce\u9547\u4ece \\(1\\) \u5230 \\(n\\) \u7f16\u53f7\u3002</p> <p>\u6ce8\u610f\uff1a\u4e24\u4e2a\u57ce\u5e02\u95f4\u53ef\u4ee5\u6709\u591a\u6761\u9053\u8def\u76f8\u901a\u3002</p> <p>\u5728\u8f93\u5165\u6570\u636e\u7684\u6700\u540e\uff0c\u4e3a\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(0\\)\uff0c\u4ee3\u8868\u6d4b\u8bd5\u6570\u636e\u7684\u7ed3\u5c3e\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u5bf9\u5e94\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u3002\u8868\u793a\u6700\u5c11\u8fd8\u9700\u8981\u5efa\u8bbe\u7684\u9053\u8def\u6570\u76ee\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#1","title":"\u6837\u4f8b #1","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#1_1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>4 2\n1 3\n4 3\n3 3\n1 2\n1 3\n2 3\n5 2\n1 2\n3 5\n999 0\n0\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#1_2","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>1\n0\n2\n998\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#_4","title":"\u63d0\u793a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#_5","title":"\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a","text":"<p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1 \\le n &lt; 1000\\) \u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%9B%86%E5%90%88/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%9D%91%E6%9D%91%E9%80%9A/#_6","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\nint fa[1000001], n, m, x, y;\n\nint find(int x)//\u5e76\u67e5\u96c6(\u8def\u5f84\u538b\u7f29) \n{\n    if (x != fa[x])//\u5f53x\u4e0d\u7b49\u4e8e\u5b83\u7684\u7238\u7238\u65f6(\u5f53\u5b83\u662f\u7956\u5148\u65f6\uff0c\u5b83\u6ca1\u6709\u7238\u7238) \n    {\n        fa[x] = find(fa[x]);//\u7ee7\u7eed\u627e\u4ed6\u7684\u7238\u7238\u7684\u7238\u7238 \n    }\n    return fa[x];//\u8fd4\u56de\u7956\u5148 \n}//\u67e5\u627e \n\nvoid unity(int x, int y)\n{\n    int r1 = find(x);//\u627e\u5230x\u7684\u7956\u5148 \n    int r2 = find(y);//\u627e\u5230y\u7684\u7956\u5148 \n    fa[r1] = r2;//\u7956\u5148\u548c\u7956\u5148\u7ed3\u4e3a\u7236\u5b50(\u8c01\u662f\u7236\u4eb2\u8c01\u662f\u513f\u5b50\u90fd\u53ef\u4ee5) \n}//\u5408\u5e76 \n\nint main()\n{\n    while (true)\n    {\n        int ans = 0;//ans\u8981\u5728\u5faa\u73af\u4e2d\u5b9a\u4e49\u4e3a0\n        scanf(\"%d\", &amp;n);\n        if (n == 0)\n        {\n            return 0;\n        }\n        scanf(\"%d\", &amp;m);\n        for (int i = 1; i &lt;= n; i++)\n        {\n            fa[i] = i;//\u521d\u59cb\u5316\u81ea\u5df1\u7684\u7236\u4eb2\u662f\u81ea\u5df1 \n        }\n        for (int i = 1; i &lt;= m; i++)\n        {\n            scanf(\"%d %d\", &amp;x, &amp;y);\n            unity(x, y);//\u5408\u5e76x\u548cy \n        }\n        for (int i = 1; i &lt;= n; i++)\n        {\n            if (find(i) == i)//\u81ea\u5df1\u7684\u7236\u4eb2\u7b49\u4e8e\u81ea\u5df1\u672c\u8eab\n            {\n                ans++;\n            }\n        }\n        printf(\"%d\\n\", ans - 1);//\u7b54\u6848\u51cf\u4e00 \n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/","title":"\u5185\u5b58\u6c60","text":"<p>\u5185\u5b58\u6c60\u662f\u4e00\u79cd\u9884\u5206\u914d\u5185\u5b58\u5e76\u8fdb\u884c\u91cd\u590d\u5229\u7528\u7684\u6280\u672f\uff0c\u901a\u8fc7\u51cf\u5c11\u9891\u7e41\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u64cd\u4f5c\uff0c\u4ece\u800c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\uff0c\u5185\u5b58\u6c60\u901a\u5e38\u9884\u5148\u5206\u914d\u4e00\u5757\u5927\u7684\u5185\u5b58\u533a\u57df\uff0c\u5c06\u5176\u5212\u5206\u5f88\u591a\u5c0f\u5757\u3002\u9700\u8981\u65f6\u76f4\u63a5\u4ece\u8fd9\u5757\u533a\u57df\u4e2d\u5206\u914d\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u7684\u52a8\u6001\u5206\u914d\u51fd\u6570\uff0c\u53ef\u4ee5\u6709\u6548\u7684\u51cf\u5c11\u7cfb\u7edf\u8c03\u7528\u5e26\u6765\u7684\u5f00\u9500</p>"},{"location":"%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/#_2","title":"\u6574\u4f53\u6846\u67b6","text":"<p>\u4e09\u5c42\u7f13\u5b58\u6784\u6210</p>"},{"location":"%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/#thread-cache","title":"thread cache","text":"<p>\u7ebf\u7a0b\u7f13\u5b58\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u6709\u7684\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u4eab\u4e00\u4e2acache\uff0c\u8fd9\u4e5f\u662f\u8fd9\u4e2a\u5185\u5b58\u6c60\u9ad8\u6548\u7684\u5730\u65b9\uff0c thread cache\u662f\u4e00\u4e2a\u54c8\u5e0c\u6876\u62c9\u94fe\u6cd5+\u81ea\u7531\u94fe\u8868\u7684\u7ed3\u6784</p> <p><pre><code>#pragma once\n\n#include \"Common.h\"\n\nclass ThreadCache\n{\npublic:\n    // \u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u5bf9\u8c61\n    void* Allocate(size_t size);\n    void Deallocate(void* ptr, size_t size);\n\n    // \u4ece\u4e2d\u5fc3\u7f13\u5b58\u83b7\u53d6\u5bf9\u8c61\n    void* FetchFromCentralCache(size_t index, size_t size);\n\n    // \u91ca\u653e\u5bf9\u8c61\u65f6\uff0c\u94fe\u8868\u8fc7\u957f\u65f6\uff0c\u56de\u6536\u5185\u5b58\u56de\u5230\u4e2d\u5fc3\u7f13\u5b58\n    void ListTooLong(FreeList&amp; list, size_t size);\nprivate:\n    FreeList _freeLists[NFREELIST];\n};\n\n// TLS thread local storage\nstatic _declspec(thread) ThreadCache* pTLSThreadCache = nullptr;\n</code></pre> \u56e0\u4e3atrheadcache\u4f7f\u7528\u7684\u662f\u54c8\u5e0c\u6876\u7ed3\u6784 \u4e0d\u5206\u6bb5\u7684\u8bdd\u82e5\u5168\u662f\u63098\u5b57\u8282\u5206\uff0c\u5219\u4f1a\u9700\u898132768\u4e2a\u6876\uff0c\u4f46\u4f46\u662f\u6bcf\u4e2a\u6876\u90fd\u662f16Byte\u5219\u4f1a\u5dee\u751f\u8f83\u591a\u7684\u5185\u5b58\u788e\u7247\u3002\u56e0\u6b64\u8fd9\u91cc\u91c7\u7528\u4e86\u4e0d\u540c\u6bb5\u7684\u5185\u5b58\u4f7f\u7528\u4e0d\u540c\u7684\u5185\u5b58\u5bf9\u9f50\u89c4\u5219\uff0c\u65e2\u63a7\u5236\u4e86\u6876\u7684\u6570\u91cf\u4e0d\u4f1a\u592a\u591a\uff0c\u53c8\u6574\u4f53\u5c06\u5185\u5b58\u788e\u7247\u6d6a\u8d39\u63a7\u5236\u572810%\u5de6\u53f3</p> <p>\u5185\u5b58\u5bf9\u9f50\u7684\u51fd\u6570\u7684\u63a5\u53e3 <pre><code>//\u7ba1\u7406\u5bf9\u9f50\u548c\u6620\u5c04\u7b49\u5173\u7cfb\nclass SizeClass\n{\npublic:\n    //\u83b7\u53d6\u5411\u4e0a\u5bf9\u9f50\u540e\u7684\u5b57\u8282\u6570\n    static inline size_t RoundUp(size_t bytes);\n    //\u83b7\u53d6\u5bf9\u5e94\u54c8\u5e0c\u6876\u7684\u4e0b\u6807\n    static inline size_t Index(size_t bytes);\n};\n</code></pre></p> <p>\u5bf9\u9f50\u6620\u5c04\u89c4\u5219 <pre><code>static inline size_t _RoundUp(size_t bytes, size_t alignNum)\n    {\n        return ((bytes + alignNum - 1) &amp; ~(alignNum - 1));\n    }\n    //\u5185\u8054\u51fd\u6570\uff1a\u8c03\u7528\u9891\u7e41\uff0c\u56e0\u6b64\u5199\u6210\u5185\u8054\u51fd\u6570\n    //\u5411\u4e0a\u5bf9\u9f50\n    static inline size_t RoundUp(size_t size)\n    {\n        if (size &lt;= 128)\n        {\n            return _RoundUp(size, 8);\n        }\n        else if (size &lt;= 1024)\n        {\n            return _RoundUp(size, 16);\n        }\n        else if (size &lt;= 8*1024)\n        {\n            return _RoundUp(size, 128);\n        }\n        else if (size &lt;= 64*1024)\n        {\n            return _RoundUp(size, 1024);\n        }\n        else if (size &lt;= 256 * 1024)\n        {\n            return _RoundUp(size, 8*1024);\n        }\n        else//size &gt; 256 * 1024 byte \n        {\n            return _RoundUp(size, 1&lt;&lt;PAGE_SHIFT);\n        }\n    }\n\n    static inline size_t _Index(size_t bytes, size_t align_shift)\n    {\n        return ((bytes + (1 &lt;&lt; align_shift) - 1) &gt;&gt; align_shift) - 1;\n    }\n    //\u8ba1\u7b97\u6620\u5c04\u7684\u54ea\u4e00\u4e2a\u81ea\u7531\u94fe\u8868\u6876\u4e2d\n    static inline size_t Index(size_t bytes)\n    {\n        assert(bytes &lt;= MAX_BYTES);\n        static int group_array[4] = { 16, 56, 56, 56 };\n        if (bytes &lt;= 128)\n        {\n            return _Index(bytes, 3);\n        }\n        else if (bytes &lt;= 1024)\n        {\n            return _Index(bytes - 128, 4) + group_array[0];\n        }\n        else if (bytes &lt;= 8 * 1024)\n        {\n            return _Index(bytes - 1024, 7) + group_array[0] + group_array[1];\n        }\n        else if (bytes &lt;= 64 * 1024)\n        {\n            return _Index(bytes - 8 * 1024, 10) + group_array[0] + group_array[1] + group_array[2];\n        }\n        else if (bytes &lt;= 256 * 1024)\n        {\n            return _Index(bytes - 64 * 1024, 13) + group_array[0] + group_array[1] + group_array[2] + group_array[3];\n        }\n        else\n        {\n            assert(false);\n            return -1;\n        }\n    }\n</code></pre></p>"},{"location":"%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/#central-cache","title":"central cache","text":"<p>\u4e2d\u5fc3\u7f13\u5b58\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\uff0c\u5f53\u6211\u4eec\u7684thread cache\u6ca1\u6709\u5185\u5b58\u5757\u65f6\u4f1a\u5411central cache\u7533\u8bf7\uff0ccentral cahce\u4e5f\u662f\u4e00\u4e2a\u54c8\u5e0c\u6876\u7684\u7ed3\u6784\uff0c\u4e0d\u8fc7\u5b83\u6302\u8f7d\u7684\u662fSpan List\u94fe\u8868\u7ed3\u6784\uff0cSpan List\u4e2d\u5219\u6709\u4e00\u4e2a\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\u6309\u7167\u54c8\u5e0c\u6876\u7684\u6620\u5c04\u540e\uff0c\u901a\u8fc7\u53cc\u5411\u94fe\u8868\u7684\u5f62\u5f0f\u6302\u5728\u76f8\u5e94\u7684Span\u4e0a\uff0c</p> <p>Central Cache\u672c\u8d28\u662f\u7531\u4e00\u4e2a\u54c8\u5e0c\u6620\u5c04\u7684span\u5bf9\u8c61\u81ea\u7531\u53cc\u5411\u94fe\u8868\u6784\u6210 \u4e3a\u4e86\u4fdd\u8bc1\u5168\u5c40\u53ea\u6709\u552f\u4e00\u7684Central Cache,\u8fd9\u4e2a\u7c7b\u56e0\u6b64\u53ef\u4ee5\u88ab\u8bbe\u8ba1\u79f0\u5355\u4f8b\u6a21\u5f0f(\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u997f\u6c49\u6a21\u5f0f) \u997f\u6c49\u6a21\u5f0f\uff1a\u6784\u9020\u51fd\u6570\u79c1\u6709\uff0c\u5bf9\u8c61\u8bbe\u4e3a\u9759\u6001\u79c1\u6709\u3002\u62f7\u8d1d\u6784\u9020\u548c\u8d4b\u503c\u91cd\u8f7d\u8bbe\u4e3adelete\uff08\u9632\u62f7\u8d1d\uff09 <pre><code>#pragma once\n\n#include \"Common.h\"\n\n// \u5355\u4f8b\u6a21\u5f0f\nclass CentralCache\n{\npublic:\n    static CentralCache* GetInstance()\n    {\n        return &amp;_sInst;\n    }\n\n    // \u83b7\u53d6\u4e00\u4e2a\u975e\u7a7a\u7684span\n    Span* GetOneSpan(SpanList&amp; list, size_t byte_size);\n\n    // \u4ece\u4e2d\u5fc3\u7f13\u5b58\u83b7\u53d6\u4e00\u5b9a\u6570\u91cf\u7684\u5bf9\u8c61\u7ed9thread cache\n    size_t FetchRangeObj(void*&amp; start, void*&amp; end, size_t batchNum, size_t size);\n\n    // \u5c06\u4e00\u5b9a\u6570\u91cf\u7684\u5bf9\u8c61\u91ca\u653e\u5230span\u8de8\u5ea6\n    void ReleaseListToSpans(void* start, size_t byte_size);\n\nprivate:\n    SpanList _spanLists[NFREELIST];\n\nprivate:\n    CentralCache()\n    {}\n\n    CentralCache(const CentralCache&amp;) = delete;\n\n    static CentralCache _sInst;\n};\n</code></pre></p> <p>span\u7684\u7ed3\u6784 <pre><code>//\u7ba1\u7406\u591a\u4e2a\u8fde\u7eed\u9875\u7684\u5927\u5757\u5185\u5b58\u8de8\u5ea6\u7ed3\u6784\nstruct Span\n{\n    PAGE_ID _pageId = 0;//\u5927\u5757\u5185\u5b58\u8d77\u59cb\u9875\u7684\u9875\u53f7\n    size_t _n = 0;//\u9875\u7684\u6570\u91cf\n\n    Span* _next = nullptr;//\u53cc\u5411\u94fe\u8868\u7684\u7ed3\u6784\n    Span* _prev = nullptr;\n\n    size_t _objSize = 0;//\u5207\u597d\u7684\u5c0f\u5bf9\u8c61\u7684\u5927\u5c0f\n    size_t _usecount = 0;//\u5207\u597d\u7684\u5c0f\u5757\u5185\u5b58\uff0c\u88ab\u5206\u914d\u7ed9thread cache\u7684\u8ba1\u6570\n    void* _freeList = nullptr;//\u5207\u597d\u7684\u5c0f\u5757\u5185\u5b58\u7684\u81ea\u7531\u94fe\u8868\n\n    bool _isUse = false;//\u662f\u5426\u5728\u88ab\u4f7f\u7528\n};\n</code></pre> \u4f7f\u7528\u53cc\u5411\u94fe\u8868\u6765\u7ba1\u7406\uff0c\u4e0b\u9762\u662f\u53cc\u5411\u94fe\u8868\u7684\u7ed3\u6784 spanList <pre><code>//\u5e26\u5934\u53cc\u5411\u5faa\u73af\u94fe\u8868\nclass SpanList\n{\npublic:\n    SpanList()\n    {\n        _head = new Span;\n        _head-&gt;_next = _head;\n        _head-&gt;_prev = _head;\n    }\n\n    void Insert(Span* pos, Span* newSpan)\n    {\n        assert(pos);\n        assert(newSpan);\n        Span* prev = pos-&gt;_prev;\n        prev-&gt;_next = newSpan;\n        newSpan-&gt;_prev = prev;\n        newSpan-&gt;_next = pos;\n        pos-&gt;_prev = newSpan;\n    }\n\n    Span* Begin()\n    {\n        return _head-&gt;_next;\n    }\n\n    Span* End()\n    {\n        return _head;\n    }\n\n    bool Empty()\n    {\n        return _head-&gt;_next == _head;\n    }\n    void PushFront(Span* span)\n    {\n        Insert(Begin(), span);\n    }\n\n    Span* PopFront()\n    {\n        Span* front = _head-&gt;_next;\n        Erase(front);\n        return front;\n    }\n    void Erase(Span* pos)\n    {\n        assert(pos);\n        assert(pos != _head);\n\n        Span* prev = pos-&gt;_prev;\n        Span* next = pos-&gt;_next;\n        prev-&gt;_next = next;\n        next-&gt;_prev = prev;\n    }\npublic:\n    std::mutex _mtx;//\u6876\u9501\nprivate:\n    Span* _head;\n};\n</code></pre></p>"},{"location":"%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/#page-cache","title":"page cache","text":"<p>\u5b58\u50a8\u7684\u5185\u5b58\u4ee5page\u4e3a\u5355\u4f4d\u5b58\u50a8\u4ee5\u53ca\u5206\u914d\u7684\uff0c\u5f53central cache\u6ca1\u6709\u5185\u5b58\u5bf9\u8c61\u65f6\uff0c\u6211\u4eec\u4ecepage cache\u5206\u914d\u51fa\u4e00\u5b9a\u6570\u91cf\u7684page\uff0c\u5e76\u5207\u5272\u6210\u5b9a\u957f\u5927\u5c0f\u7684\u5c0f\u5757\u5185\u5b58\uff0c\u5206\u914d\u7ed9central cache\uff0c\u5f53\u4e00\u4e2aspan\u7684\u51e0\u4e2a\u8de8\u5ea6\u9875\u7684\u5bf9\u8c61\u90fd\u6536\u56de\u4ee5\u540e\uff0cpage cache\u4f1a\u56de\u6536central cache\u6ee1\u8db3\u6761\u4ef6\u7684span\u5bf9\u8c61\uff0c\u5408\u5e76\u76f8\u90bb\u7684\u9875\uff0c\u7ec4\u6210\u66f4\u5927\u7684\u9875\uff0c\u8fd9\u6837\u7f13\u89e3\u5185\u5b58\u788e\u7247\u95ee\u9898</p> <p>page\u7684\u4efb\u52a1\u662f \u68c0\u67e5central cache\u7533\u8bf7\u7684\u76f8\u5e94\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u5408\u9002\u7684span,\u9700\u8981\u4ece\u8f83\u5927\u7684span\u4e2d\u5206\u88c2\u4e24\u4e2a \u5982\u679c\u627e\u5230\u94fe\u8868\u7684\u6700\u540e\u90fd\u6ca1\u6709\u5408\u9002\u7684span\uff0c\u5219\u5728\u7cfb\u7edf\u4e2d\u4f7f\u7528VirtualAlloc\u7533\u8bf7\u4e00\u4e2a\u8f83\u5927\u7684span\u3002 pagecache\u4e2d\u7684spanlist\u4e0e\u524d\u4e24\u4e2a\u91c7\u7528\u4e0d\u540c\u7684\u5185\u5b58\u5bf9\u9f50\u539f\u5219\uff0c\u76f4\u63a5\u5c31\u662f1page,2page,3page \u6846\u67b6 <pre><code>#pragma once\n\n#include \"Common.h\"\n#include \"ObjectPool.h\"\n#include \"PageMap.h\"\n\nclass PageCache\n{\npublic:\n    static PageCache* GetInstance()\n    {\n        return &amp;_sInst;\n    }\n\n    // \u83b7\u53d6\u4ece\u5bf9\u8c61\u5230span\u7684\u6620\u5c04\n    Span* MapObjectToSpan(void* obj);\n\n    // \u91ca\u653e\u7a7a\u95f2span\u56de\u5230Pagecache\uff0c\u5e76\u5408\u5e76\u76f8\u90bb\u7684span\n    void ReleaseSpanToPageCache(Span* span);\n\n    // \u83b7\u53d6\u4e00\u4e2aK\u9875\u7684span\n    Span* NewSpan(size_t k);\n\n    std::mutex _pageMtx;\nprivate:\n    SpanList _spanLists[NPAGES];\n    ObjectPool&lt;Span&gt; _spanPool;\n\n    //std::unordered_map&lt;PAGE_ID, Span*&gt; _idSpanMap;\n    //std::map&lt;PAGE_ID, Span*&gt; _idSpanMap;\n    TCMalloc_PageMap1&lt;32 - PAGE_SHIFT&gt; _idSpanMap;\n\n    PageCache()\n    {}\n    PageCache(const PageCache&amp;) = delete;\n\n\n    static PageCache _sInst;\n};\n</code></pre></p>"}]}